{%- set mojom_type = union|get_qualified_name_for_kind %}

template <>
struct {{export_attribute}} UnionTraits<{{mojom_type}}::DataView,
                                        {{mojom_type}}Ptr> {
  static bool IsNull(const {{mojom_type}}Ptr& input) { return !input; }
  static void SetToNull({{mojom_type}}Ptr* output) { output->reset(); }

  static {{mojom_type}}::Tag GetTag(const {{mojom_type}}Ptr& input) {
    return input->which();
  }

{%- for field in union.fields %}
{%-   set return_ref = field.kind|is_object_kind or
                       field.kind|is_any_handle_or_interface_kind %}
{%-   if return_ref %}
  static decltype(std::declval<{{mojom_type}}>().get_{{field.name}}())
      {{field.name}}({{mojom_type}}Ptr& input) {
    return input->get_{{field.name}}();
  }
{%-   else %}
  static decltype(std::declval<{{mojom_type}}>().get_{{field.name}}())
      {{field.name}}(const {{mojom_type}}Ptr& input) {
    return input->get_{{field.name}}();
  }
{%-   endif %}
{%- endfor %}

  static bool Read({{mojom_type}}::DataView input, {{mojom_type}}Ptr* output);
};
