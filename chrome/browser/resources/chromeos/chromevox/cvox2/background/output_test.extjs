// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

GEN_INCLUDE(['../../testing/assert_additions.js']);
GEN_INCLUDE(['../../testing/chromevox_next_e2e_test_base.js']);

/**
 * Gets the braille output and asserts that it matches expected values.
 * Annotations in the output that are primitive strings are ignored.
 */
function checkBrailleOutput(expectedText, expectedSpans, output) {
  var actualOutput = output.brailleOutputForTest;
  // Remove string annotations.  These are tested in the speech output and
  // there's no need to clutter the tests with the corresponding braille
  // annotations.
  var actualSpans = actualOutput.spans_.filter(function(span) {
    return (typeof span.value !== 'string');
  });
  assertEquals(expectedText, actualOutput.toString());

  function describeSpan(span) {
    var obj = {value: span.value, start: span.start, end: span.end};
    if (obj.value instanceof Output.NodeSpan) {
      obj.value.node = (obj.value.node.name || '') + ' ' +
          obj.value.node.toString();
    }
    return JSON.stringify(obj);
  }

  function describeActualSpans() {
    return '\nAll actual spans:\n' + actualSpans.map(describeSpan).join('\n');
  }

  for (var i = 0, max = Math.max(expectedSpans.length, actualSpans.length);
       i < max; ++i) {
    var expectedSpan = expectedSpans[i];
    var actualSpan = actualSpans[i];
    if (!expectedSpan)
      throw Error('Unexpected span in ' + expectedText + ': ' +
          describeSpan(actualSpan) + describeActualSpans());
    if (!actualSpan)
      throw Error('Missing expected span in ' + expectedText + ': ' +
          describeSpan(expectedSpan) + describeActualSpans());
    var equal = true;
    if (expectedSpan.start !== actualSpan.start ||
        expectedSpan.end !== actualSpan.end) {
      equal = false;
    } else if (expectedSpan.value instanceof Output.NodeSpan &&
        (!(actualSpan.value instanceof Output.NodeSpan) ||
        expectedSpan.value.node !== actualSpan.value.node)) {
      equal = false;
    } else {
      equal = (JSON.stringify(expectedSpan.value) ===
          JSON.stringify(actualSpan.value));
    }
    if (!equal) {
      throw Error('Spans differ in ' + expectedText + ':\n' +
          'Expected: ' + describeSpan(expectedSpan) + '\n' +
          'Got     : ' + describeSpan(actualSpan) + describeActualSpans());
    }
  }
}

/**
 * Test fixture for output.js.
 * @constructor
 * @extends {ChromeVoxNextE2ETestBase}
 */
function OutputE2ETest() {
  ChromeVoxNextE2ETest.call(this);
}

OutputE2ETest.prototype = {
  __proto__: ChromeVoxNextE2ETest.prototype,

  /** @override */
  setUp: function() {
    window.Dir = AutomationUtil.Dir;
  }
};

TEST_F('OutputE2ETest', 'Links', function() {
  this.runWithLoadedTree('<a href="#">Click here</a>',
    function(root) {
      var el = root.firstChild.firstChild;
      var range = cursors.Range.fromNode(el);
      var o = new Output().withSpeechAndBraille(range, null, 'navigate');
      assertEqualsJSON({string_: 'Click here|Link', 'spans_': [
        // Attributes.
        {value: 'name', start: 0, end: 10},

        // Link earcon (based on the name).
        {value: {earconId: 'LINK'}, start: 0, end: 10},

        {value: 'role', start: 11, end: 15}
      ]}, o.speechOutputForTest);
      checkBrailleOutput(
          'Click here lnk',
          [{value: new Output.NodeSpan(el), start: 0, end: 14}],
          o);
  });
});

TEST_F('OutputE2ETest', 'Checkbox', function() {
  this.runWithLoadedTree('<input type="checkbox">',
    function(root) {
      var el = root.firstChild.firstChild;
      var range = cursors.Range.fromNode(el);
      var o = new Output().withSpeechAndBraille(range, null, 'navigate');
      assertEqualsJSON({string_: '|Check box|not checked', 'spans_': [
        // Attributes.
        {value: 'name', start: 0, end: 0},
        {value: 'role', start: 1, end: 10},
        {value: 'state', start: 11, end: 22},

        // Checkbox earcon (based on the state).
        {value: {earconId: 'CHECK_OFF'}, start: 11, end: 22}
      ]}, o.speechOutputForTest);
      checkBrailleOutput(
          'chk ( )',
          [{value: new Output.NodeSpan(el), start: 0, end: 7}],
          o);
  });
});

TEST_F('OutputE2ETest', 'InLineTextBoxValueGetsIgnored', function() {
  this.runWithLoadedTree('<p>OK',
    function(root) {
      var el = root.firstChild.firstChild.firstChild;
      assertEquals('inlineTextBox', el.role);
      var range = cursors.Range.fromNode(el);
      var o = new Output().withSpeechAndBraille(range, null, 'navigate');
      assertEqualsJSON({string_: 'OK', 'spans_': [
        // Attributes.
        {value: 'name', start: 0, end: 2}
      ]}, o.speechOutputForTest);
      checkBrailleOutput(
          'OK',
          [{value: new Output.NodeSpan(el), start: 0, end: 2}],
          o);

      el = root.firstChild.firstChild;
      assertEquals('staticText', el.role);
      range = cursors.Range.fromNode(el);
      o = new Output().withSpeechAndBraille(range, null, 'navigate');
      assertEqualsJSON({string_: 'OK|', 'spans_': [
        // Attributes.
        {value: 'value', start: 0, end: 2},

        // The name is an empty string.
        {value: 'name', start: 3, end: 3}
      ]}, o.speechOutputForTest);
      checkBrailleOutput(
          'OK',
          [{value: new Output.NodeSpan(el), start: 0, end: 2}],
          o);
  });
});

TEST_F('OutputE2ETest', 'Headings', function() {
  this.runWithLoadedTree(function() {/*!
      <h1>a</h1><h2>b</h2><h3>c</h3><h4>d</h4><h5>e</h5><h6>f</h6>
      <h1><a href="a.com">b</a></h1> */},
    function(root) {
      var el = root.firstChild;
      for (var i = 1; i <= 6; ++i) {
        var range = cursors.Range.fromNode(el);
        var o = new Output().withSpeechAndBraille(range, null, 'navigate');
        var letter = String.fromCharCode('a'.charCodeAt(0) + i -1);
        assertEqualsJSON({string_: 'Heading ' + i + '|' + letter, 'spans_': [
          // Attributes.
          {value: 'nameOrDescendants', start: 10, end: 11}
        ]}, o.speechOutputForTest);
        checkBrailleOutput(
            'h' + i + ' ' + letter,
            [{value: new Output.NodeSpan(el), start: 0, end: 4}],
            o);
        el = el.nextSibling;
      }

      range = cursors.Range.fromNode(el);
      o = new Output().withSpeechAndBraille(range, null, 'navigate');
      assertEqualsJSON({string_: 'Heading 1|b|Link', 'spans_': [
        // Link.
        {value: 'name', start: 10, end: 11},
        {value: {earconId: "LINK"}, start: 10, end: 11},
        {value: 'role', start: 12, end: 16}
      ]}, o.speechOutputForTest);
      checkBrailleOutput(
          'h1 b lnk',
          [{value: new Output.NodeSpan(el), start: 0, end: 2},
           {value: new Output.NodeSpan(el.firstChild), start: 3, end: 8}],
          o);
  });
});

TEST_F('OutputE2ETest', 'Audio', function() {
  this.runWithLoadedTree('<audio src="foo.mp3" controls></audio>',
    function(root) {
      var el = root.firstChild.firstChild.firstChild.firstChild;
      var range = cursors.Range.fromNode(el);
      var o = new Output().withSpeechAndBraille(range, null, 'navigate');
      assertEqualsJSON(
          {string_: 'audio|Tool bar|play||begin playback|Button',
           spans_:
              // Entered container toolbar.

              // Button.
              [{value: 'name', start: 15, end: 19},

              // Button earcon.
              {value: {earconId: "BUTTON"}, start: 15, end: 19},

              {value: 'value', start: 20, end: 20},
              {value: 'help', start: 21, end: 35},
              {value: 'role', start: 36, end: 42}]
          }, o.speechOutputForTest);
      checkBrailleOutput(
          'audio tlbar play begin playback btn',
          [{value: new Output.NodeSpan(el.parent), start: 0, end: 11},
           {value: new Output.NodeSpan(el), start: 12, end: 35}],
          o);

      el = el.nextSibling;
      var prevRange = range;
      range = cursors.Range.fromNode(el);
      var o = new Output().withSpeechAndBraille(range, prevRange, 'navigate');
      assertEqualsJSON({string_: '0, , slider|audio time scrubber',
          spans_:
              [{value: 'help', start: 12, end: 31}]
          }, o.speechOutputForTest);
      // TODO(plundblad): Investigate this.
      checkBrailleOutput(
          '0, , slider audio time scrubber',
          [{value: new Output.NodeSpan(el), start: 0, end: 31}],
          o);
  });
});

TEST_F('OutputE2ETest', 'Input', function() {
  this.runWithLoadedTree(
      '<input type="text"></input>' +
      '<input type="email"></input>' +
      '<input type="password"></input>' +
      '<input type="tel"></input>'          +
      '<input type="number"></input>' +
      '<input type="time"></input>' +
      '<input type="date"></input>',
    function(root) {
      var expected = {string_: '', 'spans_': [
              {value: 'name', start: 0, end: 0},

              // Earcon
              {value: {earconId: 'EDITABLE_TEXT'}, start: 0, end: 0},

              // Selection span.
              {value: {startIndex: 0, endIndex: 0}, start: 1, end: 1},

              {value: 'value', start: 1, end: 1}
      ]};

      var expectedSpeechValues = [
        '||Edit text',
        '||Edit text, email entry',
        '||Password edit text',
        '||Edit text, number entry',
        {string_: '||Spin button', spans_: [{value: 'name', start: 0, end: 0},
            {value: {earconId:'LISTBOX'}, start: 0, end: 0},
            {value: {startIndex: 0, endIndex: 0}, start: 1, end: 1},
            {value: 'value', start: 1, end: 1},
            {value: 'role', start: 2, end: 13}]},
        {string_: '||Time control', spans_: [{value: 'name', start: 0, end: 0},
            {value: 'value', start: 1, end: 1},
            {value: 'role', start: 2, end: 14}]},
        {string_: '||Date control', spans_: [{value: 'name', start: 0, end: 0},
            {value: 'value', start: 1, end: 1},
            {value: 'role', start: 2, end: 14}]}
      ];
      // TODO(plundblad): Some of these are wrong, there should be an initial
      // space for the cursor in edit fields.
      var expectedBrailleValues = [
        ' ed',
        ' @ed',
        ' pwded',
        ' #ed',
        ' spnbtn',
        {string_: 'time'},
        {string_: 'date'}
      ];
      assertEquals(expectedSpeechValues.length, expectedBrailleValues.length);

      var el = root.firstChild.firstChild;
      expectedSpeechValues.forEach(function(expectedValue) {
        var range = cursors.Range.fromNode(el);
        var o = new Output().withSpeechAndBraille(range, null, 'navigate');
        if (typeof expectedValue == 'object') {
          assertEqualsJSON(expectedValue, o.speechOutputForTest);
        } else {
          expected.string_ = expectedValue;
          assertEqualsJSON(expected, o.speechOutputForTest);
        }
        el = el.nextSibling;
      });

      el = root.firstChild.firstChild;
      expectedBrailleValues.forEach(function(expectedValue) {
        var range = cursors.Range.fromNode(el);
        var o = new Output().withBraille(range, null, 'navigate');
        if (typeof expectedValue === 'string') {
          checkBrailleOutput(
              expectedValue,
              [{value: {startIndex: 0, endIndex: 0}, start: 0, end: 0},
               {value: new Output.NodeSpan(el), start: 0,
                end: expectedValue.length}],
              o);
        } else {
          checkBrailleOutput(
              expectedValue.string_,
              [{value: new Output.NodeSpan(el), start: 0,
                end: expectedValue.string_.length}],
              o);
        }
        el = el.nextSibling;
      });
  });
});

TEST_F('OutputE2ETest', 'List', function() {
  this.runWithLoadedTree(
      '<ul><li>a<li>b<li>c</ul>',
    function(root) {
      var el = root.firstChild.firstChild;
      var range = cursors.Range.fromNode(el);
      var o = new Output().withSpeechAndBraille(range, null, 'navigate');
      assertEqualsJSON({string_: 'list|with 3 items|a||List item', spans_: [
          {value: 'name', start: 18, end: 19},
          {value: {earconId:'LIST_ITEM'}, start: 18, end: 19},
          {value: 'value', start:20, end: 20},
          {value: 'role', start: 21, end: 30}
      ]}, o.speechOutputForTest);
      // TODO(plundblad): This output is wrong.  Add special handling for
      // braille here.
      checkBrailleOutput(
          'list +3 a lstitm',
          [{value: new Output.NodeSpan(el.parent), start: 0, end: 7},
           {value: new Output.NodeSpan(el), start: 8, end: 16}],
          o);
  });
});

TEST_F('OutputE2ETest', 'Tree', function() {
  this.runWithLoadedTree(function() {/*!
    <ul role="tree">
      <li aria-expanded="true" role="treeitem">a
      <li role="treeitem">b
      <li aria-expanded="false" role="treeitem">c
    </ul>
  */},
  function(root) {
    var el = root.firstChild.children[0].firstChild;
    var range = cursors.Range.fromNode(el);
    var o = new Output().withSpeechAndBraille(range, null, 'navigate');
    assertEqualsJSON(
        {string_: '|Tree|with 3 items|Tree item|Expanded| 1 of 3 | level 1 |a|',
        spans_: [
          // Enter rule.

          // TreeItem.
          {value: 'role','start': 19, end: 28},
          {value: 'state', start: 29, end: 37},

          // InLineTextBox.
          {value: 'value', start: 57, end: 58},
          {value: 'name', start: 59, end: 59}
    ]}, o.speechOutputForTest);
    // TODO(plundblad): Braille output is wrong.
    checkBrailleOutput(
        'tree +3 tritm - 1/3  level 1  a',
        [{value: new Output.NodeSpan(el.parent.parent), start: 0, end: 7},
         {value: new Output.NodeSpan(el.parent), start: 8, end: 29},
         {value: new Output.NodeSpan(el), start: 30, end: 31}],
        o);

    el = root.firstChild.children[1].firstChild;
    var range = cursors.Range.fromNode(el);
    var o = new Output().withSpeechAndBraille(range, null, 'navigate');
    assertEqualsJSON(
        {string_: '|Tree|with 3 items|Tree item| 2 of 3 | level 1 |b|',
        spans_: [
          // Enter rule.

          // TreeItem.
          {value: 'role','start': 19, end: 28},

          // InLineTextBox.
          {value: 'value', start: 48, end: 49},
          {value: 'name', start: 50, end: 50}
    ]}, o.speechOutputForTest);
    // TODO(plundblad): Braille output is wrong.
    checkBrailleOutput(
        'tree +3 tritm 2/3  level 1  b',
        [{value: new Output.NodeSpan(el.parent.parent), start: 0, end: 7},
         {value: new Output.NodeSpan(el.parent), start: 8, end: 27},
         {value: new Output.NodeSpan(el), start: 28, end: 29}],
        o);

    el = root.firstChild.children[2].firstChild;
    var range = cursors.Range.fromNode(el);
    var o = new Output().withSpeechAndBraille(range, null, 'navigate');
    assertEqualsJSON(
        {string_: '|Tree|with 3 items|Tree item|Collapsed| 3 of 3 | level 1 |c|',
        spans_: [
          // Enter rule.

          // TreeItem.
          {value: 'role','start': 19, end: 28},
          {value: 'state', start: 29, end: 38},

          // InLineTextBox.
          {value: 'value', start: 58, end: 59},
          {value: 'name', start: 60, end: 60}
    ]}, o.speechOutputForTest);
    // TODO(plundblad): Braille output is wrong.
    checkBrailleOutput(
        'tree +3 tritm + 3/3  level 1  c',
        [{value: new Output.NodeSpan(el.parent.parent), start: 0, end: 7},
         {value: new Output.NodeSpan(el.parent), start: 8, end: 29},
         {value: new Output.NodeSpan(el), start: 30, end: 31}],
        o);
  });
});

TEST_F('OutputE2ETest', 'Menu', function() {
  this.runWithLoadedTree(function() {/*!
    <div role="menu">
      <div role="menuitem">a</div>
    </div>
  */},
  function(root) {
    var el = root.firstChild.firstChild;
    var range = cursors.Range.fromNode(el);
    var o = new Output().withSpeechAndBraille(range, null, 'navigate');
    assertEqualsJSON({string_:
            '|Menu|with 1 item|a|Menu item| 1 of 1 ', spans_: [
        {value: 'name', start: 18, end: 19},
        {value: 'role', start:20, end: 29}
    ]}, o.speechOutputForTest);
    checkBrailleOutput(
        'mnu +1 a mnuitm 1/1',
        [{value: new Output.NodeSpan(el.parent), start: 0, end: 6},
         {value: new Output.NodeSpan(el), start: 7, end: 19}],
        o);
  });
});

TEST_F('OutputE2ETest', 'ListBox', function() {
  this.runWithLoadedTree(function() {/*!
    <select multiple>
      <option>1</option>
      <option>2</option>
    </select>
  */},
  function(root) {
    var el = root.firstChild.firstChild.firstChild;
    var range = cursors.Range.fromNode(el);
    var o = new Output().withSpeechAndBraille(range, null, 'navigate');
    assertEqualsJSON({string_: '|List box|with 2 items||List item| 1 of 2 ',
        spans_: [
          // ListBox.
          // Earcon.
          {value: {earconId:'LISTBOX'}, start: 0, end: 0},

          {value: 'name', start: 23, end: 23},

          // Earcon.
          {value: {earconId: 'LIST_ITEM'}, start: 23, end: 23},

          {value: 'role', start:24, end: 33}
    ]}, o.speechOutputForTest);
    checkBrailleOutput(
        'lstbx +2 lstitm 1/2',
        [{value: new Output.NodeSpan(el.parent), start: 0, end: 8},
         {value: new Output.NodeSpan(el), start: 9, end: 19}],
        o);
  });
});

SYNC_TEST_F('OutputE2ETest', 'MessageIdAndEarconValidity', function() {
  for (var key in Output.ROLE_INFO_) {
    var value = Output.ROLE_INFO_[key];
    cvox.ChromeVox.msgs.getMsg(value.msgId);
    cvox.ChromeVox.msgs.getMsg(value.msgId + '_brl');
    assertFalse(/[A-Z]+/.test(value.msgId));
    if (value.earconId)
      assertNotNullNorUndefined(cvox.AbstractEarcons[value.earconId]);
  }
  for (var key in Output.STATE_INFO_) {
    var value = Output.STATE_INFO_[key];
    for (innerKey in value) {
      var innerValue = value[innerKey];
      cvox.ChromeVox.msgs.getMsg(innerValue.msgId);
      cvox.ChromeVox.msgs.getMsg(innerValue.msgId + '_brl');
      assertFalse(/[A-Z]+/.test(innerValue.msgId));
      if (innerValue.earconId)
        assertNotNullNorUndefined(cvox.AbstractEarcons[innerValue.earconId]);
    }
  }
});
