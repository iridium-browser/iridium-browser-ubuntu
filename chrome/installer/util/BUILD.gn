# Copyright 2014 The Chromium Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

static_library("util") {
  deps = [
    "//base",
    "//chrome:resources",
    "//chrome:strings",
  ]

  if (is_win) {
    # TODO(GYP) installer_util on Windows.
    # This is a bit tricky. It seems that what's currently called
    # installer_util_nacl_win64 should be a different target with a different
    # name ("installer_util_minimal"?) since it's not strictly the 64-bit build
    # of that target.
    sources = [
      "chrome_binaries_operations.cc",
      "chrome_binaries_operations.h",
      "chrome_browser_operations.cc",
      "chrome_browser_operations.h",
      "chrome_browser_sxs_operations.cc",
      "chrome_browser_sxs_operations.h",
      "chrome_frame_operations.cc",
      "chrome_frame_operations.h",
      "compat_checks.cc",
      "compat_checks.h",
      "delete_after_reboot_helper.cc",
      "delete_after_reboot_helper.h",
      "google_chrome_distribution.cc",
      "google_chrome_distribution.h",
      "html_dialog.h",
      "html_dialog_impl.cc",
      "installation_validator.cc",
      "installation_validator.h",
      "logging_installer.cc",
      "logging_installer.h",
      "lzma_util.cc",
      "lzma_util.h",
      "master_preferences.cc",
      "master_preferences.h",
      "product.cc",
      "product.h",
      "product_operations.h",
      "self_cleaning_temp_dir.cc",
      "self_cleaning_temp_dir.h",
      "shell_util.cc",
      "shell_util.h",
      "uninstall_metrics.cc",
      "uninstall_metrics.h",
      "user_experiment.cc",
      "user_experiment.h",
    ]
    deps += [
      ":strings",
      "//base/third_party/dynamic_annotations",
      "//chrome/common:constants",
      "//components/metrics",
      "//courgette:courgette_lib",
      "//crypto",
      "//third_party/bspatch",
      "//third_party/icu",
      "//third_party/lzma_sdk",
    ]
    include_dirs = [ "$root_gen_dir/installer_util_strings" ]

    # TODO(jschuh): crbug.com/167187 fix size_t to int truncations.
    configs += [ "//build/config/compiler:no_size_t_to_int_warning" ]

    # TODO(GYP) hook up corresponding version of installer_util_nacl_win64 in GN
    sources += [
      "advanced_firewall_manager_win.cc",
      "advanced_firewall_manager_win.h",
      "app_command.cc",
      "app_command.h",
      "app_commands.cc",
      "app_commands.h",
      "app_registration_data.h",
      "auto_launch_util.cc",
      "auto_launch_util.h",
      "beacons.cc",
      "beacons.h",
      "browser_distribution.cc",
      "browser_distribution.h",
      "callback_work_item.cc",
      "callback_work_item.h",
      "channel_info.cc",
      "channel_info.h",
      "chrome_frame_distribution.cc",
      "chrome_frame_distribution.h",
      "chromium_binaries_distribution.cc",
      "chromium_binaries_distribution.h",
      "conditional_work_item_list.cc",
      "conditional_work_item_list.h",
      "copy_tree_work_item.cc",
      "copy_tree_work_item.h",
      "create_dir_work_item.cc",
      "create_dir_work_item.h",
      "create_reg_key_work_item.cc",
      "create_reg_key_work_item.h",
      "delete_reg_key_work_item.cc",
      "delete_reg_key_work_item.h",
      "delete_reg_value_work_item.cc",
      "delete_reg_value_work_item.h",
      "delete_tree_work_item.cc",
      "delete_tree_work_item.h",
      "duplicate_tree_detector.cc",
      "duplicate_tree_detector.h",
      "firewall_manager_win.cc",
      "firewall_manager_win.h",
      "google_chrome_binaries_distribution.cc",
      "google_chrome_binaries_distribution.h",
      "google_chrome_sxs_distribution.cc",
      "google_chrome_sxs_distribution.h",
      "google_update_constants.cc",
      "google_update_constants.h",
      "google_update_experiment_util.cc",
      "google_update_experiment_util.h",
      "google_update_settings.cc",
      "google_update_settings.h",
      "google_update_util.cc",
      "google_update_util.h",
      "helper.cc",
      "helper.h",
      "install_util.cc",
      "install_util.h",
      "installation_state.cc",
      "installation_state.h",
      "installer_state.cc",
      "installer_state.h",
      "l10n_string_util.cc",
      "l10n_string_util.h",
      "language_selector.cc",
      "language_selector.h",
      "legacy_firewall_manager_win.cc",
      "legacy_firewall_manager_win.h",
      "master_preferences_constants.cc",
      "master_preferences_constants.h",
      "move_tree_work_item.cc",
      "move_tree_work_item.h",
      "non_updating_app_registration_data.cc",
      "non_updating_app_registration_data.h",
      "registry_key_backup.cc",
      "registry_key_backup.h",
      "self_reg_work_item.cc",
      "self_reg_work_item.h",
      "set_reg_value_work_item.cc",
      "set_reg_value_work_item.h",
      "updating_app_registration_data.cc",
      "updating_app_registration_data.h",
      "util_constants.cc",
      "util_constants.h",
      "wmi.cc",
      "wmi.h",
      "work_item.cc",
      "work_item.h",
      "work_item_list.cc",
      "work_item_list.h",
    ]
  } else {
    sources = [
      "google_update_experiment_util.cc",
      "google_update_experiment_util.h",
      "master_preferences.cc",
      "master_preferences.h",
      "master_preferences_constants.cc",
      "master_preferences_constants.h",
    ]
  }
}

action("strings") {
  script = "prebuild/create_string_rc.py"

  if (is_chrome_branded) {
    grdfile = "//chrome/app/google_chrome_strings.grd"
  } else {
    grdfile = "//chrome/app/chromium_strings.grd"
  }

  inputs = [
    grdfile,
  ]

  # TODO(brettw) move to target_gen_dir
  outdir = "$root_gen_dir/installer_util_strings"
  outputs = [
    "$outdir/installer_util_strings.h",
    "$outdir/installer_util_strings.rc",
  ]

  args = [
    "-i",
    rebase_path(grdfile, root_build_dir) + ":resources",
    "-n",
    "installer_util_strings",
    "-o",
    rebase_path(outdir, root_build_dir),
  ]
}
