#!/usr/bin/env python
# Copyright 2017 The Chromium Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.
#
# Script to download, package, update, and upload OpenCV (cv2).
#
# Note: This has not been tested on Windows. The Windows cv2 binary in
# Cloud Storage was created manually by the following process:
# * Download
#   https://github.com/opencv/opencv/releases/download/2.4.13.2/opencv-2.4.13.2-vc14.exe
# * Open using 7-Zip (or just run the exe)
# * Extract opencv/build/python/2.7/x64/cv2.pyd
# * Create a zip file containing only cv2.pyd
# * Rename cv2.zip to cv2_$(sha1sum cv2.zip)
# * Upload to cloud storage at chromium-telemetry/binary_dependencies
# * Add entry including hash and version number to cv2 win_AMD64 entry
#   in binary_dependencies.json

DESCRIPTION = '''\
Downloads + builds OpenCV (cv2), packages it as a zip, and updates \
binary_dependencies.json and Cloud Storage with the result. (NOTE: \
Not tested on Windows. See comments for details.)'''

import argparse
import contextlib
import glob
import multiprocessing
import os
import shutil
import sys
import tarfile
import urllib
import zipfile

# Catapult imports
SCRIPT_DIR = os.path.abspath(os.path.dirname(__file__))
CATAPULT_ROOT = os.path.abspath(os.path.join(SCRIPT_DIR, '..', '..', '..'))
sys.path.append(os.path.join(CATAPULT_ROOT, 'common', 'py_utils'))
from py_utils import shell_util as sh
sys.path.append(os.path.join(CATAPULT_ROOT, 'telemetry'))
from telemetry.core import platform as platform_module

# Numpy is a dependency for building OpenCV. Make sure we use the right version.
NUMPY_GLOB = os.path.join(CATAPULT_ROOT, 'telemetry', 'third_party', 'numpy',
                          'lib', 'numpy_*')
NUMPY_PATH = glob.glob(NUMPY_GLOB)
if len(NUMPY_PATH) != 1:
  raise ImportError("telemetry/third_party/numpy/lib/numpy_* is required. "
      "Ensure this by running fetch_telemetry_binary_dependencies. "
      "If a binary dependency for numpy is not available on this platform, "
      "it must be configured before building cv2.")
NUMPY_PATH = NUMPY_PATH[0]
# insert rather than append to make sure we don't get system numpy.
sys.path.insert(1, NUMPY_PATH)

class RollError(Exception):
  pass


def verify_dependency_entry(dependency):
  binary_manager.UpdateDependency(dependency, None, None)

# Main
def main(version):
  verify_dependency_entry('cv2')

  outdir = os.path.join(SCRIPT_DIR, 'lib')
  if os.path.exists(outdir):
    shutil.rmtree(outdir)
  os.mkdir(outdir)

  tarball_url = \
      'https://codeload.github.com/opencv/opencv/tar.gz/{}'.format(version)

  zip_full_base = os.path.join(outdir, 'cv2')
  zip_result = None

  with sh.ScopedTempDir():
    with contextlib.closing(urllib.urlopen(tarball_url)) as stream:
      print 'Downloading and extracting', tarball_url, '...'
      with tarfile.open(fileobj=stream, mode="r|gz") as tarball:
        tarball.extractall()
    with sh.ScopedChangeDir('opencv-{}'.format(version)):
      os.mkdir('build')
      os.mkdir('install')
      with sh.ScopedChangeDir('build'):
        # BUILD_SHARED_LIBS=OFF - Build, e.g., a statically linked .so instead
        #                         of a .so that dynamically links .dylibs.
        # CMAKE_INSTALL_PREFIX=../install - Install to a local directory.
        sh.CallProgram(['cmake'],
            '..',
            '-DBUILD_SHARED_LIBS=OFF',
            '-DCMAKE_BUILD_TYPE=Release',
            '-DCMAKE_INSTALL_PREFIX={}'.format(os.path.join('..', 'install')),
            PYTHONPATH=NUMPY_PATH)
        sh.CallProgram(['make'],
            '-j{}'.format(multiprocessing.cpu_count()),
            'install',
            PYTHONPATH=NUMPY_PATH)
      with sh.ScopedChangeDir('install'):
        print 'Zipping result...'
        root_dir = glob.glob(os.path.join('lib', 'python2.*', '*-packages'))
        if len(root_dir) != 1:
          raise RollError(
              'Expected one glob match, found {}'.format(len(root_dir)))
        root_dir = root_dir[0]
        zip_result = shutil.make_archive(
            base_name=zip_full_base,
            format='zip',
            root_dir=root_dir,
            base_dir='.')  # '.' gives us everything in the root_dir
    print 'Uploading zip...'
    binary_manager.UpdateDependency('cv2', zip_result, version)

  print '''\
  Don't forget to run:
  $ GYP_DEFINES=fetch_telemetry_dependencies=1 \
  bin/fetch_telemetry_binary_dependencies
  if you want to use the new dependency version locally!'''

if __name__ == '__main__':
  VERSION_HELP = '''\
      OpenCV package version, e.g. 2.4.13.2. For a release list, see \
      <https://github.com/opencv/opencv/releases>. \
      For version support, see \
      `telemetry/telemetry/internal/util/external_modules.py`.'''

  try:
    parser = argparse.ArgumentParser(description=DESCRIPTION)
    parser.add_argument('version', help=VERSION_HELP)
    args = parser.parse_args()

    os.chdir(SCRIPT_DIR)
    main(args.version)
  except RollError as e:
    print '{}: {}'.format(type(e).__name__, e.message)
    sys.exit(1)
