#!/usr/bin/env python
# Copyright 2017 The Chromium Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

import argparse
import json
import sys
import os

tracing_path = os.path.abspath(os.path.join(
  os.path.dirname(os.path.realpath(__file__)), '..'))
sys.path.append(tracing_path)
import tracing_project
tracing_project.UpdateSysPathIfNeeded()
from py_utils import camel_case
from tracing.value import histogram_set
from tracing.value import merge_histograms
from tracing.value.diagnostics import generic_set
from tracing.value.diagnostics import reserved_infos

def main():
  parser = argparse.ArgumentParser(
      description='Adds reserved diagnostics to a HistogramSet.',
      add_help=False)
  parser.add_argument('input_path',
                      help='HistogramSet JSON file path (input).')
  parser.add_argument(
      '--stdout',
      action='store_true',
      help='If present, will print the new HistogramSet instead of '
           'clobbering the file referenced by input_path.')
  parser.add_argument(
      '--output_path',
      help='If present, will write new HistogramSet to this file instead of '
           'clobbering the file referenced by input_path.')
  parser.add_argument('-h', '--help', action='help',
                      help='Show this help message and exit.')
  arg_names_to_infos = {}
  for info in reserved_infos.AllInfos():
    if info.type == 'GenericSet':
      name = camel_case.ToUnderscore(info.name)
      arg_names_to_infos[name] = info
      parser.add_argument('--%s' % name)

  args = parser.parse_args()

  names_to_values = {}
  for name, value in vars(args).iteritems():
    if name in arg_names_to_infos and value is not None:
      diagnostic_name = arg_names_to_infos[name].name
      ctor = arg_names_to_infos[name].entry_type
      names_to_values[diagnostic_name] = ctor(value)

  # TODO(#3987): Refactor recipes to call merge_histograms separately.
  dicts_across_repeats = merge_histograms.MergeHistograms(args.input_path, (
    'name', 'stories'))
  dicts_across_stories = merge_histograms.MergeHistograms(args.input_path, (
    'name',))

  # After merging across stories, any histograms with fewer than 2 stories are
  # duplicates of histograms from merging across repeats and can be discarded.
  def _ShouldDiscard(hist):
    s = hist.diagnostics.get(reserved_infos.STORIES.name, [])
    return len(s) <= 1

  histograms = histogram_set.HistogramSet()
  histograms.ImportDicts(dicts_across_stories)
  histograms.ResolveRelatedHistograms()
  discard = [h.guid for h in histograms if _ShouldDiscard(h)]

  dicts_across_stories = [
      d for d in dicts_across_stories if d['guid'] not in discard]

  histograms = histogram_set.HistogramSet()
  histograms.ImportDicts(dicts_across_repeats)
  histograms.ImportDicts(dicts_across_stories)

  for name, value in names_to_values.iteritems():
    histograms.AddSharedDiagnostic(name, generic_set.GenericSet([value]))

  results_json = json.dumps(histograms.AsDicts())

  if args.stdout:
    print results_json
  else:
    path = args.output_path or args.input_path
    with open(path, 'w') as f:
      f.write(results_json)

  return 0

if __name__ == '__main__':
  sys.exit(main())
