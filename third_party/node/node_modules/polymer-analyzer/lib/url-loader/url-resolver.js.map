{"version":3,"sources":["url-loader/url-resolver.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;GAYG;;AAIH;;;;;;;GAOG;AACH;IAWY,eAAe,CAAC,GAAW;QACnC,MAAM,CAAC,GAAkB,CAAC;IAC5B,CAAC;CACF;AAdD,kCAcC","file":"url-resolver.js","sourcesContent":["/**\n * @license\n * Copyright (c) 2016 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\nimport {PackageRelativeUrl, ResolvedUrl} from '../model/url';\n\n/**\n * Resolves the given URL to the concrete URL that a resource can\n * be loaded from.\n *\n * This can be useful to resolve name to paths, such as resolving 'polymer' to\n * '../polymer/polymer.html', or component paths, like '../polymer/polymer.html'\n * to '/bower_components/polymer/polymer.html'.\n */\nexport abstract class UrlResolver {\n  /**\n   * Returns `true` if this resolver can resolve the given `url`.\n   */\n  abstract canResolve(url: PackageRelativeUrl): boolean;\n\n  /**\n   * Resoves `url` to a new location.\n   */\n  abstract resolve(url: PackageRelativeUrl): ResolvedUrl;\n\n  protected brandAsResolved(url: string): ResolvedUrl {\n    return url as ResolvedUrl;\n  }\n}\n"]}