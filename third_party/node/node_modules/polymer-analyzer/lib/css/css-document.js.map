{"version":3,"sources":["css/css-document.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;GAYG;;AAEH,0CAA0C;AAG1C,iDAA6E;AAE7E,2CAA4C;AAI5C,uBAA+B,SAAQ,yBAAmC;IAGxE,YAAY,IAAyB;QACnC,KAAK,CAAC,IAAI,CAAC,CAAC;QAHd,SAAI,GAAG,KAAK,CAAC;IAIb,CAAC;IAED,KAAK,CAAC,QAAmB;QACvB,GAAG,CAAC,CAAC,MAAM,IAAI,IAAI,IAAI,CAAC,CAAC,CAAC;YACxB,GAAG,CAAC,CAAC,MAAM,OAAO,IAAI,QAAQ,CAAC,CAAC,CAAC;gBAC/B,OAAO,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;YACtB,CAAC;QACH,CAAC;IACH,CAAC;IAED,kBAAkB,CAAC,IAAgB;QACjC,MAAM,CAAC,IAAI,CAAC,wBAAwB,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;IACnD,CAAC;IAED,wBAAwB,CAAC,KAAkB;QACzC,MAAM,CAAC,IAAI,CAAC,oBAAoB,CAAC,KAAK,CAAC,KAAK,EAAE,KAAK,CAAC,GAAG,CAAC,CAAC;IAC3D,CAAC;IAES,mBAAmB,CAAC,IAAgB;QAC5C,MAAM,CAAC,IAAI,CAAC,wBAAwB,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;IACnD,CAAC;IAED,SAAS,CAAC,OAA0B;QAClC,OAAO,GAAG,OAAO,IAAI,EAAE,CAAC;QACxB,gBAAgB,CAAC,KAAK,CAAC;QACvB,MAAM,gBAAgB,GAAG,WAAW,CAChC,gBAAgB,CAAC,SAAS,CAAC,IAAI,CAAC,GAAG,CAAC,EACpC,EAAC,MAAM,EAAE,IAAI,EAAE,aAAa,EAAE,IAAI,EAAE,SAAS,EAAE,aAAa,EAAC,CAAC,CAAC;QAEnE,MAAM,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,IAAI,CAAC,CAAC,CAAC;QAEhD,MAAM,CAAC,gBAAgB,CAAC,KAAK,CAAC,IAAI,CAAC;aACvB,GAAG,CAAC,CAAC,IAAI,EAAE,EAAE,CAAC,IAAI,KAAK,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,MAAM,GAAG,IAAI,CAAC;aAC/C,IAAI,CAAC,IAAI,CAAC;YAClB,IAAI,CAAC;IACX,CAAC;IAED,CAAE,CAAC,MAAM,CAAC,QAAQ,CAAC;QACjB,KAAK,CAAC,CAAC,KAAK,CAAC,cAAc,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;IACxC,CAAC;CACF;AA7CD,8CA6CC;AAED,MAAM,gBAAgB,GAAG,IAAI,KAAK,CAAC,WAAW,EAAE,CAAC","file":"css-document.js","sourcesContent":["/**\n * @license\n * Copyright (c) 2016 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\nimport * as shady from 'shady-css-parser';\n\nimport {SourceRange} from '../model/model';\nimport {Options, ParsedDocument, StringifyOptions} from '../parser/document';\n\nimport cssbeautify = require('cssbeautify');\n\nexport interface Visitor { visit(node: shady.Node): void; }\n\nexport class ParsedCssDocument extends ParsedDocument<shady.Node, Visitor> {\n  type = 'css';\n\n  constructor(from: Options<shady.Node>) {\n    super(from);\n  }\n\n  visit(visitors: Visitor[]) {\n    for (const node of this) {\n      for (const visitor of visitors) {\n        visitor.visit(node);\n      }\n    }\n  }\n\n  sourceRangeForNode(node: shady.Node): SourceRange {\n    return this.sourceRangeForShadyRange(node.range);\n  }\n\n  sourceRangeForShadyRange(range: shady.Range): SourceRange {\n    return this.offsetsToSourceRange(range.start, range.end);\n  }\n\n  protected _sourceRangeForNode(node: shady.Node): SourceRange {\n    return this.sourceRangeForShadyRange(node.range);\n  }\n\n  stringify(options?: StringifyOptions) {\n    options = options || {};\n    shadyStringifier.visit;\n    const beautifulResults = cssbeautify(\n        shadyStringifier.stringify(this.ast),\n        {indent: '  ', autosemicolon: true, openbrace: 'end-of-line'});\n\n    const indent = '  '.repeat(options.indent || 0);\n\n    return beautifulResults.split('\\n')\n               .map((line) => line === '' ? '' : indent + line)\n               .join('\\n') +\n        '\\n';\n  }\n\n  * [Symbol.iterator](): Iterator<shady.Node> {\n    yield* shady.iterateOverAst(this.ast);\n  }\n}\n\nconst shadyStringifier = new shady.Stringifier();\n"]}