// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file has been auto-generated by code_generator_v8.py. DO NOT MODIFY!

#include "config.h"
#include "V8TestDictionary.h"

#include "bindings/core/v8/ExceptionState.h"
#include "bindings/core/v8/ScriptValue.h"
#include "bindings/core/v8/UnionTypesCore.h"
#include "bindings/core/v8/V8Element.h"
#include "bindings/core/v8/V8EventTarget.h"
#include "bindings/core/v8/V8InternalDictionary.h"
#include "bindings/core/v8/V8TestInterface.h"
#include "bindings/core/v8/V8TestInterface2.h"
#include "bindings/core/v8/V8TestInterfaceGarbageCollected.h"
#include "bindings/core/v8/V8TestInterfaceWillBeGarbageCollected.h"
#include "bindings/core/v8/V8Uint8Array.h"
#include "core/frame/UseCounter.h"

namespace blink {

void V8TestDictionary::toImpl(v8::Isolate* isolate, v8::Local<v8::Value> v8Value, TestDictionary& impl, ExceptionState& exceptionState)
{
    if (isUndefinedOrNull(v8Value))
        return;
    if (!v8Value->IsObject()) {
        exceptionState.throwTypeError("cannot convert to dictionary.");
        return;
    }

    v8::Local<v8::Object> v8Object = v8Value->ToObject(isolate);
    v8::TryCatch block;
    v8::Local<v8::Value> booleanMemberValue = v8Object->Get(v8String(isolate, "booleanMember"));
    if (block.HasCaught()) {
        exceptionState.rethrowV8Exception(block.Exception());
        return;
    }
    if (booleanMemberValue.IsEmpty() || booleanMemberValue->IsUndefined()) {
        // Do nothing.
    } else {
        bool booleanMember = booleanMemberValue->BooleanValue();
        impl.setBooleanMember(booleanMember);
    }

    v8::Local<v8::Value> createValue = v8Object->Get(v8String(isolate, "create"));
    if (block.HasCaught()) {
        exceptionState.rethrowV8Exception(block.Exception());
        return;
    }
    if (createValue.IsEmpty() || createValue->IsUndefined()) {
        // Do nothing.
    } else {
        bool create = createValue->BooleanValue();
        impl.setCreateMember(create);
    }

    v8::Local<v8::Value> deprecatedCreateMemberValue = v8Object->Get(v8String(isolate, "deprecatedCreateMember"));
    if (block.HasCaught()) {
        exceptionState.rethrowV8Exception(block.Exception());
        return;
    }
    if (deprecatedCreateMemberValue.IsEmpty() || deprecatedCreateMemberValue->IsUndefined()) {
        // Do nothing.
    } else {
        UseCounter::countDeprecationIfNotPrivateScript(isolate, callingExecutionContext(isolate), UseCounter::CreateMember);
        bool deprecatedCreateMember = deprecatedCreateMemberValue->BooleanValue();
        impl.setCreateMember(deprecatedCreateMember);
    }

    v8::Local<v8::Value> doubleOrNullMemberValue = v8Object->Get(v8String(isolate, "doubleOrNullMember"));
    if (block.HasCaught()) {
        exceptionState.rethrowV8Exception(block.Exception());
        return;
    }
    if (doubleOrNullMemberValue.IsEmpty() || doubleOrNullMemberValue->IsUndefined()) {
        // Do nothing.
    } else if (doubleOrNullMemberValue->IsNull()) {
        impl.setDoubleOrNullMemberToNull();
    } else {
        double doubleOrNullMember = toRestrictedDouble(isolate, doubleOrNullMemberValue, exceptionState);
        if (exceptionState.hadException())
            return;
        impl.setDoubleOrNullMember(doubleOrNullMember);
    }

    v8::Local<v8::Value> doubleOrStringMemberValue = v8Object->Get(v8String(isolate, "doubleOrStringMember"));
    if (block.HasCaught()) {
        exceptionState.rethrowV8Exception(block.Exception());
        return;
    }
    if (doubleOrStringMemberValue.IsEmpty() || doubleOrStringMemberValue->IsUndefined()) {
        // Do nothing.
    } else {
        DoubleOrString doubleOrStringMember;
        V8DoubleOrString::toImpl(isolate, doubleOrStringMemberValue, doubleOrStringMember, exceptionState);
        if (exceptionState.hadException())
            return;
        impl.setDoubleOrStringMember(doubleOrStringMember);
    }

    v8::Local<v8::Value> elementOrNullMemberValue = v8Object->Get(v8String(isolate, "elementOrNullMember"));
    if (block.HasCaught()) {
        exceptionState.rethrowV8Exception(block.Exception());
        return;
    }
    if (elementOrNullMemberValue.IsEmpty() || elementOrNullMemberValue->IsUndefined()) {
        // Do nothing.
    } else if (elementOrNullMemberValue->IsNull()) {
        impl.setElementOrNullMemberToNull();
    } else {
        Element* elementOrNullMember = V8Element::toImplWithTypeCheck(isolate, elementOrNullMemberValue);
        if (!elementOrNullMember && !elementOrNullMemberValue->IsNull()) {
            exceptionState.throwTypeError("member elementOrNullMember is not of type Element.");
            return;
        }
        impl.setElementOrNullMember(elementOrNullMember);
    }

    v8::Local<v8::Value> enumMemberValue = v8Object->Get(v8String(isolate, "enumMember"));
    if (block.HasCaught()) {
        exceptionState.rethrowV8Exception(block.Exception());
        return;
    }
    if (enumMemberValue.IsEmpty() || enumMemberValue->IsUndefined()) {
        // Do nothing.
    } else {
        V8StringResource<> enumMember = enumMemberValue;
        if (!enumMember.prepare(exceptionState))
            return;
        static const char* validValues[] = {
            "",
            "EnumValue1",
            "EnumValue2",
            "EnumValue3",
        };
        if (!isValidEnum(enumMember, validValues, WTF_ARRAY_LENGTH(validValues), "TestEnum", exceptionState))
            return;
        impl.setEnumMember(enumMember);
    }

    v8::Local<v8::Value> enumSequenceMemberValue = v8Object->Get(v8String(isolate, "enumSequenceMember"));
    if (block.HasCaught()) {
        exceptionState.rethrowV8Exception(block.Exception());
        return;
    }
    if (enumSequenceMemberValue.IsEmpty() || enumSequenceMemberValue->IsUndefined()) {
        // Do nothing.
    } else {
        Vector<String> enumSequenceMember = toImplArray<String>(enumSequenceMemberValue, 0, isolate, exceptionState);
        if (exceptionState.hadException())
            return;
        static const char* validValues[] = {
            "",
            "EnumValue1",
            "EnumValue2",
            "EnumValue3",
        };
        if (!isValidEnum(enumSequenceMember, validValues, WTF_ARRAY_LENGTH(validValues), "TestEnum", exceptionState))
            return;
        impl.setEnumSequenceMember(enumSequenceMember);
    }

    v8::Local<v8::Value> eventTargetMemberValue = v8Object->Get(v8String(isolate, "eventTargetMember"));
    if (block.HasCaught()) {
        exceptionState.rethrowV8Exception(block.Exception());
        return;
    }
    if (eventTargetMemberValue.IsEmpty() || eventTargetMemberValue->IsUndefined()) {
        // Do nothing.
    } else {
        EventTarget* eventTargetMember = toEventTarget(isolate, eventTargetMemberValue);
        if (!eventTargetMember && !eventTargetMemberValue->IsNull()) {
            exceptionState.throwTypeError("member eventTargetMember is not of type EventTarget.");
            return;
        }
        impl.setEventTargetMember(eventTargetMember);
    }

    v8::Local<v8::Value> internalDictionarySequenceMemberValue = v8Object->Get(v8String(isolate, "internalDictionarySequenceMember"));
    if (block.HasCaught()) {
        exceptionState.rethrowV8Exception(block.Exception());
        return;
    }
    if (internalDictionarySequenceMemberValue.IsEmpty() || internalDictionarySequenceMemberValue->IsUndefined()) {
        // Do nothing.
    } else {
        Vector<InternalDictionary> internalDictionarySequenceMember = toImplArray<InternalDictionary>(internalDictionarySequenceMemberValue, 0, isolate, exceptionState);
        if (exceptionState.hadException())
            return;
        impl.setInternalDictionarySequenceMember(internalDictionarySequenceMember);
    }

    v8::Local<v8::Value> longMemberValue = v8Object->Get(v8String(isolate, "longMember"));
    if (block.HasCaught()) {
        exceptionState.rethrowV8Exception(block.Exception());
        return;
    }
    if (longMemberValue.IsEmpty() || longMemberValue->IsUndefined()) {
        // Do nothing.
    } else {
        int longMember = toInt32(isolate, longMemberValue, NormalConversion, exceptionState);
        if (exceptionState.hadException())
            return;
        impl.setLongMember(longMember);
    }

    v8::Local<v8::Value> objectMemberValue = v8Object->Get(v8String(isolate, "objectMember"));
    if (block.HasCaught()) {
        exceptionState.rethrowV8Exception(block.Exception());
        return;
    }
    if (objectMemberValue.IsEmpty() || objectMemberValue->IsUndefined()) {
        // Do nothing.
    } else {
        ScriptValue objectMember = ScriptValue(ScriptState::current(isolate), objectMemberValue);
        if (!objectMember.isObject()) {
            exceptionState.throwTypeError("member objectMember is not an object.");
            return;
        }
        impl.setObjectMember(objectMember);
    }

    v8::Local<v8::Value> objectOrNullMemberValue = v8Object->Get(v8String(isolate, "objectOrNullMember"));
    if (block.HasCaught()) {
        exceptionState.rethrowV8Exception(block.Exception());
        return;
    }
    if (objectOrNullMemberValue.IsEmpty() || objectOrNullMemberValue->IsUndefined()) {
        // Do nothing.
    } else if (objectOrNullMemberValue->IsNull()) {
        impl.setObjectOrNullMemberToNull();
    } else {
        ScriptValue objectOrNullMember = ScriptValue(ScriptState::current(isolate), objectOrNullMemberValue);
        if (!objectOrNullMember.isObject()) {
            exceptionState.throwTypeError("member objectOrNullMember is not an object.");
            return;
        }
        impl.setObjectOrNullMember(objectOrNullMember);
    }

    v8::Local<v8::Value> otherDoubleOrStringMemberValue = v8Object->Get(v8String(isolate, "otherDoubleOrStringMember"));
    if (block.HasCaught()) {
        exceptionState.rethrowV8Exception(block.Exception());
        return;
    }
    if (otherDoubleOrStringMemberValue.IsEmpty() || otherDoubleOrStringMemberValue->IsUndefined()) {
        // Do nothing.
    } else {
        DoubleOrString otherDoubleOrStringMember;
        V8DoubleOrString::toImpl(isolate, otherDoubleOrStringMemberValue, otherDoubleOrStringMember, exceptionState);
        if (exceptionState.hadException())
            return;
        impl.setOtherDoubleOrStringMember(otherDoubleOrStringMember);
    }

    v8::Local<v8::Value> restrictedDoubleMemberValue = v8Object->Get(v8String(isolate, "restrictedDoubleMember"));
    if (block.HasCaught()) {
        exceptionState.rethrowV8Exception(block.Exception());
        return;
    }
    if (restrictedDoubleMemberValue.IsEmpty() || restrictedDoubleMemberValue->IsUndefined()) {
        // Do nothing.
    } else {
        double restrictedDoubleMember = toRestrictedDouble(isolate, restrictedDoubleMemberValue, exceptionState);
        if (exceptionState.hadException())
            return;
        impl.setRestrictedDoubleMember(restrictedDoubleMember);
    }

    v8::Local<v8::Value> stringArrayMemberValue = v8Object->Get(v8String(isolate, "stringArrayMember"));
    if (block.HasCaught()) {
        exceptionState.rethrowV8Exception(block.Exception());
        return;
    }
    if (stringArrayMemberValue.IsEmpty() || stringArrayMemberValue->IsUndefined()) {
        // Do nothing.
    } else {
        Vector<String> stringArrayMember = toImplArray<String>(stringArrayMemberValue, 0, isolate, exceptionState);
        if (exceptionState.hadException())
            return;
        impl.setStringArrayMember(stringArrayMember);
    }

    v8::Local<v8::Value> stringMemberValue = v8Object->Get(v8String(isolate, "stringMember"));
    if (block.HasCaught()) {
        exceptionState.rethrowV8Exception(block.Exception());
        return;
    }
    if (stringMemberValue.IsEmpty() || stringMemberValue->IsUndefined()) {
        // Do nothing.
    } else {
        V8StringResource<> stringMember = stringMemberValue;
        if (!stringMember.prepare(exceptionState))
            return;
        impl.setStringMember(stringMember);
    }

    v8::Local<v8::Value> stringOrNullMemberValue = v8Object->Get(v8String(isolate, "stringOrNullMember"));
    if (block.HasCaught()) {
        exceptionState.rethrowV8Exception(block.Exception());
        return;
    }
    if (stringOrNullMemberValue.IsEmpty() || stringOrNullMemberValue->IsUndefined()) {
        // Do nothing.
    } else if (stringOrNullMemberValue->IsNull()) {
        impl.setStringOrNullMemberToNull();
    } else {
        V8StringResource<> stringOrNullMember = stringOrNullMemberValue;
        if (!stringOrNullMember.prepare(exceptionState))
            return;
        impl.setStringOrNullMember(stringOrNullMember);
    }

    v8::Local<v8::Value> stringSequenceMemberValue = v8Object->Get(v8String(isolate, "stringSequenceMember"));
    if (block.HasCaught()) {
        exceptionState.rethrowV8Exception(block.Exception());
        return;
    }
    if (stringSequenceMemberValue.IsEmpty() || stringSequenceMemberValue->IsUndefined()) {
        // Do nothing.
    } else {
        Vector<String> stringSequenceMember = toImplArray<String>(stringSequenceMemberValue, 0, isolate, exceptionState);
        if (exceptionState.hadException())
            return;
        impl.setStringSequenceMember(stringSequenceMember);
    }

    v8::Local<v8::Value> testInterface2OrUint8ArrayMemberValue = v8Object->Get(v8String(isolate, "testInterface2OrUint8ArrayMember"));
    if (block.HasCaught()) {
        exceptionState.rethrowV8Exception(block.Exception());
        return;
    }
    if (testInterface2OrUint8ArrayMemberValue.IsEmpty() || testInterface2OrUint8ArrayMemberValue->IsUndefined()) {
        // Do nothing.
    } else {
        TestInterface2OrUint8Array testInterface2OrUint8ArrayMember;
        V8TestInterface2OrUint8Array::toImpl(isolate, testInterface2OrUint8ArrayMemberValue, testInterface2OrUint8ArrayMember, exceptionState);
        if (exceptionState.hadException())
            return;
        impl.setTestInterface2OrUint8ArrayMember(testInterface2OrUint8ArrayMember);
    }

    v8::Local<v8::Value> testInterfaceGarbageCollectedMemberValue = v8Object->Get(v8String(isolate, "testInterfaceGarbageCollectedMember"));
    if (block.HasCaught()) {
        exceptionState.rethrowV8Exception(block.Exception());
        return;
    }
    if (testInterfaceGarbageCollectedMemberValue.IsEmpty() || testInterfaceGarbageCollectedMemberValue->IsUndefined()) {
        // Do nothing.
    } else {
        TestInterfaceGarbageCollected* testInterfaceGarbageCollectedMember = V8TestInterfaceGarbageCollected::toImplWithTypeCheck(isolate, testInterfaceGarbageCollectedMemberValue);
        if (!testInterfaceGarbageCollectedMember && !testInterfaceGarbageCollectedMemberValue->IsNull()) {
            exceptionState.throwTypeError("member testInterfaceGarbageCollectedMember is not of type TestInterfaceGarbageCollected.");
            return;
        }
        impl.setTestInterfaceGarbageCollectedMember(testInterfaceGarbageCollectedMember);
    }

    v8::Local<v8::Value> testInterfaceGarbageCollectedOrNullMemberValue = v8Object->Get(v8String(isolate, "testInterfaceGarbageCollectedOrNullMember"));
    if (block.HasCaught()) {
        exceptionState.rethrowV8Exception(block.Exception());
        return;
    }
    if (testInterfaceGarbageCollectedOrNullMemberValue.IsEmpty() || testInterfaceGarbageCollectedOrNullMemberValue->IsUndefined()) {
        // Do nothing.
    } else if (testInterfaceGarbageCollectedOrNullMemberValue->IsNull()) {
        impl.setTestInterfaceGarbageCollectedOrNullMemberToNull();
    } else {
        TestInterfaceGarbageCollected* testInterfaceGarbageCollectedOrNullMember = V8TestInterfaceGarbageCollected::toImplWithTypeCheck(isolate, testInterfaceGarbageCollectedOrNullMemberValue);
        if (!testInterfaceGarbageCollectedOrNullMember && !testInterfaceGarbageCollectedOrNullMemberValue->IsNull()) {
            exceptionState.throwTypeError("member testInterfaceGarbageCollectedOrNullMember is not of type TestInterfaceGarbageCollected.");
            return;
        }
        impl.setTestInterfaceGarbageCollectedOrNullMember(testInterfaceGarbageCollectedOrNullMember);
    }

    v8::Local<v8::Value> testInterfaceMemberValue = v8Object->Get(v8String(isolate, "testInterfaceMember"));
    if (block.HasCaught()) {
        exceptionState.rethrowV8Exception(block.Exception());
        return;
    }
    if (testInterfaceMemberValue.IsEmpty() || testInterfaceMemberValue->IsUndefined()) {
        // Do nothing.
    } else {
        TestInterfaceImplementation* testInterfaceMember = V8TestInterface::toImplWithTypeCheck(isolate, testInterfaceMemberValue);
        if (!testInterfaceMember && !testInterfaceMemberValue->IsNull()) {
            exceptionState.throwTypeError("member testInterfaceMember is not of type TestInterface.");
            return;
        }
        impl.setTestInterfaceMember(testInterfaceMember);
    }

    v8::Local<v8::Value> testInterfaceOrNullMemberValue = v8Object->Get(v8String(isolate, "testInterfaceOrNullMember"));
    if (block.HasCaught()) {
        exceptionState.rethrowV8Exception(block.Exception());
        return;
    }
    if (testInterfaceOrNullMemberValue.IsEmpty() || testInterfaceOrNullMemberValue->IsUndefined()) {
        // Do nothing.
    } else if (testInterfaceOrNullMemberValue->IsNull()) {
        impl.setTestInterfaceOrNullMemberToNull();
    } else {
        TestInterfaceImplementation* testInterfaceOrNullMember = V8TestInterface::toImplWithTypeCheck(isolate, testInterfaceOrNullMemberValue);
        if (!testInterfaceOrNullMember && !testInterfaceOrNullMemberValue->IsNull()) {
            exceptionState.throwTypeError("member testInterfaceOrNullMember is not of type TestInterface.");
            return;
        }
        impl.setTestInterfaceOrNullMember(testInterfaceOrNullMember);
    }

    v8::Local<v8::Value> testInterfaceWillBeGarbageCollectedMemberValue = v8Object->Get(v8String(isolate, "testInterfaceWillBeGarbageCollectedMember"));
    if (block.HasCaught()) {
        exceptionState.rethrowV8Exception(block.Exception());
        return;
    }
    if (testInterfaceWillBeGarbageCollectedMemberValue.IsEmpty() || testInterfaceWillBeGarbageCollectedMemberValue->IsUndefined()) {
        // Do nothing.
    } else {
        TestInterfaceWillBeGarbageCollected* testInterfaceWillBeGarbageCollectedMember = V8TestInterfaceWillBeGarbageCollected::toImplWithTypeCheck(isolate, testInterfaceWillBeGarbageCollectedMemberValue);
        if (!testInterfaceWillBeGarbageCollectedMember && !testInterfaceWillBeGarbageCollectedMemberValue->IsNull()) {
            exceptionState.throwTypeError("member testInterfaceWillBeGarbageCollectedMember is not of type TestInterfaceWillBeGarbageCollected.");
            return;
        }
        impl.setTestInterfaceWillBeGarbageCollectedMember(testInterfaceWillBeGarbageCollectedMember);
    }

    v8::Local<v8::Value> testInterfaceWillBeGarbageCollectedOrNullMemberValue = v8Object->Get(v8String(isolate, "testInterfaceWillBeGarbageCollectedOrNullMember"));
    if (block.HasCaught()) {
        exceptionState.rethrowV8Exception(block.Exception());
        return;
    }
    if (testInterfaceWillBeGarbageCollectedOrNullMemberValue.IsEmpty() || testInterfaceWillBeGarbageCollectedOrNullMemberValue->IsUndefined()) {
        // Do nothing.
    } else if (testInterfaceWillBeGarbageCollectedOrNullMemberValue->IsNull()) {
        impl.setTestInterfaceWillBeGarbageCollectedOrNullMemberToNull();
    } else {
        TestInterfaceWillBeGarbageCollected* testInterfaceWillBeGarbageCollectedOrNullMember = V8TestInterfaceWillBeGarbageCollected::toImplWithTypeCheck(isolate, testInterfaceWillBeGarbageCollectedOrNullMemberValue);
        if (!testInterfaceWillBeGarbageCollectedOrNullMember && !testInterfaceWillBeGarbageCollectedOrNullMemberValue->IsNull()) {
            exceptionState.throwTypeError("member testInterfaceWillBeGarbageCollectedOrNullMember is not of type TestInterfaceWillBeGarbageCollected.");
            return;
        }
        impl.setTestInterfaceWillBeGarbageCollectedOrNullMember(testInterfaceWillBeGarbageCollectedOrNullMember);
    }

    v8::Local<v8::Value> uint8ArrayMemberValue = v8Object->Get(v8String(isolate, "uint8ArrayMember"));
    if (block.HasCaught()) {
        exceptionState.rethrowV8Exception(block.Exception());
        return;
    }
    if (uint8ArrayMemberValue.IsEmpty() || uint8ArrayMemberValue->IsUndefined()) {
        // Do nothing.
    } else {
        DOMUint8Array* uint8ArrayMember = uint8ArrayMemberValue->IsUint8Array() ? V8Uint8Array::toImpl(v8::Local<v8::Uint8Array>::Cast(uint8ArrayMemberValue)) : 0;
        if (!uint8ArrayMember && !uint8ArrayMemberValue->IsNull()) {
            exceptionState.throwTypeError("member uint8ArrayMember is not of type Uint8Array.");
            return;
        }
        impl.setUint8ArrayMember(uint8ArrayMember);
    }

    v8::Local<v8::Value> unrestrictedDoubleMemberValue = v8Object->Get(v8String(isolate, "unrestrictedDoubleMember"));
    if (block.HasCaught()) {
        exceptionState.rethrowV8Exception(block.Exception());
        return;
    }
    if (unrestrictedDoubleMemberValue.IsEmpty() || unrestrictedDoubleMemberValue->IsUndefined()) {
        // Do nothing.
    } else {
        double unrestrictedDoubleMember = toDouble(isolate, unrestrictedDoubleMemberValue, exceptionState);
        if (exceptionState.hadException())
            return;
        impl.setUnrestrictedDoubleMember(unrestrictedDoubleMember);
    }

}

v8::Local<v8::Value> toV8(const TestDictionary& impl, v8::Local<v8::Object> creationContext, v8::Isolate* isolate)
{
    v8::Local<v8::Object> v8Object = v8::Object::New(isolate);
    toV8TestDictionary(impl, v8Object, creationContext, isolate);
    return v8Object;
}

void toV8TestDictionary(const TestDictionary& impl, v8::Local<v8::Object> dictionary, v8::Local<v8::Object> creationContext, v8::Isolate* isolate)
{
    if (impl.hasBooleanMember()) {
        dictionary->Set(v8String(isolate, "booleanMember"), v8Boolean(impl.booleanMember(), isolate));
    }

    if (impl.hasCreateMember()) {
        dictionary->Set(v8String(isolate, "create"), v8Boolean(impl.createMember(), isolate));
    }

    if (impl.hasCreateMember()) {
        dictionary->Set(v8String(isolate, "deprecatedCreateMember"), v8Boolean(impl.createMember(), isolate));
    }

    if (impl.hasDoubleOrNullMember()) {
        dictionary->Set(v8String(isolate, "doubleOrNullMember"), v8::Number::New(isolate, impl.doubleOrNullMember()));
    } else {
        dictionary->Set(v8String(isolate, "doubleOrNullMember"), v8::Null(isolate));
    }

    if (impl.hasDoubleOrStringMember()) {
        dictionary->Set(v8String(isolate, "doubleOrStringMember"), toV8(impl.doubleOrStringMember(), creationContext, isolate));
    } else {
        dictionary->Set(v8String(isolate, "doubleOrStringMember"), toV8(DoubleOrString::fromDouble(3.14), creationContext, isolate));
    }

    if (impl.hasElementOrNullMember()) {
        dictionary->Set(v8String(isolate, "elementOrNullMember"), toV8(impl.elementOrNullMember(), creationContext, isolate));
    }

    if (impl.hasEnumMember()) {
        dictionary->Set(v8String(isolate, "enumMember"), v8String(isolate, impl.enumMember()));
    } else {
        dictionary->Set(v8String(isolate, "enumMember"), v8String(isolate, String("foo")));
    }

    if (impl.hasEnumSequenceMember()) {
        dictionary->Set(v8String(isolate, "enumSequenceMember"), toV8(impl.enumSequenceMember(), creationContext, isolate));
    }

    if (impl.hasEventTargetMember()) {
        dictionary->Set(v8String(isolate, "eventTargetMember"), toV8(impl.eventTargetMember(), creationContext, isolate));
    }

    if (impl.hasInternalDictionarySequenceMember()) {
        dictionary->Set(v8String(isolate, "internalDictionarySequenceMember"), toV8(impl.internalDictionarySequenceMember(), creationContext, isolate));
    }

    if (impl.hasLongMember()) {
        dictionary->Set(v8String(isolate, "longMember"), v8::Integer::New(isolate, impl.longMember()));
    } else {
        dictionary->Set(v8String(isolate, "longMember"), v8::Integer::New(isolate, 1));
    }

    if (impl.hasObjectMember()) {
        ASSERT(impl.objectMember().isObject());
        dictionary->Set(v8String(isolate, "objectMember"), impl.objectMember().v8Value());
    }

    if (impl.hasObjectOrNullMember()) {
        ASSERT(impl.objectOrNullMember().isObject());
        dictionary->Set(v8String(isolate, "objectOrNullMember"), impl.objectOrNullMember().v8Value());
    }

    if (impl.hasOtherDoubleOrStringMember()) {
        dictionary->Set(v8String(isolate, "otherDoubleOrStringMember"), toV8(impl.otherDoubleOrStringMember(), creationContext, isolate));
    } else {
        dictionary->Set(v8String(isolate, "otherDoubleOrStringMember"), toV8(DoubleOrString::fromString(String("default string value")), creationContext, isolate));
    }

    if (impl.hasRestrictedDoubleMember()) {
        dictionary->Set(v8String(isolate, "restrictedDoubleMember"), v8::Number::New(isolate, impl.restrictedDoubleMember()));
    } else {
        dictionary->Set(v8String(isolate, "restrictedDoubleMember"), v8::Number::New(isolate, 3.14));
    }

    if (impl.hasStringArrayMember()) {
        dictionary->Set(v8String(isolate, "stringArrayMember"), toV8(impl.stringArrayMember(), creationContext, isolate));
    }

    if (impl.hasStringMember()) {
        dictionary->Set(v8String(isolate, "stringMember"), v8String(isolate, impl.stringMember()));
    }

    if (impl.hasStringOrNullMember()) {
        dictionary->Set(v8String(isolate, "stringOrNullMember"), v8String(isolate, impl.stringOrNullMember()));
    } else {
        dictionary->Set(v8String(isolate, "stringOrNullMember"), v8String(isolate, String("default string value")));
    }

    if (impl.hasStringSequenceMember()) {
        dictionary->Set(v8String(isolate, "stringSequenceMember"), toV8(impl.stringSequenceMember(), creationContext, isolate));
    }

    if (impl.hasTestInterface2OrUint8ArrayMember()) {
        dictionary->Set(v8String(isolate, "testInterface2OrUint8ArrayMember"), toV8(impl.testInterface2OrUint8ArrayMember(), creationContext, isolate));
    }

    if (impl.hasTestInterfaceGarbageCollectedMember()) {
        dictionary->Set(v8String(isolate, "testInterfaceGarbageCollectedMember"), toV8(impl.testInterfaceGarbageCollectedMember(), creationContext, isolate));
    }

    if (impl.hasTestInterfaceGarbageCollectedOrNullMember()) {
        dictionary->Set(v8String(isolate, "testInterfaceGarbageCollectedOrNullMember"), toV8(impl.testInterfaceGarbageCollectedOrNullMember(), creationContext, isolate));
    }

    if (impl.hasTestInterfaceMember()) {
        dictionary->Set(v8String(isolate, "testInterfaceMember"), toV8(impl.testInterfaceMember(), creationContext, isolate));
    }

    if (impl.hasTestInterfaceOrNullMember()) {
        dictionary->Set(v8String(isolate, "testInterfaceOrNullMember"), toV8(impl.testInterfaceOrNullMember(), creationContext, isolate));
    }

    if (impl.hasTestInterfaceWillBeGarbageCollectedMember()) {
        dictionary->Set(v8String(isolate, "testInterfaceWillBeGarbageCollectedMember"), toV8(impl.testInterfaceWillBeGarbageCollectedMember(), creationContext, isolate));
    }

    if (impl.hasTestInterfaceWillBeGarbageCollectedOrNullMember()) {
        dictionary->Set(v8String(isolate, "testInterfaceWillBeGarbageCollectedOrNullMember"), toV8(impl.testInterfaceWillBeGarbageCollectedOrNullMember(), creationContext, isolate));
    }

    if (impl.hasUint8ArrayMember()) {
        dictionary->Set(v8String(isolate, "uint8ArrayMember"), toV8(impl.uint8ArrayMember(), creationContext, isolate));
    }

    if (impl.hasUnrestrictedDoubleMember()) {
        dictionary->Set(v8String(isolate, "unrestrictedDoubleMember"), v8::Number::New(isolate, impl.unrestrictedDoubleMember()));
    } else {
        dictionary->Set(v8String(isolate, "unrestrictedDoubleMember"), v8::Number::New(isolate, 3.14));
    }

}

TestDictionary NativeValueTraits<TestDictionary>::nativeValue(v8::Isolate* isolate, v8::Local<v8::Value> value, ExceptionState& exceptionState)
{
    TestDictionary impl;
    V8TestDictionary::toImpl(isolate, value, impl, exceptionState);
    return impl;
}

} // namespace blink
