// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file has been auto-generated by code_generator_v8.py. DO NOT MODIFY!

#include "config.h"
#include "TestDictionary.h"


namespace blink {

TestDictionary::TestDictionary()
{
    setDoubleOrStringMember(DoubleOrString::fromDouble(3.14));
    setEnumMember(String("foo"));
    setLongMember(1);
    setOtherDoubleOrStringMember(DoubleOrString::fromString(String("default string value")));
    setRestrictedDoubleMember(3.14);
    setStringOrNullMember(String("default string value"));
    setStringSequenceMember(Vector<String>());
    setTestInterfaceGarbageCollectedSequenceMember(HeapVector<Member<TestInterfaceGarbageCollected>>());
    setTestInterfaceSequenceMember(Vector<RefPtr<TestInterfaceImplementation>>());
    setTestInterfaceWillBeGarbageCollectedSequenceMember(WillBeHeapVector<RefPtrWillBeMember<TestInterfaceWillBeGarbageCollected>>());
    setUnrestrictedDoubleMember(3.14);
}

DEFINE_TRACE(TestDictionary)
{
    visitor->trace(m_doubleOrStringMember);
    visitor->trace(m_doubleOrStringSequenceMember);
    visitor->trace(m_elementOrNullMember);
    visitor->trace(m_eventTargetMember);
    visitor->trace(m_internalDictionarySequenceMember);
    visitor->trace(m_otherDoubleOrStringMember);
    visitor->trace(m_testInterface2OrUint8ArrayMember);
    visitor->trace(m_testInterfaceGarbageCollectedMember);
    visitor->trace(m_testInterfaceGarbageCollectedOrNullMember);
    visitor->trace(m_testInterfaceGarbageCollectedSequenceMember);
    visitor->trace(m_testInterfaceWillBeGarbageCollectedMember);
    visitor->trace(m_testInterfaceWillBeGarbageCollectedOrNullMember);
    visitor->trace(m_testInterfaceWillBeGarbageCollectedSequenceMember);
}

} // namespace blink
