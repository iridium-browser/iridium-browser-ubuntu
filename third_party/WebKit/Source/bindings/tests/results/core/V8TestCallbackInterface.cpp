// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file has been auto-generated by code_generator_v8.py.
// DO NOT MODIFY!

// This file has been generated from the Jinja2 template in
// third_party/WebKit/Source/bindings/templates/callback_interface.cpp.tmpl

// clang-format off
#include "V8TestCallbackInterface.h"

#include "bindings/core/v8/ScriptController.h"
#include "bindings/core/v8/V8Binding.h"
#include "bindings/core/v8/V8TestInterfaceEmpty.h"
#include "core/dom/ExecutionContext.h"
#include "wtf/Assertions.h"
#include "wtf/GetPtr.h"
#include "wtf/RefPtr.h"

namespace blink {

V8TestCallbackInterface::V8TestCallbackInterface(v8::Local<v8::Function> callback, ScriptState* scriptState)
    : m_scriptState(scriptState) {
  m_callback.set(scriptState->isolate(), callback);
}

V8TestCallbackInterface::~V8TestCallbackInterface() {}

DEFINE_TRACE(V8TestCallbackInterface) {
  TestCallbackInterface::trace(visitor);
}

void V8TestCallbackInterface::voidMethod() {
  ExecutionContext* executionContext = m_scriptState->getExecutionContext();
  if (!executionContext || executionContext->isContextSuspended() ||
      executionContext->isContextDestroyed())
    return;
  if (!m_scriptState->contextIsValid())
    return;
  ScriptState::Scope scope(m_scriptState.get());
  v8::Local<v8::Value> *argv = 0;

  V8ScriptRunner::callFunction(m_callback.newLocal(m_scriptState->isolate()), m_scriptState->getExecutionContext(), v8::Undefined(m_scriptState->isolate()), 0, argv, m_scriptState->isolate());
}

bool V8TestCallbackInterface::booleanMethod() {
  ExecutionContext* executionContext = m_scriptState->getExecutionContext();
  if (!executionContext || executionContext->isContextSuspended() ||
      executionContext->isContextDestroyed())
    return true;
  if (!m_scriptState->contextIsValid())
    return true;
  ScriptState::Scope scope(m_scriptState.get());
  v8::Local<v8::Value> *argv = 0;

  v8::TryCatch exceptionCatcher(m_scriptState->isolate());
  exceptionCatcher.SetVerbose(true);
  V8ScriptRunner::callFunction(m_callback.newLocal(m_scriptState->isolate()), m_scriptState->getExecutionContext(), v8::Undefined(m_scriptState->isolate()), 0, argv, m_scriptState->isolate());
  return !exceptionCatcher.HasCaught();
}

void V8TestCallbackInterface::voidMethodBooleanArg(bool boolArg) {
  ExecutionContext* executionContext = m_scriptState->getExecutionContext();
  if (!executionContext || executionContext->isContextSuspended() ||
      executionContext->isContextDestroyed())
    return;
  if (!m_scriptState->contextIsValid())
    return;
  ScriptState::Scope scope(m_scriptState.get());
  v8::Local<v8::Value> boolArgHandle = v8Boolean(boolArg, m_scriptState->isolate());
  v8::Local<v8::Value> argv[] = { boolArgHandle };

  V8ScriptRunner::callFunction(m_callback.newLocal(m_scriptState->isolate()), m_scriptState->getExecutionContext(), v8::Undefined(m_scriptState->isolate()), 1, argv, m_scriptState->isolate());
}

void V8TestCallbackInterface::voidMethodSequenceArg(const HeapVector<Member<TestInterfaceEmpty>>& sequenceArg) {
  ExecutionContext* executionContext = m_scriptState->getExecutionContext();
  if (!executionContext || executionContext->isContextSuspended() ||
      executionContext->isContextDestroyed())
    return;
  if (!m_scriptState->contextIsValid())
    return;
  ScriptState::Scope scope(m_scriptState.get());
  v8::Local<v8::Value> sequenceArgHandle = ToV8(sequenceArg, m_scriptState->context()->Global(), m_scriptState->isolate());
  v8::Local<v8::Value> argv[] = { sequenceArgHandle };

  V8ScriptRunner::callFunction(m_callback.newLocal(m_scriptState->isolate()), m_scriptState->getExecutionContext(), v8::Undefined(m_scriptState->isolate()), 1, argv, m_scriptState->isolate());
}

void V8TestCallbackInterface::voidMethodFloatArg(float floatArg) {
  ExecutionContext* executionContext = m_scriptState->getExecutionContext();
  if (!executionContext || executionContext->isContextSuspended() ||
      executionContext->isContextDestroyed())
    return;
  if (!m_scriptState->contextIsValid())
    return;
  ScriptState::Scope scope(m_scriptState.get());
  v8::Local<v8::Value> floatArgHandle = v8::Number::New(m_scriptState->isolate(), floatArg);
  v8::Local<v8::Value> argv[] = { floatArgHandle };

  V8ScriptRunner::callFunction(m_callback.newLocal(m_scriptState->isolate()), m_scriptState->getExecutionContext(), v8::Undefined(m_scriptState->isolate()), 1, argv, m_scriptState->isolate());
}

void V8TestCallbackInterface::voidMethodTestInterfaceEmptyArg(TestInterfaceEmpty* testInterfaceEmptyArg) {
  ExecutionContext* executionContext = m_scriptState->getExecutionContext();
  if (!executionContext || executionContext->isContextSuspended() ||
      executionContext->isContextDestroyed())
    return;
  if (!m_scriptState->contextIsValid())
    return;
  ScriptState::Scope scope(m_scriptState.get());
  v8::Local<v8::Value> testInterfaceEmptyArgHandle = ToV8(testInterfaceEmptyArg, m_scriptState->context()->Global(), m_scriptState->isolate());
  v8::Local<v8::Value> argv[] = { testInterfaceEmptyArgHandle };

  V8ScriptRunner::callFunction(m_callback.newLocal(m_scriptState->isolate()), m_scriptState->getExecutionContext(), v8::Undefined(m_scriptState->isolate()), 1, argv, m_scriptState->isolate());
}

void V8TestCallbackInterface::voidMethodTestInterfaceEmptyStringArg(TestInterfaceEmpty* testInterfaceEmptyArg, const String& stringArg) {
  ExecutionContext* executionContext = m_scriptState->getExecutionContext();
  if (!executionContext || executionContext->isContextSuspended() ||
      executionContext->isContextDestroyed())
    return;
  if (!m_scriptState->contextIsValid())
    return;
  ScriptState::Scope scope(m_scriptState.get());
  v8::Local<v8::Value> testInterfaceEmptyArgHandle = ToV8(testInterfaceEmptyArg, m_scriptState->context()->Global(), m_scriptState->isolate());
  v8::Local<v8::Value> stringArgHandle = v8String(m_scriptState->isolate(), stringArg);
  v8::Local<v8::Value> argv[] = { testInterfaceEmptyArgHandle, stringArgHandle };

  V8ScriptRunner::callFunction(m_callback.newLocal(m_scriptState->isolate()), m_scriptState->getExecutionContext(), v8::Undefined(m_scriptState->isolate()), 2, argv, m_scriptState->isolate());
}

void V8TestCallbackInterface::callbackWithThisValueVoidMethodStringArg(ScriptValue thisValue, const String& stringArg) {
  ExecutionContext* executionContext = m_scriptState->getExecutionContext();
  if (!executionContext || executionContext->isContextSuspended() ||
      executionContext->isContextDestroyed())
    return;
  if (!m_scriptState->contextIsValid())
    return;
  ScriptState::Scope scope(m_scriptState.get());
  v8::Local<v8::Value> thisHandle = thisValue.v8Value();
  v8::Local<v8::Value> stringArgHandle = v8String(m_scriptState->isolate(), stringArg);
  v8::Local<v8::Value> argv[] = { stringArgHandle };

  V8ScriptRunner::callFunction(m_callback.newLocal(m_scriptState->isolate()), m_scriptState->getExecutionContext(), thisHandle, 1, argv, m_scriptState->isolate());
}

}  // namespace blink
