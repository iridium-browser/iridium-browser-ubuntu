{% extends 'interface_base.cpp.tmpl' %}

{% set has_prepare_prototype_and_interface_object =
    unscopables or has_conditional_attributes_on_prototype or
    methods | conditionally_exposed(is_partial) %}
{% set prepare_prototype_and_interface_object_func =
    '%s::preparePrototypeAndInterfaceObject' % v8_class_or_partial
    if has_prepare_prototype_and_interface_object
    else 'nullptr' %}


{##############################################################################}
{% block prepare_prototype_and_interface_object %}
{% from 'interface.cpp.tmpl' import install_unscopables with context %}
{% from 'interface.cpp.tmpl' import install_conditionally_enabled_attributes_on_prototype with context %}
{% from 'methods.cpp.tmpl' import install_conditionally_enabled_methods with context %}
{% if has_prepare_prototype_and_interface_object %}
void {{v8_class_or_partial}}::preparePrototypeAndInterfaceObject(v8::Local<v8::Context> context, const DOMWrapperWorld& world, v8::Local<v8::Object> prototypeObject, v8::Local<v8::Function> interfaceObject, v8::Local<v8::FunctionTemplate> interfaceTemplate) {
  {{v8_class}}::preparePrototypeAndInterfaceObject(context, world, prototypeObject, interfaceObject, interfaceTemplate);
  v8::Isolate* isolate = context->GetIsolate();
{% if unscopables %}
  {{install_unscopables() | indent(2)}}
{% endif %}
{% if has_conditional_attributes_on_prototype %}
  {{install_conditionally_enabled_attributes_on_prototype() | indent(2)}}
{% endif %}
{% if methods | conditionally_exposed(is_partial) %}
  {{install_conditionally_enabled_methods() | indent(2)}}
{% endif %}
}
{% endif %}

{% endblock %}


{##############################################################################}
{% block partial_interface %}
void {{v8_class_or_partial}}::initialize() {
  // Should be invoked from ModulesInitializer.
  {{v8_class}}::updateWrapperTypeInfo(
      &{{v8_class_or_partial}}::install{{v8_class}}Template,
      {{prepare_prototype_and_interface_object_func}});
  {% for method in methods %}
  {% if method.overloads and method.overloads.has_partial_overloads %}
  {{v8_class}}::register{{method.name | blink_capitalize}}MethodForPartialInterface(&{{cpp_class_or_partial}}V8Internal::{{method.name}}Method);
  {% endif %}
  {% endfor %}
}

{% endblock %}
