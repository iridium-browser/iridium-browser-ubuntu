{% filter format_blink_cpp_source_code %}

{% include 'copyright_block.txt' %}
#include "{{cpp_class}}.h"

{% for filename in cpp_includes %}
#include "{{filename}}"
{% endfor %}

namespace blink {

{# Constructor #}
{{cpp_class}}::{{cpp_class}}() {
  {% for member in members if member.cpp_default_value %}
  {{member.setter_name}}({{member.cpp_default_value}});
  {% endfor %}
}

{{cpp_class}}::~{{cpp_class}}() {}

{{cpp_class}}::{{cpp_class}}(const {{cpp_class}}&) = default;

{{cpp_class}}& {{cpp_class}}::operator=(const {{cpp_class}}&) = default;

{% for member in members %}
bool {{cpp_class}}::{{member.has_method_name}}() const {
  return {{member.has_method_expression}};
}
{{member.rvalue_cpp_type}} {{cpp_class}}::{{member.getter_name}}() const {
  {% if member.nullable_indicator_name %}
  DCHECK({{member.nullable_indicator_name}});
  {% endif %}
  return {{member.getter_expression}};
}
void {{cpp_class}}::{{member.setter_name}}({{member.rvalue_cpp_type}} value) {
  m_{{member.cpp_name}} = {{member.setter_value}};
  {% if member.nullable_indicator_name %}
  {{member.nullable_indicator_name}} = true;
  {% endif %}
}
{% if member.null_setter_name %}
void {{cpp_class}}::{{member.null_setter_name}}() {
  {% if member.nullable_indicator_name %}
  {{member.nullable_indicator_name}} = false;
  {% else %}
  m_{{member.cpp_name}} = {{member.member_cpp_type}}();
  {% endif %}
}
{% endif %}
{% endfor %}

DEFINE_TRACE({{cpp_class}}) {
  {% for member in members if member.is_traceable %}
  visitor->Trace(m_{{member.cpp_name}});
  {% endfor %}
  {% if parent_cpp_class %}
  {{parent_cpp_class}}::Trace(visitor);
  {% endif %}
}

}  // namespace blink

{% endfilter %}{# format_blink_cpp_source_code #}
