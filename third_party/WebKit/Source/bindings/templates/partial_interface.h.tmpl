{% filter format_blink_cpp_source_code %}

{% include 'copyright_block.txt' %}
#ifndef {{v8_class_or_partial}}_h
#define {{v8_class_or_partial}}_h

{% for filename in header_includes %}
#include "{{filename}}"
{% endfor %}

namespace blink {

{% if origin_trial_attributes %}
class ScriptState;
{% endif %}

class {{v8_class_or_partial}} {
  STATIC_ONLY({{v8_class_or_partial}});
 public:
  static void initialize();
  {% for method in methods if method.is_custom %}
  static void {{method.name}}MethodCustom(const v8::FunctionCallbackInfo<v8::Value>&);
  {% endfor %}
  {% for attribute in attributes %}
  {% if attribute.has_custom_getter %}{# FIXME: and not attribute.implemented_by #}
  static void {{attribute.name}}AttributeGetterCustom(const v8::PropertyCallbackInfo<v8::Value>&);
  {% endif %}
  {% if attribute.has_custom_setter %}{# FIXME: and not attribute.implemented_by #}
  static void {{attribute.name}}AttributeSetterCustom(v8::Local<v8::Value>, const v8::PropertyCallbackInfo<void>&);
  {% endif %}
  {% endfor %}
  {% if unscopables or has_conditional_attributes_on_prototype or
        methods | conditionally_exposed(is_partial) %}
  static void preparePrototypeAndInterfaceObject(v8::Local<v8::Context>, const DOMWrapperWorld&, v8::Local<v8::Object>, v8::Local<v8::Function>, v8::Local<v8::FunctionTemplate>);
  {% endif %}

  {% for feature in origin_trial_features %}
  static void install{{feature.name}}(ScriptState*, v8::Local<v8::Object> instance);
  static void install{{feature.name}}(v8::Isolate*, const DOMWrapperWorld&, v8::Local<v8::Object> instance, v8::Local<v8::Object> prototype, v8::Local<v8::Function> interface);
  {% if not feature.needs_instance %}
  static void install{{feature.name}}(ScriptState*);
  {% endif %}
  {% endfor %}

  {% if needs_runtime_enabled_installer %}
  static void installRuntimeEnabledFeatures(
      v8::Isolate* isolate,
      const DOMWrapperWorld& world,
      v8::Local<v8::Object> instance,
      v8::Local<v8::Object> prototype,
      v8::Local<v8::Function> interface);
  {% endif %}

 private:
  static void install{{v8_class}}Template(v8::Isolate*, const DOMWrapperWorld&, v8::Local<v8::FunctionTemplate> interfaceTemplate);
};

}  // namespace blink

#endif  // {{v8_class_or_partial}}_h

{% endfilter %}{# format_blink_cpp_source_code #}
