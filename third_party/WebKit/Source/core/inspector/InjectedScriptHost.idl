/*
 * Copyright (C) 2007, 2008 Apple Inc. All rights reserved.
 * Copyright (C) 2008 Matt Lilek <webkit@mattlilek.com>
 * Copyright (C) 2010 Google Inc. All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are
 * met:
 *
 *     * Redistributions of source code must retain the above copyright
 * notice, this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above
 * copyright notice, this list of conditions and the following disclaimer
 * in the documentation and/or other materials provided with the
 * distribution.
 *     * Neither the name of Google Inc. nor the names of its
 * contributors may be used to endorse or promote products derived from
 * this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

[
    WillBeGarbageCollected,
    NoInterfaceObject
] interface InjectedScriptHost {
    [NotEnumerable, Unforgeable] void clearConsoleMessages();

    [NotEnumerable, Unforgeable, Custom] void inspect(any objectId, object hints);
    [NotEnumerable, Unforgeable, Custom] any inspectedObject(long num);
    [NotEnumerable, Unforgeable, Custom] DOMString internalConstructorName(any obj);
    [NotEnumerable, Unforgeable, Custom] boolean isDOMWrapper(any obj);
    [NotEnumerable, Unforgeable, Custom] boolean isHTMLAllCollection(any obj);
    [NotEnumerable, Unforgeable, Custom] boolean isTypedArray(any obj);
    [NotEnumerable, Unforgeable, Custom] DOMString subtype(any obj);
    [NotEnumerable, Unforgeable, Custom] any functionDetails(Function obj);
    [NotEnumerable, Unforgeable, Custom] object? generatorObjectDetails(object obj);
    [NotEnumerable, Unforgeable, Custom] any[]? collectionEntries(object obj);
    [NotEnumerable, Unforgeable, Custom] any[] getInternalProperties(any obj);
    [NotEnumerable, Unforgeable, Custom] any[] getEventListeners(EventTarget target);
    [NotEnumerable, Unforgeable, Custom] any eval(DOMString text);
    [NotEnumerable, Unforgeable, Custom] any evaluateWithExceptionDetails(DOMString text);
    [NotEnumerable, Unforgeable, Custom] void debugFunction(any fn);
    [NotEnumerable, Unforgeable, Custom] void undebugFunction(any fn);
    [NotEnumerable, Unforgeable, Custom] void monitorFunction(any fn);
    [NotEnumerable, Unforgeable, Custom] void unmonitorFunction(any fn);
    [NotEnumerable, Unforgeable, Custom] any callFunction(Function fn, any receiver, optional any[] argv);
    [NotEnumerable, Unforgeable, Custom] any suppressWarningsAndCallFunction(Function fn, any receiver, optional any[] argv);
    [NotEnumerable, Unforgeable, Custom] void setNonEnumProperty(object obj, DOMString key, any value);

    // Only declarative scope (local, with and catch) is accepted. Returns undefined.
    [NotEnumerable, Unforgeable, Custom] any setFunctionVariableValue(Function functionObject, long scopeIndex, DOMString variableName, any newValue);

    // Accessors to InjectedScriptNative
    [NotEnumerable, Unforgeable, Custom] long bind(any value, DOMString groupName);
    [NotEnumerable, Unforgeable, Custom] any objectForId(long id);

    [NotEnumerable, Unforgeable, Custom] DOMString idToObjectGroupName(long id);
};
