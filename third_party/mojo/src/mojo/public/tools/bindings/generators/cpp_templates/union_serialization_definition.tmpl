size_t GetSerializedSize_(const {{union.name}}Ptr& input) {
  if (!input)
    return 0;

  size_t size = sizeof(internal::{{union.name}}_Data);
  switch (input->which()) {
{%  for field in union.fields %}
{%    if field.kind|is_string_kind %}
    case {{union.name}}::Tag::{{field.name|upper}}:
      size += GetSerializedSize_(input->get_{{field.name}}());
      break;
{%-   endif %}
{%- endfor %}
    default:
      break;
  }
  return size;
}


void Serialize_({{union.name}}Ptr input, mojo::internal::Buffer* buf,
                internal::{{union.name}}_Data** output) {
  if (input) {
    mojo::internal::UnionAccessor<{{union.name}}> input_acc(input.get());
    internal::{{union.name}}_Data* result =
        internal::{{union.name}}_Data::New(buf);
    // TODO(azani): Handle unknown and objects.
    result->tag = input->which();
    switch (input->which()) {
{%  for field in union.fields %}
      case {{union.name}}::Tag::{{field.name|upper}}:
{%    if field.kind|is_string_kind %}
        {{field.kind|cpp_field_type}}* {{field.name}}_ptr = reinterpret_cast<{{field.kind|cpp_field_type}}*>(&result->data.f_{{field.name}});
        Serialize_(*(input_acc.data()->{{field.name}}), buf, &{{field.name}}_ptr->ptr);
{%    else %}
        result->data.f_{{field.name}} = input_acc.data()->{{field.name}};
{%-   endif %}
        break;
{%- endfor %}
    }
    *output = result;
  } else {
    *output = nullptr;
  }
}

void Deserialize_(internal::{{union.name}}_Data* input,
                  {{union.name}}Ptr* output) {
  if (input) {
    {{union.name}}Ptr result({{union.name}}::New());
    mojo::internal::UnionAccessor<{{union.name}}> result_acc(result.get());
    switch (input->tag) {
{%  for field in union.fields %}
      case {{union.name}}::Tag::{{field.name|upper}}:
{%    if field.kind|is_string_kind %}
        result_acc.SwitchActive({{union.name}}::Tag::{{field.name|upper}});
        {{field.kind|cpp_field_type}}* {{field.name}}_ptr = reinterpret_cast<{{field.kind|cpp_field_type}}*>(&input->data.f_{{field.name}});
        Deserialize_({{field.name}}_ptr->ptr, result_acc.data()->{{field.name}});
{%    else %}
        result->set_{{field.name}}(input->data.f_{{field.name}});
{%-   endif %}
        break;
{%- endfor %}
    }
    *output = result.Pass();
  } else {
    output->reset();
  }
}
