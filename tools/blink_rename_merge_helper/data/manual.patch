diff --git a/chrome/android/java/src/org/chromium/chrome/browser/ShortcutHelper.java b/chrome/android/java/src/org/chromium/chrome/browser/ShortcutHelper.java
index c2bd1b22ea50..102447ddc935 100644
--- a/chrome/android/java/src/org/chromium/chrome/browser/ShortcutHelper.java
+++ b/chrome/android/java/src/org/chromium/chrome/browser/ShortcutHelper.java
@@ -347,7 +347,7 @@ public class ShortcutHelper {
     public static Intent createWebappShortcutIntentForTesting(String id, String url) {
         assert !ThreadUtils.runningOnUiThread();
         return createWebappShortcutIntent(id, null, url, getScopeFromUrl(url), null, null, null,
-                WEBAPP_SHORTCUT_VERSION, WebDisplayMode.Standalone, 0, 0, 0, false);
+                WEBAPP_SHORTCUT_VERSION, WebDisplayMode.kStandalone, 0, 0, 0, false);
     }
 
     /**
diff --git a/chrome/android/java/src/org/chromium/chrome/browser/media/remote/RemoteMediaPlayerBridge.java b/chrome/android/java/src/org/chromium/chrome/browser/media/remote/RemoteMediaPlayerBridge.java
index 86f7d30baa9c..3bdab611244f 100644
--- a/chrome/android/java/src/org/chromium/chrome/browser/media/remote/RemoteMediaPlayerBridge.java
+++ b/chrome/android/java/src/org/chromium/chrome/browser/media/remote/RemoteMediaPlayerBridge.java
@@ -322,14 +322,14 @@ public class RemoteMediaPlayerBridge {
         Log.d(TAG, "onRouteAvailabilityChange: " + mRouteIsAvailable + ", " + mIsPlayable);
         if (mNativeRemoteMediaPlayerBridge == 0) return;
 
-        int availability = WebRemotePlaybackAvailability.DeviceNotAvailable;
+        int availability = WebRemotePlaybackAvailability.kDeviceNotAvailable;
         if (!mRouteIsAvailable && !mIsPlayable) {
-            availability = WebRemotePlaybackAvailability.SourceNotSupported;
+            availability = WebRemotePlaybackAvailability.kSourceNotSupported;
         } else if (mRouteIsAvailable && mIsPlayable) {
-            availability = WebRemotePlaybackAvailability.DeviceAvailable;
+            availability = WebRemotePlaybackAvailability.kDeviceAvailable;
         } else if (mRouteIsAvailable) {
             // mIsPlayable is false here.
-            availability = WebRemotePlaybackAvailability.SourceNotCompatible;
+            availability = WebRemotePlaybackAvailability.kSourceNotCompatible;
         }
         nativeOnRouteAvailabilityChanged(mNativeRemoteMediaPlayerBridge, availability);
     }
diff --git a/chrome/android/java/src/org/chromium/chrome/browser/tab/TabWebContentsDelegateAndroid.java b/chrome/android/java/src/org/chromium/chrome/browser/tab/TabWebContentsDelegateAndroid.java
index 713931b2b5b2..6c6188991500 100644
--- a/chrome/android/java/src/org/chromium/chrome/browser/tab/TabWebContentsDelegateAndroid.java
+++ b/chrome/android/java/src/org/chromium/chrome/browser/tab/TabWebContentsDelegateAndroid.java
@@ -76,7 +76,7 @@ public class TabWebContentsDelegateAndroid extends WebContentsDelegateAndroid {
 
     private FindMatchRectsListener mFindMatchRectsListener;
 
-    private int mDisplayMode = WebDisplayMode.Browser;
+    private int mDisplayMode = WebDisplayMode.kBrowser;
 
     protected Handler mHandler;
 
diff --git a/chrome/android/java/src/org/chromium/chrome/browser/webapps/WebApkInfo.java b/chrome/android/java/src/org/chromium/chrome/browser/webapps/WebApkInfo.java
index 41bbb50df489..b05dda7d5c6f 100644
--- a/chrome/android/java/src/org/chromium/chrome/browser/webapps/WebApkInfo.java
+++ b/chrome/android/java/src/org/chromium/chrome/browser/webapps/WebApkInfo.java
@@ -331,19 +331,19 @@ public class WebApkInfo extends WebappInfo {
      */
     private static int displayModeFromString(String displayMode) {
         if (displayMode == null) {
-            return WebDisplayMode.Undefined;
+            return WebDisplayMode.kUndefined;
         }
 
         if (displayMode.equals("fullscreen")) {
-            return WebDisplayMode.Fullscreen;
+            return WebDisplayMode.kFullscreen;
         } else if (displayMode.equals("standalone")) {
-            return WebDisplayMode.Standalone;
+            return WebDisplayMode.kStandalone;
         } else if (displayMode.equals("minimal-ui")) {
-            return WebDisplayMode.MinimalUi;
+            return WebDisplayMode.kMinimalUi;
         } else if (displayMode.equals("browser")) {
-            return WebDisplayMode.Browser;
+            return WebDisplayMode.kBrowser;
         } else {
-            return WebDisplayMode.Undefined;
+            return WebDisplayMode.kUndefined;
         }
     }
 
diff --git a/chrome/android/java/src/org/chromium/chrome/browser/webapps/WebappActivity.java b/chrome/android/java/src/org/chromium/chrome/browser/webapps/WebappActivity.java
index 87214d24d97f..33c6e5f2c5b3 100644
--- a/chrome/android/java/src/org/chromium/chrome/browser/webapps/WebappActivity.java
+++ b/chrome/android/java/src/org/chromium/chrome/browser/webapps/WebappActivity.java
@@ -132,7 +132,7 @@ public class WebappActivity extends FullScreenActivity {
         getActivityTab().addObserver(createTabObserver());
         getActivityTab().getTabWebContentsDelegateAndroid().setDisplayMode(
                 mWebappInfo.displayMode());
-        if (mWebappInfo.displayMode() == WebDisplayMode.Fullscreen) {
+        if (mWebappInfo.displayMode() == WebDisplayMode.kFullscreen) {
             enterImmersiveMode();
         }
     }
@@ -473,13 +473,13 @@ public class WebappActivity extends FullScreenActivity {
         return new ChromeFullscreenManager(this, false) {
             @Override
             public void setPersistentFullscreenMode(boolean enabled) {
-                if (mWebappInfo.displayMode() == WebDisplayMode.Fullscreen) return;
+                if (mWebappInfo.displayMode() == WebDisplayMode.kFullscreen) return;
                 super.setPersistentFullscreenMode(enabled);
             }
 
             @Override
             public boolean getPersistentFullscreenMode() {
-                if (mWebappInfo.displayMode() == WebDisplayMode.Fullscreen) return false;
+                if (mWebappInfo.displayMode() == WebDisplayMode.kFullscreen) return false;
                 return super.getPersistentFullscreenMode();
             }
         };
diff --git a/chrome/android/java/src/org/chromium/chrome/browser/webapps/WebappDataStorage.java b/chrome/android/java/src/org/chromium/chrome/browser/webapps/WebappDataStorage.java
index 3aafbd3bec43..cbcc62bb7996 100644
--- a/chrome/android/java/src/org/chromium/chrome/browser/webapps/WebappDataStorage.java
+++ b/chrome/android/java/src/org/chromium/chrome/browser/webapps/WebappDataStorage.java
@@ -206,7 +206,7 @@ public class WebappDataStorage {
                 mPreferences.getString(KEY_SHORT_NAME, null),
                 ShortcutHelper.decodeBitmapFromString(
                         mPreferences.getString(KEY_ICON, null)), version,
-                mPreferences.getInt(KEY_DISPLAY_MODE, WebDisplayMode.Standalone),
+                mPreferences.getInt(KEY_DISPLAY_MODE, WebDisplayMode.kStandalone),
                 mPreferences.getInt(KEY_ORIENTATION, ScreenOrientationValues.DEFAULT),
                 mPreferences.getLong(KEY_THEME_COLOR,
                         ShortcutHelper.MANIFEST_COLOR_INVALID_OR_MISSING),
@@ -261,7 +261,7 @@ public class WebappDataStorage {
             // "Standalone" was the original assumed default for all web apps.
             editor.putInt(KEY_DISPLAY_MODE, IntentUtils.safeGetIntExtra(
                         shortcutIntent, ShortcutHelper.EXTRA_DISPLAY_MODE,
-                        WebDisplayMode.Standalone));
+                        WebDisplayMode.kStandalone));
             editor.putInt(KEY_ORIENTATION, IntentUtils.safeGetIntExtra(
                         shortcutIntent, ShortcutHelper.EXTRA_ORIENTATION,
                         ScreenOrientationValues.DEFAULT));
diff --git a/chrome/android/java/src/org/chromium/chrome/browser/webapps/WebappInfo.java b/chrome/android/java/src/org/chromium/chrome/browser/webapps/WebappInfo.java
index a48690831de6..2e8f8bfaa098 100644
--- a/chrome/android/java/src/org/chromium/chrome/browser/webapps/WebappInfo.java
+++ b/chrome/android/java/src/org/chromium/chrome/browser/webapps/WebappInfo.java
@@ -108,7 +108,7 @@ public class WebappInfo {
         String url = urlFromIntent(intent);
         String scope = IntentUtils.safeGetStringExtra(intent, ShortcutHelper.EXTRA_SCOPE);
         int displayMode = IntentUtils.safeGetIntExtra(
-                intent, ShortcutHelper.EXTRA_DISPLAY_MODE, WebDisplayMode.Standalone);
+                intent, ShortcutHelper.EXTRA_DISPLAY_MODE, WebDisplayMode.kStandalone);
         int orientation = IntentUtils.safeGetIntExtra(
                 intent, ShortcutHelper.EXTRA_ORIENTATION, ScreenOrientationValues.DEFAULT);
         int source = sourceFromIntent(intent);
diff --git a/chrome/android/javatests/src/org/chromium/chrome/browser/webapps/WebApkUpdateManagerTest.java b/chrome/android/javatests/src/org/chromium/chrome/browser/webapps/WebApkUpdateManagerTest.java
index d8ae60845cac..cecc3c8e107d 100644
--- a/chrome/android/javatests/src/org/chromium/chrome/browser/webapps/WebApkUpdateManagerTest.java
+++ b/chrome/android/javatests/src/org/chromium/chrome/browser/webapps/WebApkUpdateManagerTest.java
@@ -43,7 +43,7 @@ public class WebApkUpdateManagerTest extends ChromeTabbedActivityTestBase {
     private static final String WEBAPK_SHORT_NAME = "Manifest test app";
     private static final String WEBAPK_ICON_URL = "/chrome/test/data/banners/image-512px.png";
     private static final String WEBAPK_ICON_MURMUR2_HASH = "7742433188808797392";
-    private static final int WEBAPK_DISPLAY_MODE = WebDisplayMode.Standalone;
+    private static final int WEBAPK_DISPLAY_MODE = WebDisplayMode.kStandalone;
     private static final int WEBAPK_ORIENTATION = ScreenOrientationValues.LANDSCAPE;
     private static final long WEBAPK_THEME_COLOR = 2147483648L;
     private static final long WEBAPK_BACKGROUND_COLOR = 2147483648L;
diff --git a/chrome/android/javatests/src/org/chromium/chrome/browser/webapps/WebappInfoTest.java b/chrome/android/javatests/src/org/chromium/chrome/browser/webapps/WebappInfoTest.java
index 3cb4531e5c35..914478019354 100644
--- a/chrome/android/javatests/src/org/chromium/chrome/browser/webapps/WebappInfoTest.java
+++ b/chrome/android/javatests/src/org/chromium/chrome/browser/webapps/WebappInfoTest.java
@@ -33,7 +33,7 @@ public class WebappInfoTest {
         String url = "about:blank";
 
         WebappInfo info = WebappInfo.create(id, url, null, null, name, shortName,
-                WebDisplayMode.Standalone, ScreenOrientationValues.DEFAULT, ShortcutSource.UNKNOWN,
+                WebDisplayMode.kStandalone, ScreenOrientationValues.DEFAULT, ShortcutSource.UNKNOWN,
                 ShortcutHelper.MANIFEST_COLOR_INVALID_OR_MISSING,
                 ShortcutHelper.MANIFEST_COLOR_INVALID_OR_MISSING, false);
         Assert.assertNotNull(info);
@@ -49,7 +49,7 @@ public class WebappInfoTest {
         String url = "http://google.com";
 
         WebappInfo info = WebappInfo.create(id, url, null, null, name, shortName,
-                WebDisplayMode.Standalone, ScreenOrientationValues.DEFAULT, ShortcutSource.UNKNOWN,
+                WebDisplayMode.kStandalone, ScreenOrientationValues.DEFAULT, ShortcutSource.UNKNOWN,
                 ShortcutHelper.MANIFEST_COLOR_INVALID_OR_MISSING,
                 ShortcutHelper.MANIFEST_COLOR_INVALID_OR_MISSING, false);
         Assert.assertNotNull(info);
@@ -144,10 +144,10 @@ public class WebappInfoTest {
         String url = "http://money.cnn.com";
 
         WebappInfo info = WebappInfo.create(id, url, null, null, name, shortName,
-                WebDisplayMode.Fullscreen, ScreenOrientationValues.DEFAULT, ShortcutSource.UNKNOWN,
+                WebDisplayMode.kFullscreen, ScreenOrientationValues.DEFAULT, ShortcutSource.UNKNOWN,
                 ShortcutHelper.MANIFEST_COLOR_INVALID_OR_MISSING,
                 ShortcutHelper.MANIFEST_COLOR_INVALID_OR_MISSING, false);
-        Assert.assertEquals(WebDisplayMode.Fullscreen, info.displayMode());
+        Assert.assertEquals(WebDisplayMode.kFullscreen, info.displayMode());
         Assert.assertEquals(ScreenOrientationValues.DEFAULT, info.orientation());
         Assert.assertEquals(ShortcutSource.UNKNOWN, info.source());
     }
@@ -164,7 +164,7 @@ public class WebappInfoTest {
         long backgroundColor = 0xFF0000FFL;
 
         WebappInfo info = WebappInfo.create(id, url, null, null, name, shortName,
-                WebDisplayMode.Standalone, ScreenOrientationValues.DEFAULT,
+                WebDisplayMode.kStandalone, ScreenOrientationValues.DEFAULT,
                 ShortcutSource.UNKNOWN, themeColor, backgroundColor, false);
         Assert.assertEquals(themeColor, info.themeColor());
         Assert.assertEquals(backgroundColor, info.backgroundColor());
@@ -180,7 +180,7 @@ public class WebappInfoTest {
         String url = "http://money.cnn.com";
 
         WebappInfo info = WebappInfo.create(id, url, null, null, name, shortName,
-                WebDisplayMode.Standalone, ScreenOrientationValues.DEFAULT, ShortcutSource.UNKNOWN,
+                WebDisplayMode.kStandalone, ScreenOrientationValues.DEFAULT, ShortcutSource.UNKNOWN,
                 ShortcutHelper.MANIFEST_COLOR_INVALID_OR_MISSING,
                 ShortcutHelper.MANIFEST_COLOR_INVALID_OR_MISSING, false);
         Assert.assertEquals(ShortcutHelper.MANIFEST_COLOR_INVALID_OR_MISSING, info.themeColor());
@@ -231,9 +231,9 @@ public class WebappInfoTest {
     @Feature({"Webapps"})
     public void testIntentDisplayMode() {
         Intent intent = createIntentWithUrlAndId();
-        intent.putExtra(ShortcutHelper.EXTRA_DISPLAY_MODE, WebDisplayMode.MinimalUi);
+        intent.putExtra(ShortcutHelper.EXTRA_DISPLAY_MODE, WebDisplayMode.kMinimalUi);
         WebappInfo info = WebappInfo.create(intent);
-        Assert.assertEquals(WebDisplayMode.MinimalUi, info.displayMode());
+        Assert.assertEquals(WebDisplayMode.kMinimalUi, info.displayMode());
     }
 
     @Test
diff --git a/chrome/android/javatests/src/org/chromium/chrome/browser/webapps/WebappModeTest.java b/chrome/android/javatests/src/org/chromium/chrome/browser/webapps/WebappModeTest.java
index c1e05f901d56..e316e4e44393 100644
--- a/chrome/android/javatests/src/org/chromium/chrome/browser/webapps/WebappModeTest.java
+++ b/chrome/android/javatests/src/org/chromium/chrome/browser/webapps/WebappModeTest.java
@@ -74,7 +74,7 @@ public class WebappModeTest extends MultiActivityTestBase {
         }
 
         WebappInfo webappInfo = WebappInfo.create(id, url, null, new WebappInfo.Icon(icon), title,
-                null, WebDisplayMode.Standalone, ScreenOrientationValues.PORTRAIT,
+                null, WebDisplayMode.kStandalone, ScreenOrientationValues.PORTRAIT,
                 ShortcutSource.UNKNOWN, ShortcutHelper.MANIFEST_COLOR_INVALID_OR_MISSING,
                 ShortcutHelper.MANIFEST_COLOR_INVALID_OR_MISSING, false);
         webappInfo.setWebappIntentExtras(intent);
diff --git a/chrome/android/junit/src/org/chromium/chrome/browser/webapps/WebApkInfoTest.java b/chrome/android/junit/src/org/chromium/chrome/browser/webapps/WebApkInfoTest.java
index 34a80cee3114..5fbf4dbce9df 100644
--- a/chrome/android/junit/src/org/chromium/chrome/browser/webapps/WebApkInfoTest.java
+++ b/chrome/android/junit/src/org/chromium/chrome/browser/webapps/WebApkInfoTest.java
@@ -86,7 +86,7 @@ public class WebApkInfoTest {
         Assert.assertEquals(SCOPE, info.scopeUri().toString());
         Assert.assertEquals(NAME, info.name());
         Assert.assertEquals(SHORT_NAME, info.shortName());
-        Assert.assertEquals(WebDisplayMode.MinimalUi, info.displayMode());
+        Assert.assertEquals(WebDisplayMode.kMinimalUi, info.displayMode());
         Assert.assertEquals(ScreenOrientationValues.PORTRAIT, info.orientation());
         Assert.assertTrue(info.hasValidThemeColor());
         Assert.assertEquals(1L, info.themeColor());
diff --git a/chrome/android/junit/src/org/chromium/chrome/browser/webapps/WebApkUpdateManagerTest.java b/chrome/android/junit/src/org/chromium/chrome/browser/webapps/WebApkUpdateManagerTest.java
index b74e80d32fa6..204ceb8f989b 100644
--- a/chrome/android/junit/src/org/chromium/chrome/browser/webapps/WebApkUpdateManagerTest.java
+++ b/chrome/android/junit/src/org/chromium/chrome/browser/webapps/WebApkUpdateManagerTest.java
@@ -61,7 +61,7 @@ public class WebApkUpdateManagerTest {
     private static final String SHORT_NAME = "Short Name";
     private static final String ICON_URL = "/icon.png";
     private static final String ICON_MURMUR2_HASH = "3";
-    private static final int DISPLAY_MODE = WebDisplayMode.Undefined;
+    private static final int DISPLAY_MODE = WebDisplayMode.kUndefined;
     private static final int ORIENTATION = ScreenOrientationValues.DEFAULT;
     private static final long THEME_COLOR = 1L;
     private static final long BACKGROUND_COLOR = 2L;
diff --git a/chrome/android/junit/src/org/chromium/chrome/browser/webapps/WebappDataStorageTest.java b/chrome/android/junit/src/org/chromium/chrome/browser/webapps/WebappDataStorageTest.java
index c0b6fbca4602..cf3f252a067c 100644
--- a/chrome/android/junit/src/org/chromium/chrome/browser/webapps/WebappDataStorageTest.java
+++ b/chrome/android/junit/src/org/chromium/chrome/browser/webapps/WebappDataStorageTest.java
@@ -239,7 +239,7 @@ public class WebappDataStorageTest {
         final String name = "name";
         final String shortName = "shortName";
         final Bitmap icon = createBitmap();
-        final int displayMode = WebDisplayMode.Standalone;
+        final int displayMode = WebDisplayMode.kStandalone;
         final int orientation = 1;
         final long themeColor = 2;
         final long backgroundColor = 3;
diff --git a/content/browser/renderer_host/pepper/pepper_gamepad_host_unittest.cc b/content/browser/renderer_host/pepper/pepper_gamepad_host_unittest.cc
index 290e258dbdeb..472a1a771761 100644
--- a/content/browser/renderer_host/pepper/pepper_gamepad_host_unittest.cc
+++ b/content/browser/renderer_host/pepper/pepper_gamepad_host_unittest.cc
@@ -82,7 +82,7 @@ TEST_F(PepperGamepadHostTest, ValidateGamepadsMatch) {
   size_t ppapi_items_length_cap = ppapi::WebKitGamepads::kItemsLengthCap;
   EXPECT_EQ(webkit_items_length_cap, ppapi_items_length_cap);
 
-  for (size_t i = 0; i < web_gamepads.itemsLengthCap; i++) {
+  for (size_t i = 0; i < webkit_items_length_cap; i++) {
     EXPECT_EQ(AddressDiff(&web_gamepads.items[0], &web_gamepads),
               AddressDiff(&ppapi_gamepads.items[0], &ppapi_gamepads));
   }
diff --git a/content/public/android/java/src/org/chromium/content/browser/input/ImeAdapter.java b/content/public/android/java/src/org/chromium/content/browser/input/ImeAdapter.java
index 912e9b6dfac0..73c07186b53d 100644
--- a/content/public/android/java/src/org/chromium/content/browser/input/ImeAdapter.java
+++ b/content/public/android/java/src/org/chromium/content/browser/input/ImeAdapter.java
@@ -252,19 +252,19 @@ public class ImeAdapter {
     private static int getModifiers(int metaState) {
         int modifiers = 0;
         if ((metaState & KeyEvent.META_SHIFT_ON) != 0) {
-            modifiers |= WebInputEventModifier.ShiftKey;
+            modifiers |= WebInputEventModifier.kShiftKey;
         }
         if ((metaState & KeyEvent.META_ALT_ON) != 0) {
-            modifiers |= WebInputEventModifier.AltKey;
+            modifiers |= WebInputEventModifier.kAltKey;
         }
         if ((metaState & KeyEvent.META_CTRL_ON) != 0) {
-            modifiers |= WebInputEventModifier.ControlKey;
+            modifiers |= WebInputEventModifier.kControlKey;
         }
         if ((metaState & KeyEvent.META_CAPS_LOCK_ON) != 0) {
-            modifiers |= WebInputEventModifier.CapsLockOn;
+            modifiers |= WebInputEventModifier.kCapsLockOn;
         }
         if ((metaState & KeyEvent.META_NUM_LOCK_ON) != 0) {
-            modifiers |= WebInputEventModifier.NumLockOn;
+            modifiers |= WebInputEventModifier.kNumLockOn;
         }
         return modifiers;
     }
@@ -563,7 +563,7 @@ public class ImeAdapter {
 
         mViewEmbedder.onImeEvent();
         long timestampMs = SystemClock.uptimeMillis();
-        nativeSendKeyEvent(mNativeImeAdapterAndroid, null, WebInputEventType.RawKeyDown, 0,
+        nativeSendKeyEvent(mNativeImeAdapterAndroid, null, WebInputEventType.kRawKeyDown, 0,
                 timestampMs, COMPOSITION_KEY_CODE, 0, false, unicodeFromKeyEvent);
 
         if (isCommit) {
@@ -573,7 +573,7 @@ public class ImeAdapter {
                     mNativeImeAdapterAndroid, text, text.toString(), newCursorPosition);
         }
 
-        nativeSendKeyEvent(mNativeImeAdapterAndroid, null, WebInputEventType.KeyUp, 0, timestampMs,
+        nativeSendKeyEvent(mNativeImeAdapterAndroid, null, WebInputEventType.kKeyUp, 0, timestampMs,
                 COMPOSITION_KEY_CODE, 0, false, unicodeFromKeyEvent);
         return true;
     }
@@ -591,9 +591,9 @@ public class ImeAdapter {
         int action = event.getAction();
         int type;
         if (action == KeyEvent.ACTION_DOWN) {
-            type = WebInputEventType.KeyDown;
+            type = WebInputEventType.kKeyDown;
         } else if (action == KeyEvent.ACTION_UP) {
-            type = WebInputEventType.KeyUp;
+            type = WebInputEventType.kKeyUp;
         } else {
             // In theory, KeyEvent.ACTION_MULTIPLE is a valid value, but in practice
             // this seems to have been quietly deprecated and we've never observed
@@ -619,10 +619,10 @@ public class ImeAdapter {
     boolean deleteSurroundingText(int beforeLength, int afterLength) {
         mViewEmbedder.onImeEvent();
         if (!isValid()) return false;
-        nativeSendKeyEvent(mNativeImeAdapterAndroid, null, WebInputEventType.RawKeyDown, 0,
+        nativeSendKeyEvent(mNativeImeAdapterAndroid, null, WebInputEventType.kRawKeyDown, 0,
                 SystemClock.uptimeMillis(), COMPOSITION_KEY_CODE, 0, false, 0);
         nativeDeleteSurroundingText(mNativeImeAdapterAndroid, beforeLength, afterLength);
-        nativeSendKeyEvent(mNativeImeAdapterAndroid, null, WebInputEventType.KeyUp, 0,
+        nativeSendKeyEvent(mNativeImeAdapterAndroid, null, WebInputEventType.kKeyUp, 0,
                 SystemClock.uptimeMillis(), COMPOSITION_KEY_CODE, 0, false, 0);
         return true;
     }
@@ -638,11 +638,11 @@ public class ImeAdapter {
     boolean deleteSurroundingTextInCodePoints(int beforeLength, int afterLength) {
         mViewEmbedder.onImeEvent();
         if (!isValid()) return false;
-        nativeSendKeyEvent(mNativeImeAdapterAndroid, null, WebInputEventType.RawKeyDown, 0,
+        nativeSendKeyEvent(mNativeImeAdapterAndroid, null, WebInputEventType.kRawKeyDown, 0,
                 SystemClock.uptimeMillis(), COMPOSITION_KEY_CODE, 0, false, 0);
         nativeDeleteSurroundingTextInCodePoints(
                 mNativeImeAdapterAndroid, beforeLength, afterLength);
-        nativeSendKeyEvent(mNativeImeAdapterAndroid, null, WebInputEventType.KeyUp, 0,
+        nativeSendKeyEvent(mNativeImeAdapterAndroid, null, WebInputEventType.kKeyUp, 0,
                 SystemClock.uptimeMillis(), COMPOSITION_KEY_CODE, 0, false, 0);
         return true;
     }
diff --git a/content/public/android/java/src/org/chromium/content/browser/input/ImeUtils.java b/content/public/android/java/src/org/chromium/content/browser/input/ImeUtils.java
index 8d44066f49df..f6957c54f7bd 100644
--- a/content/public/android/java/src/org/chromium/content/browser/input/ImeUtils.java
+++ b/content/public/android/java/src/org/chromium/content/browser/input/ImeUtils.java
@@ -41,7 +41,7 @@ public class ImeUtils {
         outAttrs.inputType =
                 EditorInfo.TYPE_CLASS_TEXT | EditorInfo.TYPE_TEXT_VARIATION_WEB_EDIT_TEXT;
 
-        if ((inputFlags & WebTextInputFlags.AutocompleteOff) != 0) {
+        if ((inputFlags & WebTextInputFlags.kAutocompleteOff) != 0) {
             outAttrs.inputType |= EditorInfo.TYPE_TEXT_FLAG_NO_SUGGESTIONS;
         }
 
@@ -50,13 +50,13 @@ public class ImeUtils {
             if (inputType == TextInputType.TEXT) {
                 // Normal text field
                 imeAction = EditorInfo.IME_ACTION_GO;
-                if ((inputFlags & WebTextInputFlags.AutocorrectOff) == 0) {
+                if ((inputFlags & WebTextInputFlags.kAutocorrectOff) == 0) {
                     outAttrs.inputType |= EditorInfo.TYPE_TEXT_FLAG_AUTO_CORRECT;
                 }
             } else if (inputType == TextInputType.TEXT_AREA
                     || inputType == TextInputType.CONTENT_EDITABLE) {
                 outAttrs.inputType |= EditorInfo.TYPE_TEXT_FLAG_MULTI_LINE;
-                if ((inputFlags & WebTextInputFlags.AutocorrectOff) == 0) {
+                if ((inputFlags & WebTextInputFlags.kAutocorrectOff) == 0) {
                     outAttrs.inputType |= EditorInfo.TYPE_TEXT_FLAG_AUTO_CORRECT;
                 }
                 imeAction = EditorInfo.IME_ACTION_NONE;
@@ -100,7 +100,7 @@ public class ImeUtils {
                 case WebTextInputMode.kKanaName:
                 case WebTextInputMode.kKataKana:
                     outAttrs.inputType |= EditorInfo.TYPE_TEXT_FLAG_MULTI_LINE;
-                    if ((inputFlags & WebTextInputFlags.AutocorrectOff) == 0) {
+                    if ((inputFlags & WebTextInputFlags.kAutocorrectOff) == 0) {
                         outAttrs.inputType |= EditorInfo.TYPE_TEXT_FLAG_AUTO_CORRECT;
                     }
                     imeAction = EditorInfo.IME_ACTION_NONE;
@@ -132,11 +132,11 @@ public class ImeUtils {
         // type. This is not using AutocapitalizeNone because Android does not autocapitalize by
         // default and there is no way to express no capitalization.
         // Autocapitalize is meant as a hint to the virtual keyboard.
-        if ((inputFlags & WebTextInputFlags.AutocapitalizeCharacters) != 0) {
+        if ((inputFlags & WebTextInputFlags.kAutocapitalizeCharacters) != 0) {
             outAttrs.inputType |= InputType.TYPE_TEXT_FLAG_CAP_CHARACTERS;
-        } else if ((inputFlags & WebTextInputFlags.AutocapitalizeWords) != 0) {
+        } else if ((inputFlags & WebTextInputFlags.kAutocapitalizeWords) != 0) {
             outAttrs.inputType |= InputType.TYPE_TEXT_FLAG_CAP_WORDS;
-        } else if ((inputFlags & WebTextInputFlags.AutocapitalizeSentences) != 0) {
+        } else if ((inputFlags & WebTextInputFlags.kAutocapitalizeSentences) != 0) {
             outAttrs.inputType |= InputType.TYPE_TEXT_FLAG_CAP_SENTENCES;
         }
         // Content editable doesn't use autocapitalize so we need to set it manually.
diff --git a/content/renderer/renderer_blink_platform_impl.cc b/content/renderer/renderer_blink_platform_impl.cc
index b0b4185d8f1a..4b04fe960c61 100644
--- a/content/renderer/renderer_blink_platform_impl.cc
+++ b/content/renderer/renderer_blink_platform_impl.cc
@@ -568,7 +568,8 @@ void RendererBlinkPlatformImpl::SandboxSupport::GetFallbackFontForCharacter(
     return;
   }
 
-  GetFallbackFontForCharacter(character, preferred_locale, fallbackFont);
+  content::GetFallbackFontForCharacter(character, preferred_locale,
+                                       fallbackFont);
   unicode_font_families_.insert(std::make_pair(character, *fallbackFont));
 }
 
diff --git a/mojo/public/cpp/bindings/lib/wtf_hash_util.h b/mojo/public/cpp/bindings/lib/wtf_hash_util.h
index 0125e8951016..d4cd505c713d 100644
--- a/mojo/public/cpp/bindings/lib/wtf_hash_util.h
+++ b/mojo/public/cpp/bindings/lib/wtf_hash_util.h
@@ -59,10 +59,10 @@ size_t WTFHash(size_t seed, const T& value) {
 
 template <typename T>
 struct StructPtrHashFn {
-  static unsigned hash(const StructPtr<T>& value) {
+  static unsigned GetHash(const StructPtr<T>& value) {
     return value.Hash(kHashSeed);
   }
-  static bool equal(const StructPtr<T>& left, const StructPtr<T>& right) {
+  static bool Equal(const StructPtr<T>& left, const StructPtr<T>& right) {
     return left.Equals(right);
   }
   static const bool safe_to_compare_to_empty_or_deleted = false;
@@ -70,10 +70,10 @@ struct StructPtrHashFn {
 
 template <typename T>
 struct InlinedStructPtrHashFn {
-  static unsigned hash(const InlinedStructPtr<T>& value) {
+  static unsigned GetHash(const InlinedStructPtr<T>& value) {
     return value.Hash(kHashSeed);
   }
-  static bool equal(const InlinedStructPtr<T>& left,
+  static bool Equal(const InlinedStructPtr<T>& left,
                     const InlinedStructPtr<T>& right) {
     return left.Equals(right);
   }
diff --git a/mojo/public/cpp/bindings/tests/wtf_hash_unittest.cc b/mojo/public/cpp/bindings/tests/wtf_hash_unittest.cc
index 959d25b36853..04f14b5cef7d 100644
--- a/mojo/public/cpp/bindings/tests/wtf_hash_unittest.cc
+++ b/mojo/public/cpp/bindings/tests/wtf_hash_unittest.cc
@@ -37,21 +37,21 @@ TEST_F(WTFHashTest, Enum) {
   // Just check that this template instantiation compiles.
 
   // Top-level.
-  ASSERT_EQ(WTF::DefaultHash<blink::TopLevelEnum>::Hash().hash(
+  ASSERT_EQ(WTF::DefaultHash<blink::TopLevelEnum>::Hash().GetHash(
                 blink::TopLevelEnum::E0),
-            WTF::DefaultHash<blink::TopLevelEnum>::Hash().hash(
+            WTF::DefaultHash<blink::TopLevelEnum>::Hash().GetHash(
                 blink::TopLevelEnum::E0));
 
   // Nested in struct.
-  ASSERT_EQ(WTF::DefaultHash<blink::TestWTFStruct::NestedEnum>::Hash().hash(
+  ASSERT_EQ(WTF::DefaultHash<blink::TestWTFStruct::NestedEnum>::Hash().GetHash(
                 blink::TestWTFStruct::NestedEnum::E0),
-            WTF::DefaultHash<blink::TestWTFStruct::NestedEnum>::Hash().hash(
+            WTF::DefaultHash<blink::TestWTFStruct::NestedEnum>::Hash().GetHash(
                 blink::TestWTFStruct::NestedEnum::E0));
 
   // Nested in interface.
-  ASSERT_EQ(WTF::DefaultHash<blink::TestWTF::NestedEnum>::Hash().hash(
+  ASSERT_EQ(WTF::DefaultHash<blink::TestWTF::NestedEnum>::Hash().GetHash(
                 blink::TestWTF::NestedEnum::E0),
-            WTF::DefaultHash<blink::TestWTF::NestedEnum>::Hash().hash(
+            WTF::DefaultHash<blink::TestWTF::NestedEnum>::Hash().GetHash(
                 blink::TestWTF::NestedEnum::E0));
 }
 
diff --git a/mojo/public/tools/bindings/generators/cpp_templates/enum_macros.tmpl b/mojo/public/tools/bindings/generators/cpp_templates/enum_macros.tmpl
index aecb32e10b5a..c334a52f9833 100644
--- a/mojo/public/tools/bindings/generators/cpp_templates/enum_macros.tmpl
+++ b/mojo/public/tools/bindings/generators/cpp_templates/enum_macros.tmpl
@@ -94,14 +94,14 @@ struct hash<{{enum_name}}>
 {%-   set deleted_value_unused = "false" if empty_value in enum|all_enum_values else "true" %}
 namespace WTF {
 struct {{hash_fn_name}} {
-  static unsigned hash(const {{enum_name}}& value) {
+  static unsigned GetHash(const {{enum_name}}& value) {
     using utype = std::underlying_type<{{enum_name}}>::type;
-    return DefaultHash<utype>::Hash().hash(static_cast<utype>(value));
+    return DefaultHash<utype>::Hash().GetHash(static_cast<utype>(value));
   }
-  static bool equal(const {{enum_name}}& left, const {{enum_name}}& right) {
+  static bool Equal(const {{enum_name}}& left, const {{enum_name}}& right) {
     return left == right;
   }
-  static const bool safeToCompareToEmptyOrDeleted = true;
+  static const bool safe_to_compare_to_empty_or_deleted = true;
 };
 
 template <>
@@ -117,13 +117,13 @@ struct HashTraits<{{enum_name}}>
   static_assert({{deleted_value_unused}},
                 "{{deleted_value}} is a reserved enum value");
   static const bool hasIsEmptyValueFunction = true;
-  static bool isEmptyValue(const {{enum_name}}& value) {
+  static bool IsEmptyValue(const {{enum_name}}& value) {
     return value == static_cast<{{enum_name}}>({{empty_value}});
   }
-  static void constructDeletedValue({{enum_name}}& slot, bool) {
+  static void ConstructDeletedValue({{enum_name}}& slot, bool) {
     slot = static_cast<{{enum_name}}>({{deleted_value}});
   }
-  static bool isDeletedValue(const {{enum_name}}& value) {
+  static bool IsDeletedValue(const {{enum_name}}& value) {
     return value == static_cast<{{enum_name}}>({{deleted_value}});
   }
 };
diff --git a/third_party/WebKit/Source/BUILD.gn b/third_party/WebKit/Source/BUILD.gn
index 25832deae572..7edbabc456c8 100644
--- a/third_party/WebKit/Source/BUILD.gn
+++ b/third_party/WebKit/Source/BUILD.gn
@@ -28,7 +28,7 @@ declare_args() {
   # Set to true to have the clang Blink GC plugin use Chromium-style naming
   # rather than legacy Blink name.
   # TODO(https://crbug.com/675879): Remove this option after the Blink rename.
-  blink_gc_plugin_option_use_chromium_style_naming = false
+  blink_gc_plugin_option_use_chromium_style_naming = true
 }
 
 # features ---------------------------------------------------------------------
diff --git a/third_party/WebKit/Source/bindings/core/v8/DOMWrapperWorld.cpp b/third_party/WebKit/Source/bindings/core/v8/DOMWrapperWorld.cpp
index 2794c9c6b805..e135329d746a 100644
--- a/third_party/WebKit/Source/bindings/core/v8/DOMWrapperWorld.cpp
+++ b/third_party/WebKit/Source/bindings/core/v8/DOMWrapperWorld.cpp
@@ -278,7 +278,7 @@ void DOMWrapperWorld::RegisterDOMObjectHolder(v8::Isolate* isolate,
       DOMObjectHolder<T>::Create(isolate, object, wrapper));
 }
 
-template void DOMWrapperWorld::registerDOMObjectHolder(v8::Isolate*,
+template void DOMWrapperWorld::RegisterDOMObjectHolder(v8::Isolate*,
                                                        ScriptFunction*,
                                                        v8::Local<v8::Value>);
 
diff --git a/third_party/WebKit/Source/bindings/core/v8/Iterable.h b/third_party/WebKit/Source/bindings/core/v8/Iterable.h
index 02edb4b07616..ab0d76dd1030 100644
--- a/third_party/WebKit/Source/bindings/core/v8/Iterable.h
+++ b/third_party/WebKit/Source/bindings/core/v8/Iterable.h
@@ -17,7 +17,7 @@ namespace blink {
 template <typename KeyType, typename ValueType>
 class Iterable {
  public:
-  Iterator* KeysForBinding(ScriptState* script_state,
+  Iterator* keysForBinding(ScriptState* script_state,
                            ExceptionState& exception_state) {
     IterationSource* source = this->StartIteration(script_state, exception_state);
     if (!source)
@@ -25,7 +25,7 @@ class Iterable {
     return new IterableIterator<KeySelector>(source);
   }
 
-  Iterator* ValuesForBinding(ScriptState* script_state,
+  Iterator* valuesForBinding(ScriptState* script_state,
                              ExceptionState& exception_state) {
     IterationSource* source = this->StartIteration(script_state, exception_state);
     if (!source)
@@ -33,7 +33,7 @@ class Iterable {
     return new IterableIterator<ValueSelector>(source);
   }
 
-  Iterator* EntriesForBinding(ScriptState* script_state,
+  Iterator* entriesForBinding(ScriptState* script_state,
                               ExceptionState& exception_state) {
     IterationSource* source = this->StartIteration(script_state, exception_state);
     if (!source)
@@ -41,7 +41,7 @@ class Iterable {
     return new IterableIterator<EntrySelector>(source);
   }
 
-  void ForEachForBinding(ScriptState* script_state,
+  void forEachForBinding(ScriptState* script_state,
                          const ScriptValue& this_value,
                          const ScriptValue& callback,
                          const ScriptValue& this_arg,
@@ -172,7 +172,7 @@ template <typename KeyType, typename ValueType>
 class PairIterable : public Iterable<KeyType, ValueType> {
  public:
   Iterator* GetIterator(ScriptState* script_state, ExceptionState& exception_state) {
-    return this->EntriesForBinding(script_state, exception_state);
+    return this->entriesForBinding(script_state, exception_state);
   }
 };
 
diff --git a/third_party/WebKit/Source/bindings/core/v8/Maplike.h b/third_party/WebKit/Source/bindings/core/v8/Maplike.h
index 7bbcd9160370..62f1d1ff21d9 100644
--- a/third_party/WebKit/Source/bindings/core/v8/Maplike.h
+++ b/third_party/WebKit/Source/bindings/core/v8/Maplike.h
@@ -14,14 +14,14 @@ namespace blink {
 template <typename KeyType, typename ValueType>
 class Maplike : public PairIterable<KeyType, ValueType> {
  public:
-  bool HasForBinding(ScriptState* script_state,
+  bool hasForBinding(ScriptState* script_state,
                      const KeyType& key,
                      ExceptionState& exception_state) {
     ValueType value;
     return GetMapEntry(script_state, key, value, exception_state);
   }
 
-  ScriptValue GetForBinding(ScriptState* script_state,
+  ScriptValue getForBinding(ScriptState* script_state,
                             const KeyType& key,
                             ExceptionState& exception_state) {
     ValueType value;
diff --git a/third_party/WebKit/Source/bindings/core/v8/NativeValueTraitsImplTest.cpp b/third_party/WebKit/Source/bindings/core/v8/NativeValueTraitsImplTest.cpp
index bb7e95832076..33c07976b1cd 100644
--- a/third_party/WebKit/Source/bindings/core/v8/NativeValueTraitsImplTest.cpp
+++ b/third_party/WebKit/Source/bindings/core/v8/NativeValueTraitsImplTest.cpp
@@ -27,7 +27,7 @@ TEST(NativeValueTraitsImplTest, IDLInterface) {
   V8TestingScope scope;
   {
     DummyExceptionStateForTesting exception_state;
-    Internals* internals = NativeValueTraits<Internals>::nativeValue(
+    Internals* internals = NativeValueTraits<Internals>::NativeValue(
         scope.GetIsolate(), v8::Number::New(scope.GetIsolate(), 42), exception_state);
     EXPECT_TRUE(exception_state.HadException());
     EXPECT_EQ("Unable to convert value to Internals.",
@@ -37,7 +37,7 @@ TEST(NativeValueTraitsImplTest, IDLInterface) {
   {
     DummyExceptionStateForTesting exception_state;
     TestSequenceCallback* callback_function =
-        NativeValueTraits<TestSequenceCallback>::nativeValue(
+        NativeValueTraits<TestSequenceCallback>::NativeValue(
             scope.GetIsolate(), v8::Undefined(scope.GetIsolate()), exception_state);
     EXPECT_TRUE(exception_state.HadException());
     EXPECT_EQ("Unable to convert value to TestSequenceCallback.",
diff --git a/third_party/WebKit/Source/bindings/core/v8/V8StringResource.cpp b/third_party/WebKit/Source/bindings/core/v8/V8StringResource.cpp
index e5348575de05..ec5b68f1870a 100644
--- a/third_party/WebKit/Source/bindings/core/v8/V8StringResource.cpp
+++ b/third_party/WebKit/Source/bindings/core/v8/V8StringResource.cpp
@@ -148,9 +148,9 @@ StringType V8StringToWebCoreString(v8::Local<v8::String> v8_string,
 // Explicitly instantiate the above template with the expected
 // parameterizations, to ensure the compiler generates the code; otherwise link
 // errors can result in GCC 4.4.
-template String v8StringToWebCoreString<String>(v8::Local<v8::String>,
+template String V8StringToWebCoreString<String>(v8::Local<v8::String>,
                                                 ExternalMode);
-template AtomicString v8StringToWebCoreString<AtomicString>(
+template AtomicString V8StringToWebCoreString<AtomicString>(
     v8::Local<v8::String>,
     ExternalMode);
 
diff --git a/third_party/WebKit/Source/bindings/core/v8/V8V0CustomElementLifecycleCallbacks.cpp b/third_party/WebKit/Source/bindings/core/v8/V8V0CustomElementLifecycleCallbacks.cpp
index 70d45aba5db4..0620f20e2d72 100644
--- a/third_party/WebKit/Source/bindings/core/v8/V8V0CustomElementLifecycleCallbacks.cpp
+++ b/third_party/WebKit/Source/bindings/core/v8/V8V0CustomElementLifecycleCallbacks.cpp
@@ -113,9 +113,9 @@ V8V0CustomElementLifecycleCallbacks::V8V0CustomElementLifecycleCallbacks(
       attribute_changed_(script_state->GetIsolate(), attribute_changed) {
   prototype_.SetPhantom();
 
-#define MAKE_WEAK(Var, _) \
-  if (!m_##Var.IsEmpty()) \
-    m_##Var.SetPhantom();
+#define MAKE_WEAK(Var, Ignored) \
+  if (!Var##_.IsEmpty()) \
+    Var##_.SetPhantom();
 
   CALLBACK_LIST(MAKE_WEAK)
 #undef MAKE_WEAK
diff --git a/third_party/WebKit/Source/bindings/core/v8/WrapperTypeInfo.cpp b/third_party/WebKit/Source/bindings/core/v8/WrapperTypeInfo.cpp
index 805cc73ce41a..8d755cc37182 100644
--- a/third_party/WebKit/Source/bindings/core/v8/WrapperTypeInfo.cpp
+++ b/third_party/WebKit/Source/bindings/core/v8/WrapperTypeInfo.cpp
@@ -6,7 +6,7 @@
 
 namespace blink {
 
-static_assert(offsetof(struct WrapperTypeInfo, ginEmbedder) ==
+static_assert(offsetof(struct WrapperTypeInfo, gin_embedder) ==
                   offsetof(struct gin::WrapperInfo, embedder),
               "offset of WrapperTypeInfo.ginEmbedder must be the same as "
               "gin::WrapperInfo.embedder");
diff --git a/third_party/WebKit/Source/bindings/core/v8/custom/V8HTMLPlugInElementCustom.cpp b/third_party/WebKit/Source/bindings/core/v8/custom/V8HTMLPlugInElementCustom.cpp
index c9a5c5213ec4..353883b7e95d 100644
--- a/third_party/WebKit/Source/bindings/core/v8/custom/V8HTMLPlugInElementCustom.cpp
+++ b/third_party/WebKit/Source/bindings/core/v8/custom/V8HTMLPlugInElementCustom.cpp
@@ -46,7 +46,7 @@ template <typename ElementType>
 void GetScriptableObjectProperty(
     const AtomicString& name,
     const v8::PropertyCallbackInfo<v8::Value>& info) {
-  HTMLPlugInElement* impl = ElementType::ToImpl(info.Holder());
+  HTMLPlugInElement* impl = ElementType::toImpl(info.Holder());
   RefPtr<SharedPersistent<v8::Object>> wrapper = impl->PluginWrapper();
   if (!wrapper)
     return;
@@ -75,7 +75,7 @@ void SetScriptableObjectProperty(
     const v8::PropertyCallbackInfo<v8::Value>& info) {
   ASSERT(!value.IsEmpty());
 
-  HTMLPlugInElement* impl = ElementType::ToImpl(info.Holder());
+  HTMLPlugInElement* impl = ElementType::toImpl(info.Holder());
   RefPtr<SharedPersistent<v8::Object>> wrapper = impl->PluginWrapper();
   if (!wrapper)
     return;
diff --git a/third_party/WebKit/Source/bindings/core/v8/custom/V8PerformanceObserverCustom.cpp b/third_party/WebKit/Source/bindings/core/v8/custom/V8PerformanceObserverCustom.cpp
index cf6e7736f300..ed610fbdf46a 100644
--- a/third_party/WebKit/Source/bindings/core/v8/custom/V8PerformanceObserverCustom.cpp
+++ b/third_party/WebKit/Source/bindings/core/v8/custom/V8PerformanceObserverCustom.cpp
@@ -53,7 +53,7 @@ void V8PerformanceObserver::constructorCustom(
   ScriptState* script_state = ScriptState::ForReceiverObject(info);
   v8::Local<v8::Function> v8_callback = v8::Local<v8::Function>::Cast(info[0]);
   PerformanceObserverCallback* callback =
-      PerformanceObserverCallback::create(script_state, v8_callback);
+      PerformanceObserverCallback::Create(script_state, v8_callback);
 
   PerformanceObserver* observer = PerformanceObserver::Create(
       CurrentExecutionContext(isolate), performance, callback);
diff --git a/third_party/WebKit/Source/bindings/modules/v8/DictionaryHelperForModules.cpp b/third_party/WebKit/Source/bindings/modules/v8/DictionaryHelperForModules.cpp
index 5ea221df963e..a183941442b4 100644
--- a/third_party/WebKit/Source/bindings/modules/v8/DictionaryHelperForModules.cpp
+++ b/third_party/WebKit/Source/bindings/modules/v8/DictionaryHelperForModules.cpp
@@ -29,10 +29,10 @@
 
 namespace blink {
 
-template bool DictionaryHelper::get(const Dictionary&,
+template bool DictionaryHelper::Get(const Dictionary&,
                                     const StringView& key,
                                     Member<Headers>& value);
-template bool DictionaryHelper::get(const Dictionary&,
+template bool DictionaryHelper::Get(const Dictionary&,
                                     const StringView& key,
                                     Member<PasswordCredential>& value);
 
diff --git a/third_party/WebKit/Source/bindings/modules/v8/V8ServiceWorkerMessageEventInternal.h b/third_party/WebKit/Source/bindings/modules/v8/V8ServiceWorkerMessageEventInternal.h
index 5ee1b78459f2..64caee6b9bbc 100644
--- a/third_party/WebKit/Source/bindings/modules/v8/V8ServiceWorkerMessageEventInternal.h
+++ b/third_party/WebKit/Source/bindings/modules/v8/V8ServiceWorkerMessageEventInternal.h
@@ -58,8 +58,8 @@ void V8ServiceWorkerMessageEventInternal::ConstructorCustom(
 
   // TODO(bashi): Workaround for http://crbug.com/529941. We need to store
   // |data| as a private value to avoid cyclic references.
-  if (event_init_dict.HasData()) {
-    v8::Local<v8::Value> v8_data = event_init_dict.Data().V8Value();
+  if (event_init_dict.hasData()) {
+    v8::Local<v8::Value> v8_data = event_init_dict.data().V8Value();
     V8PrivateProperty::GetMessageEventCachedData(isolate).Set(wrapper, v8_data);
     if (DOMWrapperWorld::Current(isolate).IsIsolatedWorld()) {
       impl->SetSerializedData(
@@ -85,7 +85,7 @@ void V8ServiceWorkerMessageEventInternal::DataAttributeGetterCustom(
 
   v8::Local<v8::Value> data;
   if (SerializedScriptValue* serialized_value = event->SerializedData()) {
-    MessagePortArray ports = event->Ports();
+    MessagePortArray ports = event->ports();
     SerializedScriptValue::DeserializeOptions options;
     options.message_ports = &ports;
     data = serialized_value->Deserialize(isolate, options);
diff --git a/third_party/WebKit/Source/bindings/modules/v8/custom/V8IDBObserverCustom.cpp b/third_party/WebKit/Source/bindings/modules/v8/custom/V8IDBObserverCustom.cpp
index 129b2ee75f1b..259c13851f9b 100644
--- a/third_party/WebKit/Source/bindings/modules/v8/custom/V8IDBObserverCustom.cpp
+++ b/third_party/WebKit/Source/bindings/modules/v8/custom/V8IDBObserverCustom.cpp
@@ -45,7 +45,7 @@ void V8IDBObserver::constructorCustom(
   ScriptState* script_state = ScriptState::ForReceiverObject(info);
   v8::Local<v8::Function> v8_callback = v8::Local<v8::Function>::Cast(info[0]);
   IDBObserverCallback* callback =
-      IDBObserverCallback::create(script_state, v8_callback);
+      IDBObserverCallback::Create(script_state, v8_callback);
   IDBObserver* observer = IDBObserver::Create(callback);
   if (exception_state.HadException())
     return;
diff --git a/third_party/WebKit/Source/bindings/scripts/generate_init_partial_interfaces.py b/third_party/WebKit/Source/bindings/scripts/generate_init_partial_interfaces.py
index ab5bbe6336fe..fd548e39bac1 100755
--- a/third_party/WebKit/Source/bindings/scripts/generate_init_partial_interfaces.py
+++ b/third_party/WebKit/Source/bindings/scripts/generate_init_partial_interfaces.py
@@ -29,7 +29,7 @@ _INIT_PARTIAL_INTERFACE = """%s
 
 namespace blink {
 
-void initPartialInterfacesInModules() {
+void InitPartialInterfacesInModules() {
 %s
 }
 
diff --git a/third_party/WebKit/Source/bindings/scripts/idl_definitions.py b/third_party/WebKit/Source/bindings/scripts/idl_definitions.py
index c8b592fba81f..16824c5c7ae4 100644
--- a/third_party/WebKit/Source/bindings/scripts/idl_definitions.py
+++ b/third_party/WebKit/Source/bindings/scripts/idl_definitions.py
@@ -528,7 +528,7 @@ class IdlLiteral(object):
             if self.value:
                 return '"%s"' % self.value
             else:
-                return 'WTF::emptyString'
+                return 'WTF::g_empty_string'
         if self.idl_type == 'integer':
             return '%d' % self.value
         if self.idl_type == 'float':
diff --git a/third_party/WebKit/Source/bindings/scripts/v8_attributes.py b/third_party/WebKit/Source/bindings/scripts/v8_attributes.py
index da3f3371db5b..e3eb374a3031 100644
--- a/third_party/WebKit/Source/bindings/scripts/v8_attributes.py
+++ b/third_party/WebKit/Source/bindings/scripts/v8_attributes.py
@@ -281,7 +281,7 @@ def getter_context(interface, attribute, context):
 
     def v8_set_return_value_statement(for_main_world=False):
         if context['is_keep_alive_for_gc'] or 'CachedAttribute' in extended_attributes:
-            return 'v8SetReturnValue(info, v8Value)'
+            return 'V8SetReturnValue(info, v8Value)'
         return idl_type.v8_set_return_value(
             cpp_value, extended_attributes=extended_attributes, script_wrappable='impl',
             for_main_world=for_main_world, is_static=attribute.is_static)
@@ -319,14 +319,14 @@ def getter_expression(interface, attribute, context):
     # Needed to handle getter expressions returning Type& as the
     # use site for |expression| expects Type*.
     if attribute.idl_type.is_interface_type and len(arguments) == 0:
-        return 'WTF::getPtr(%s)' % expression
+        return 'WTF::GetPtr(%s)' % expression
     return expression
 
 
 CONTENT_ATTRIBUTE_GETTER_NAMES = {
-    'boolean': 'fastHasAttribute',
-    'long': 'getIntegralAttribute',
-    'unsigned long': 'getUnsignedIntegralAttribute',
+    'boolean': 'FastHasAttribute',
+    'long': 'GetIntegralAttribute',
+    'unsigned long': 'GetUnsignedIntegralAttribute',
 }
 
 
@@ -339,7 +339,7 @@ def getter_base_name(interface, attribute, arguments):
     content_attribute_name = extended_attributes['Reflect'] or attribute.name.lower()
     if content_attribute_name in ['class', 'id', 'name']:
         # Special-case for performance optimization.
-        return 'get%sAttribute' % content_attribute_name.capitalize()
+        return 'Get%sAttribute' % content_attribute_name.capitalize()
 
     arguments.append(scoped_content_attribute_name(interface, attribute))
 
@@ -347,8 +347,8 @@ def getter_base_name(interface, attribute, arguments):
     if base_idl_type in CONTENT_ATTRIBUTE_GETTER_NAMES:
         return CONTENT_ATTRIBUTE_GETTER_NAMES[base_idl_type]
     if 'URL' in attribute.extended_attributes:
-        return 'getURLAttribute'
-    return 'fastGetAttribute'
+        return 'GetURLAttribute'
+    return 'FastGetAttribute'
 
 
 def is_keep_alive_for_gc(interface, attribute):
@@ -394,7 +394,9 @@ def setter_context(interface, attribute, interfaces, context):
                             (target_attribute_name, target_interface_name))
 
     if ('Replaceable' in attribute.extended_attributes):
-        context['cpp_setter'] = 'v8CallBoolean(info.Holder()->CreateDataProperty(info.GetIsolate()->GetCurrentContext(), propertyName, v8Value))'
+        context['cpp_setter'] = (
+            'V8CallBoolean(info.Holder()->CreateDataProperty(' +
+            'info.GetIsolate()->GetCurrentContext(), propertyName, v8Value))')
         return
 
     extended_attributes = attribute.extended_attributes
@@ -449,13 +451,13 @@ def setter_expression(interface, attribute, context):
                 attribute.name == 'onerror'):
             includes.add('bindings/core/v8/V8ErrorHandler.h')
             arguments.append(
-                'V8EventListenerHelper::ensureEventListener<V8ErrorHandler>(' +
-                'v8Value, true, ScriptState::forReceiverObject(info))')
+                'V8EventListenerHelper::EnsureEventListener<V8ErrorHandler>(' +
+                'v8Value, true, ScriptState::ForReceiverObject(info))')
         else:
             arguments.append(
-                'V8EventListenerHelper::getEventListener(' +
-                'ScriptState::forReceiverObject(info), v8Value, true, ' +
-                'ListenerFindOrCreate)')
+                'V8EventListenerHelper::GetEventListener(' +
+                'ScriptState::ForReceiverObject(info), v8Value, true, ' +
+                'kListenerFindOrCreate)')
     else:
         arguments.append('cppValue')
     if context['is_setter_raises_exception']:
@@ -465,9 +467,9 @@ def setter_expression(interface, attribute, context):
 
 
 CONTENT_ATTRIBUTE_SETTER_NAMES = {
-    'boolean': 'setBooleanAttribute',
-    'long': 'setIntegralAttribute',
-    'unsigned long': 'setUnsignedIntegralAttribute',
+    'boolean': 'SetBooleanAttribute',
+    'long': 'SetIntegralAttribute',
+    'unsigned long': 'SetUnsignedIntegralAttribute',
 }
 
 
diff --git a/third_party/WebKit/Source/bindings/scripts/v8_callback_function.py b/third_party/WebKit/Source/bindings/scripts/v8_callback_function.py
index 37be007b8e64..b1589544c0f6 100644
--- a/third_party/WebKit/Source/bindings/scripts/v8_callback_function.py
+++ b/third_party/WebKit/Source/bindings/scripts/v8_callback_function.py
@@ -57,7 +57,7 @@ def callback_function_context(callback_function):
             'return_value': idl_type.v8_value_to_local_cpp_value(
                 callback_function.extended_attributes,
                 'v8ReturnValue', 'cppValue',
-                isolate='m_scriptState->isolate()',
+                isolate='m_scriptState->GetIsolate()',
                 bailout_return_value='false'),
         })
 
@@ -70,8 +70,8 @@ def arguments_context(arguments, return_cpp_type):
         return {
             'argument_name': '%sArgument' % argument.name,
             'cpp_value_to_v8_value': argument.idl_type.cpp_value_to_v8_value(
-                argument.name, isolate='m_scriptState->isolate()',
-                creation_context='m_scriptState->context()->Global()'),
+                argument.name, isolate='m_scriptState->GetIsolate()',
+                creation_context='m_scriptState->GetContext()->Global()'),
         }
 
     argument_declarations = [
diff --git a/third_party/WebKit/Source/bindings/scripts/v8_callback_interface.py b/third_party/WebKit/Source/bindings/scripts/v8_callback_interface.py
index 524972196b19..a3f97e73a56f 100644
--- a/third_party/WebKit/Source/bindings/scripts/v8_callback_interface.py
+++ b/third_party/WebKit/Source/bindings/scripts/v8_callback_interface.py
@@ -116,8 +116,8 @@ def arguments_context(arguments, call_with_this_handle):
         return {
             'handle': '%sHandle' % argument.name,
             'cpp_value_to_v8_value': argument.idl_type.cpp_value_to_v8_value(
-                argument.name, isolate='m_scriptState->isolate()',
-                creation_context='m_scriptState->context()->Global()'),
+                argument.name, isolate='m_scriptState->GetIsolate()',
+                creation_context='m_scriptState->GetContext()->Global()'),
         }
 
     argument_declarations = ['ScriptValue thisValue'] if call_with_this_handle else []
diff --git a/third_party/WebKit/Source/bindings/scripts/v8_dictionary.py b/third_party/WebKit/Source/bindings/scripts/v8_dictionary.py
index 14af42f00089..66fd18f16b8a 100644
--- a/third_party/WebKit/Source/bindings/scripts/v8_dictionary.py
+++ b/third_party/WebKit/Source/bindings/scripts/v8_dictionary.py
@@ -209,12 +209,14 @@ def member_impl_context(member, interfaces_info, header_includes,
     def has_method_expression():
         if nullable_indicator_name:
             return nullable_indicator_name
-        elif idl_type.is_enum or idl_type.is_string_type or idl_type.is_union_type:
+        elif idl_type.is_union_type:
             return '!m_%s.isNull()' % cpp_name
+        elif idl_type.is_enum or idl_type.is_string_type:
+            return '!m_%s.IsNull()' % cpp_name
         elif idl_type.name in ['Any', 'Object']:
-            return '!(m_{0}.isEmpty() || m_{0}.isNull() || m_{0}.isUndefined())'.format(cpp_name)
+            return '!(m_{0}.IsEmpty() || m_{0}.IsNull() || m_{0}.IsUndefined())'.format(cpp_name)
         elif idl_type.name == 'Dictionary':
-            return '!m_%s.isUndefinedOrNull()' % cpp_name
+            return '!m_%s.IsUndefinedOrNull()' % cpp_name
         else:
             return 'm_%s' % cpp_name
 
diff --git a/third_party/WebKit/Source/bindings/scripts/v8_interface.py b/third_party/WebKit/Source/bindings/scripts/v8_interface.py
index 623d03d975e0..ec4dfe7974b1 100644
--- a/third_party/WebKit/Source/bindings/scripts/v8_interface.py
+++ b/third_party/WebKit/Source/bindings/scripts/v8_interface.py
@@ -214,7 +214,7 @@ def interface_context(interface, interfaces):
     # as in the WebIDL spec?
     is_immutable_prototype = is_global or 'ImmutablePrototype' in extended_attributes
 
-    wrapper_class_id = ('NodeClassId' if inherits_interface(interface.name, 'Node') else 'ObjectClassId')
+    wrapper_class_id = ('kNodeClassId' if inherits_interface(interface.name, 'Node') else 'kObjectClassId')
 
     # [ActiveScriptWrappable] must be accompanied with [DependentLifetime].
     if active_scriptwrappable and not is_dependent_lifetime:
@@ -250,7 +250,7 @@ def interface_context(interface, interfaces):
         'is_node': inherits_interface(interface.name, 'Node'),
         'is_partial': interface.is_partial,
         'is_typed_array_type': is_typed_array_type,
-        'lifetime': 'Dependent' if is_dependent_lifetime else 'Independent',
+        'lifetime': 'kDependent' if is_dependent_lifetime else 'kIndependent',
         'measure_as': v8_utilities.measure_as(interface, None),  # [MeasureAs]
         'needs_runtime_enabled_installer': needs_runtime_enabled_installer,
         'origin_trial_enabled_function': v8_utilities.origin_trial_enabled_function_name(interface),
@@ -551,7 +551,7 @@ def methods_context(interface):
                 implemented_as=implemented_as)
 
         if not interface.has_indexed_elements:
-            iterator_method = generated_iterator_method('iterator', implemented_as='iterator')
+            iterator_method = generated_iterator_method('iterator', implemented_as='GetIterator')
 
         if interface.iterable or interface.maplike or interface.setlike:
             non_overridable_methods = []
@@ -1037,7 +1037,7 @@ def resolution_tests_methods(effective_overloads):
     try:
         method = next(method for idl_type, method in idl_types_methods
                       if idl_type.is_nullable)
-        test = 'isUndefinedOrNull(%s)' % cpp_value
+        test = 'IsUndefinedOrNull(%s)' % cpp_value
         yield test, method
     except StopIteration:
         pass
@@ -1286,11 +1286,11 @@ def property_getter(getter, cpp_arguments):
         if idl_type.use_output_parameter_for_result:
             return 'result.isNull()'
         if idl_type.is_string_type:
-            return 'result.isNull()'
+            return 'result.IsNull()'
         if idl_type.is_interface_type:
             return '!result'
         if idl_type.base_type in ('any', 'object'):
-            return 'result.isEmpty()'
+            return 'result.IsEmpty()'
         return ''
 
     extended_attributes = getter.extended_attributes
diff --git a/third_party/WebKit/Source/bindings/scripts/v8_methods.py b/third_party/WebKit/Source/bindings/scripts/v8_methods.py
index 81263b8df8ab..97f74ac844e0 100644
--- a/third_party/WebKit/Source/bindings/scripts/v8_methods.py
+++ b/third_party/WebKit/Source/bindings/scripts/v8_methods.py
@@ -322,9 +322,9 @@ def cpp_value(interface, method, number_of_arguments):
         cpp_arguments.append('result')
 
     if method.name == 'Constructor':
-        base_name = 'create'
+        base_name = 'Create'
     elif method.name == 'NamedConstructor':
-        base_name = 'createForJSConstructor'
+        base_name = 'CreateForJSConstructor'
     else:
         base_name = v8_utilities.cpp_name(method)
 
@@ -343,7 +343,7 @@ def v8_set_return_value(interface_name, method, cpp_value, for_main_world=False)
     if use_local_result(method):
         if idl_type.is_explicit_nullable:
             # result is of type Nullable<T>
-            cpp_value = 'result.get()'
+            cpp_value = 'result.Get()'
         else:
             cpp_value = 'result'
 
@@ -362,8 +362,8 @@ def v8_value_to_local_cpp_variadic_value(method, argument, index, return_promise
         vector_type = 'Vector'
 
     return {
-        'assign_expression': 'toImplArguments<%s<%s>>(info, %s, exceptionState)' % (vector_type, this_cpp_type, index),
-        'check_expression': 'exceptionState.hadException()',
+        'assign_expression': 'ToImplArguments<%s<%s>>(info, %s, exceptionState)' % (vector_type, this_cpp_type, index),
+        'check_expression': 'exceptionState.HadException()',
         'cpp_type': this_cpp_type,
         'cpp_name': argument.name,
         'declare_variable': False,
diff --git a/third_party/WebKit/Source/bindings/scripts/v8_types.py b/third_party/WebKit/Source/bindings/scripts/v8_types.py
index 8bbe2763d317..6c14c4bbfa97 100644
--- a/third_party/WebKit/Source/bindings/scripts/v8_types.py
+++ b/third_party/WebKit/Source/bindings/scripts/v8_types.py
@@ -149,11 +149,11 @@ def cpp_type(idl_type, extended_attributes=None, raw_type=False, used_as_rvalue_
     """
     def string_mode():
         if idl_type.is_nullable:
-            return 'TreatNullAndUndefinedAsNullString'
+            return 'kTreatNullAndUndefinedAsNullString'
         if extended_attributes.get('TreatNullAs') == 'EmptyString':
-            return 'TreatNullAsEmptyString'
+            return 'kTreatNullAsEmptyString'
         if extended_attributes.get('TreatNullAs') == 'NullString':
-            return 'TreatNullAsNullString'
+            return 'kTreatNullAsNullString'
         return ''
 
     extended_attributes = extended_attributes or {}
@@ -506,12 +506,12 @@ V8_VALUE_TO_CPP_VALUE = {
     # Basic
     'DOMString': '{v8_value}',
     # Interface types
-    'FlexibleArrayBufferView': 'toFlexibleArrayBufferView({isolate}, {v8_value}, {variable_name}, allocateFlexibleArrayBufferViewStorage({v8_value}))',
-    'NodeFilter': 'toNodeFilter({v8_value}, info.Holder(), ScriptState::current({isolate}))',
-    'Promise': 'ScriptPromise::cast(ScriptState::current({isolate}), {v8_value})',
-    'ScriptValue': 'ScriptValue(ScriptState::current({isolate}), {v8_value})',
-    'Window': 'toDOMWindow({isolate}, {v8_value})',
-    'XPathNSResolver': 'toXPathNSResolver(ScriptState::current({isolate}), {v8_value})',
+    'FlexibleArrayBufferView': 'ToFlexibleArrayBufferView({isolate}, {v8_value}, {variable_name}, allocateFlexibleArrayBufferViewStorage({v8_value}))',
+    'NodeFilter': 'ToNodeFilter({v8_value}, info.Holder(), ScriptState::Current({isolate}))',
+    'Promise': 'ScriptPromise::Cast(ScriptState::Current({isolate}), {v8_value})',
+    'ScriptValue': 'ScriptValue(ScriptState::Current({isolate}), {v8_value})',
+    'Window': 'ToDOMWindow({isolate}, {v8_value})',
+    'XPathNSResolver': 'ToXPathNSResolver(ScriptState::Current({isolate}), {v8_value})',
 }
 
 
@@ -584,11 +584,11 @@ def v8_value_to_cpp_value(idl_type, extended_attributes, v8_value, variable_name
         base_idl_type = 'FlexibleArrayBufferView'
 
     if idl_type.is_integer_type:
-        configuration = 'NormalConversion'
+        configuration = 'kNormalConversion'
         if 'EnforceRange' in extended_attributes:
-            configuration = 'EnforceRange'
+            configuration = 'kEnforceRange'
         elif 'Clamp' in extended_attributes:
-            configuration = 'Clamp'
+            configuration = 'kClamp'
         arguments = ', '.join([v8_value, 'exceptionState', configuration])
     elif idl_type.v8_conversion_needs_exception_state:
         arguments = ', '.join([v8_value, 'exceptionState'])
@@ -602,19 +602,20 @@ def v8_value_to_cpp_value(idl_type, extended_attributes, v8_value, variable_name
             '{v8_value}->Is{idl_type}() ? '
             'V8{idl_type}::toImpl(v8::Local<v8::{idl_type}>::Cast({v8_value})) : 0')
     elif idl_type.is_union_type:
-        nullable = 'UnionTypeConversionMode::Nullable' if idl_type.includes_nullable_type else 'UnionTypeConversionMode::NotNullable'
+        nullable = 'UnionTypeConversionMode::kNullable' if idl_type.includes_nullable_type \
+            else 'UnionTypeConversionMode::kNotNullable'
         cpp_expression_format = 'V8{idl_type}::toImpl({isolate}, {v8_value}, {variable_name}, %s, exceptionState)' % nullable
     elif idl_type.use_output_parameter_for_result:
         cpp_expression_format = 'V8{idl_type}::toImpl({isolate}, {v8_value}, {variable_name}, exceptionState)'
     elif idl_type.is_callback_function:
         cpp_expression_format = (
-            '{idl_type}::create(ScriptState::current({isolate}), {v8_value})')
+            '{idl_type}::Create(ScriptState::Current({isolate}), {v8_value})')
     elif idl_type.v8_conversion_needs_exception_state:
         # Effectively, this if branch means everything with v8_conversion_needs_exception_state == True
         # except for unions, sequences and dictionary interfaces.
         base_idl_type = native_value_traits_type_name(idl_type)
         cpp_expression_format = (
-            'NativeValueTraits<{idl_type}>::nativeValue({isolate}, {arguments})')
+            'NativeValueTraits<{idl_type}>::NativeValue({isolate}, {arguments})')
     else:
         cpp_expression_format = (
             'V8{idl_type}::toImplWithTypeCheck({isolate}, {v8_value})')
@@ -632,7 +633,7 @@ def v8_value_to_cpp_value_array_or_sequence(native_array_element_type, v8_value,
     if (native_array_element_type.is_interface_type and
         native_array_element_type.name != 'Dictionary'):
         this_cpp_type = None
-        expression_format = 'toMemberNativeArray<{native_array_element_type}>({v8_value}, {index}, {isolate}, exceptionState)'
+        expression_format = 'ToMemberNativeArray<{native_array_element_type}>({v8_value}, {index}, {isolate}, exceptionState)'
     else:
         this_cpp_type = native_array_element_type.cpp_type
         if native_array_element_type.is_dictionary or native_array_element_type.is_union_type:
@@ -641,11 +642,11 @@ def v8_value_to_cpp_value_array_or_sequence(native_array_element_type, v8_value,
             vector_type = 'Vector'
         if native_array_element_type.is_primitive_type:
             value_type = native_value_traits_type_name(native_array_element_type)
-            expression_format = ('toImplArray<%s<{cpp_type}>, %s>'
+            expression_format = ('ToImplArray<%s<{cpp_type}>, %s>'
                                  '({v8_value}, {index}, {isolate}, '
                                  'exceptionState)' % (vector_type, value_type))
         else:
-            expression_format = ('toImplArray<%s<{cpp_type}>>'
+            expression_format = ('ToImplArray<%s<{cpp_type}>>'
                                  '({v8_value}, {index}, {isolate}, '
                                  'exceptionState)' % vector_type)
 
@@ -677,7 +678,7 @@ def v8_value_to_local_cpp_value(idl_type, extended_attributes, v8_value, variabl
     if idl_type.is_string_type or idl_type.v8_conversion_needs_exception_state:
         # Types for which conversion can fail and that need error handling.
 
-        check_expression = 'exceptionState.hadException()'
+        check_expression = 'exceptionState.HadException()'
 
         if idl_type.is_dictionary or idl_type.is_union_type:
             set_expression = cpp_value
@@ -689,9 +690,9 @@ def v8_value_to_local_cpp_value(idl_type, extended_attributes, v8_value, variabl
             # as the condition here would be wrong.
             if not idl_type.v8_conversion_needs_exception_state:
                 if use_exception_state:
-                    check_expression = '!%s.prepare(exceptionState)' % variable_name
+                    check_expression = '!%s.Prepare(exceptionState)' % variable_name
                 else:
-                    check_expression = '!%s.prepare()' % variable_name
+                    check_expression = '!%s.Prepare()' % variable_name
     elif not idl_type.v8_conversion_is_trivial and not idl_type.is_callback_function:
         return {
             'error_message': 'no V8 -> C++ conversion for IDL type: %s' % idl_type.name
@@ -767,8 +768,8 @@ def preprocess_idl_type_and_value(idl_type, cpp_value, extended_attributes):
     extended_attributes = extended_attributes or {}
     if ('Reflect' in extended_attributes and
         idl_type.base_type in ['unsigned long', 'unsigned short']):
-        cpp_value = cpp_value.replace('getUnsignedIntegralAttribute',
-                                      'getIntegralAttribute')
+        cpp_value = cpp_value.replace('GetUnsignedIntegralAttribute',
+                                      'GetIntegralAttribute')
         cpp_value = 'std::max(0, static_cast<int>(%s))' % cpp_value
     return idl_type, cpp_value
 
@@ -777,7 +778,7 @@ def v8_conversion_type(idl_type, extended_attributes):
     """Returns V8 conversion type, adding any additional includes.
 
     The V8 conversion type is used to select the C++ -> V8 conversion function
-    or v8SetReturnValue* function; it can be an idl_type, a cpp_type, or a
+    or V8SetReturnValue* function; it can be an idl_type, a cpp_type, or a
     separate name for the type of conversion (e.g., 'DOMWrapper').
     """
     extended_attributes = extended_attributes or {}
@@ -815,7 +816,7 @@ def v8_conversion_type(idl_type, extended_attributes):
         return 'Dictionary'
 
     # Data type with potential additional includes
-    if base_idl_type in V8_SET_RETURN_VALUE:  # Special v8SetReturnValue treatment
+    if base_idl_type in V8_SET_RETURN_VALUE:  # Special V8SetReturnValue treatment
         return base_idl_type
 
     # Pointer type
@@ -825,40 +826,40 @@ IdlTypeBase.v8_conversion_type = v8_conversion_type
 
 
 V8_SET_RETURN_VALUE = {
-    'boolean': 'v8SetReturnValueBool(info, {cpp_value})',
-    'DOMString': 'v8SetReturnValueString(info, {cpp_value}, info.GetIsolate())',
-    'ByteString': 'v8SetReturnValueString(info, {cpp_value}, info.GetIsolate())',
-    'USVString': 'v8SetReturnValueString(info, {cpp_value}, info.GetIsolate())',
-    'StringOrNull': 'v8SetReturnValueStringOrNull(info, {cpp_value}, info.GetIsolate())',
+    'boolean': 'V8SetReturnValueBool(info, {cpp_value})',
+    'DOMString': 'V8SetReturnValueString(info, {cpp_value}, info.GetIsolate())',
+    'ByteString': 'V8SetReturnValueString(info, {cpp_value}, info.GetIsolate())',
+    'USVString': 'V8SetReturnValueString(info, {cpp_value}, info.GetIsolate())',
+    'StringOrNull': 'V8SetReturnValueStringOrNull(info, {cpp_value}, info.GetIsolate())',
     'void': '',
-    # All the int types below are converted to (u)int32_t in the v8SetReturnValue{Int,Unsigned}() calls.
+    # All the int types below are converted to (u)int32_t in the V8SetReturnValue{Int,Unsigned}() calls.
     # The 64-bit int types have already been converted to double when V8_SET_RETURN_VALUE is used, so they are not
     # listed here.
-    'int8_t': 'v8SetReturnValueInt(info, {cpp_value})',
-    'int16_t': 'v8SetReturnValueInt(info, {cpp_value})',
-    'int32_t': 'v8SetReturnValueInt(info, {cpp_value})',
-    'uint8_t': 'v8SetReturnValueUnsigned(info, {cpp_value})',
-    'uint16_t': 'v8SetReturnValueUnsigned(info, {cpp_value})',
-    'uint32_t': 'v8SetReturnValueUnsigned(info, {cpp_value})',
-    # No special v8SetReturnValue* function (set value directly)
-    'float': 'v8SetReturnValue(info, {cpp_value})',
-    'unrestricted float': 'v8SetReturnValue(info, {cpp_value})',
-    'double': 'v8SetReturnValue(info, {cpp_value})',
-    'unrestricted double': 'v8SetReturnValue(info, {cpp_value})',
-    # No special v8SetReturnValue* function, but instead convert value to V8
-    # and then use general v8SetReturnValue.
-    'array': 'v8SetReturnValue(info, {cpp_value})',
-    'FrozenArray': 'v8SetReturnValue(info, {cpp_value})',
-    'Date': 'v8SetReturnValue(info, {cpp_value})',
-    'EventHandler': 'v8SetReturnValue(info, {cpp_value})',
-    'ScriptValue': 'v8SetReturnValue(info, {cpp_value})',
-    'SerializedScriptValue': 'v8SetReturnValue(info, {cpp_value})',
+    'int8_t': 'V8SetReturnValueInt(info, {cpp_value})',
+    'int16_t': 'V8SetReturnValueInt(info, {cpp_value})',
+    'int32_t': 'V8SetReturnValueInt(info, {cpp_value})',
+    'uint8_t': 'V8SetReturnValueUnsigned(info, {cpp_value})',
+    'uint16_t': 'V8SetReturnValueUnsigned(info, {cpp_value})',
+    'uint32_t': 'V8SetReturnValueUnsigned(info, {cpp_value})',
+    # No special V8SetReturnValue* function (set value directly)
+    'float': 'V8SetReturnValue(info, {cpp_value})',
+    'unrestricted float': 'V8SetReturnValue(info, {cpp_value})',
+    'double': 'V8SetReturnValue(info, {cpp_value})',
+    'unrestricted double': 'V8SetReturnValue(info, {cpp_value})',
+    # No special V8SetReturnValue* function, but instead convert value to V8
+    # and then use general V8SetReturnValue.
+    'array': 'V8SetReturnValue(info, {cpp_value})',
+    'FrozenArray': 'V8SetReturnValue(info, {cpp_value})',
+    'Date': 'V8SetReturnValue(info, {cpp_value})',
+    'EventHandler': 'V8SetReturnValue(info, {cpp_value})',
+    'ScriptValue': 'V8SetReturnValue(info, {cpp_value})',
+    'SerializedScriptValue': 'V8SetReturnValue(info, {cpp_value})',
     # Records.
-    'Record': 'v8SetReturnValue(info, ToV8({cpp_value}, info.Holder(), info.GetIsolate()))',
+    'Record': 'V8SetReturnValue(info, ToV8({cpp_value}, info.Holder(), info.GetIsolate()))',
     # DOMWrapper
-    'DOMWrapperForMainWorld': 'v8SetReturnValueForMainWorld(info, {cpp_value})',
-    'DOMWrapperFast': 'v8SetReturnValueFast(info, {cpp_value}, {script_wrappable})',
-    'DOMWrapperDefault': 'v8SetReturnValue(info, {cpp_value})',
+    'DOMWrapperForMainWorld': 'V8SetReturnValueForMainWorld(info, {cpp_value})',
+    'DOMWrapperFast': 'V8SetReturnValueFast(info, {cpp_value}, {script_wrappable})',
+    'DOMWrapperDefault': 'V8SetReturnValue(info, {cpp_value})',
     # If [CheckSecurity=ReturnValue] is specified, the returned object must be
     # wrapped in its own realm, which can be different from the realm of the
     # receiver object.
@@ -871,23 +872,23 @@ V8_SET_RETURN_VALUE = {
     # need to pass |creationContext| in for ToV8(DOMWindow*).
     # Window.frameElement is implemented with [Custom].
     'DOMWrapperAcrossContext': (
-        'v8SetReturnValue(info, ToV8({cpp_value}, ' +
+        'V8SetReturnValue(info, ToV8({cpp_value}, ' +
         'ToV8(impl->contentWindow(), v8::Local<v8::Object>(), ' +
         'info.GetIsolate()).As<v8::Object>(), info.GetIsolate()))'),
     # Note that static attributes and operations do not check whether |this| is
     # an instance of the interface nor |this|'s creation context is the same as
     # the current context.  So we must always use the current context as the
     # creation context of the DOM wrapper for the return value.
-    'DOMWrapperStatic': 'v8SetReturnValue(info, {cpp_value}, info.GetIsolate()->GetCurrentContext()->Global())',
+    'DOMWrapperStatic': 'V8SetReturnValue(info, {cpp_value}, info.GetIsolate()->GetCurrentContext()->Global())',
     # Generic dictionary type
-    'Dictionary': 'v8SetReturnValue(info, {cpp_value})',
+    'Dictionary': 'V8SetReturnValue(info, {cpp_value})',
     'DictionaryStatic': '#error not implemented yet',
     # Nullable dictionaries
-    'NullableDictionary': 'v8SetReturnValue(info, result.get())',
-    'NullableDictionaryStatic': 'v8SetReturnValue(info, result.get(), info.GetIsolate()->GetCurrentContext()->Global())',
+    'NullableDictionary': 'V8SetReturnValue(info, result.Get())',
+    'NullableDictionaryStatic': 'V8SetReturnValue(info, result.Get(), info.GetIsolate()->GetCurrentContext()->Global())',
     # Union types or dictionaries
-    'DictionaryOrUnion': 'v8SetReturnValue(info, result)',
-    'DictionaryOrUnionStatic': 'v8SetReturnValue(info, result, info.GetIsolate()->GetCurrentContext()->Global())',
+    'DictionaryOrUnion': 'V8SetReturnValue(info, result)',
+    'DictionaryOrUnionStatic': 'V8SetReturnValue(info, result, info.GetIsolate()->GetCurrentContext()->Global())',
 }
 
 
@@ -912,7 +913,7 @@ def v8_set_return_value(idl_type, cpp_value, extended_attributes=None, script_wr
     this_v8_conversion_type = idl_type.v8_conversion_type(extended_attributes)
     # SetReturn-specific overrides
     if this_v8_conversion_type in ['Date', 'EventHandler', 'ScriptValue', 'SerializedScriptValue', 'array', 'FrozenArray']:
-        # Convert value to V8 and then use general v8SetReturnValue
+        # Convert value to V8 and then use general V8SetReturnValue
         cpp_value = idl_type.cpp_value_to_v8_value(cpp_value, extended_attributes=extended_attributes)
     if this_v8_conversion_type == 'DOMWrapper':
         this_v8_conversion_type = dom_wrapper_conversion_type()
@@ -929,11 +930,11 @@ IdlTypeBase.v8_set_return_value = v8_set_return_value
 
 CPP_VALUE_TO_V8_VALUE = {
     # Built-in types
-    'Date': 'v8DateOrNaN({isolate}, {cpp_value})',
-    'DOMString': 'v8String({isolate}, {cpp_value})',
-    'ByteString': 'v8String({isolate}, {cpp_value})',
-    'USVString': 'v8String({isolate}, {cpp_value})',
-    'boolean': 'v8Boolean({cpp_value}, {isolate})',
+    'Date': 'V8DateOrNaN({isolate}, {cpp_value})',
+    'DOMString': 'V8String({isolate}, {cpp_value})',
+    'ByteString': 'V8String({isolate}, {cpp_value})',
+    'USVString': 'V8String({isolate}, {cpp_value})',
+    'boolean': 'V8Boolean({cpp_value}, {isolate})',
     # All the int types below are converted to (u)int32_t in the v8::Integer::New*() calls.
     # The 64-bit int types have already been converted to double when CPP_VALUE_TO_V8_VALUE is used, so they are not
     # listed here.
@@ -948,20 +949,20 @@ CPP_VALUE_TO_V8_VALUE = {
     'double': 'v8::Number::New({isolate}, {cpp_value})',
     'unrestricted double': 'v8::Number::New({isolate}, {cpp_value})',
     'void': 'v8Undefined()',
-    'StringOrNull': '{cpp_value}.isNull() ? v8::Local<v8::Value>(v8::Null({isolate})) : v8String({isolate}, {cpp_value})',
+    'StringOrNull': '{cpp_value}.IsNull() ? v8::Local<v8::Value>(v8::Null({isolate})) : V8String({isolate}, {cpp_value})',
     # Special cases
-    'Dictionary': '{cpp_value}.v8Value()',
+    'Dictionary': '{cpp_value}.V8Value()',
     'EventHandler': (
         '{cpp_value} ? ' +
-        'V8AbstractEventListener::cast({cpp_value})->getListenerOrNull(' +
-        '{isolate}, impl->getExecutionContext()) : ' +
+        'V8AbstractEventListener::Cast({cpp_value})->GetListenerOrNull(' +
+        '{isolate}, impl->GetExecutionContext()) : ' +
         'v8::Null({isolate}).As<v8::Value>()'),
     'Record': 'ToV8({cpp_value}, {creation_context}, {isolate})',
-    'ScriptValue': '{cpp_value}.v8Value()',
-    'SerializedScriptValue': 'v8Deserialize({isolate}, {cpp_value})',
+    'ScriptValue': '{cpp_value}.V8Value()',
+    'SerializedScriptValue': 'V8Deserialize({isolate}, {cpp_value})',
     # General
     'array': 'ToV8({cpp_value}, {creation_context}, {isolate})',
-    'FrozenArray': 'freezeV8Object(ToV8({cpp_value}, {creation_context}, {isolate}), {isolate})',
+    'FrozenArray': 'FreezeV8Object(ToV8({cpp_value}, {creation_context}, {isolate}), {isolate})',
     'DOMWrapper': 'ToV8({cpp_value}, {creation_context}, {isolate})',
     # Passing nullable dictionaries isn't a pattern currently used
     # anywhere in the web platform, and more work would be needed in
@@ -1035,7 +1036,7 @@ IdlArrayOrSequenceType.literal_cpp_value = array_or_sequence_literal_cpp_value
 
 def cpp_type_has_null_value(idl_type):
     # - String types (String/AtomicString) represent null as a null string,
-    #   i.e. one for which String::isNull() returns true.
+    #   i.e. one for which String::IsNull() returns true.
     # - Enum types, as they are implemented as Strings.
     # - Interface types (raw pointer or RefPtr/PassRefPtr) represent null as
     #   a null pointer.
diff --git a/third_party/WebKit/Source/bindings/scripts/v8_utilities.py b/third_party/WebKit/Source/bindings/scripts/v8_utilities.py
index dec531fd2a4f..17cb07c104d9 100644
--- a/third_party/WebKit/Source/bindings/scripts/v8_utilities.py
+++ b/third_party/WebKit/Source/bindings/scripts/v8_utilities.py
@@ -200,8 +200,8 @@ CALL_WITH_ARGUMENTS = {
     'ScriptState': 'scriptState',
     'ExecutionContext': 'executionContext',
     'ScriptArguments': 'scriptArguments',
-    'CurrentWindow': 'currentDOMWindow(info.GetIsolate())',
-    'EnteredWindow': 'enteredDOMWindow(info.GetIsolate())',
+    'CurrentWindow': 'CurrentDOMWindow(info.GetIsolate())',
+    'EnteredWindow': 'EnteredDOMWindow(info.GetIsolate())',
     'Document': 'document',
     'ThisValue': 'ScriptValue(scriptState, info.Holder())',
 }
@@ -243,16 +243,16 @@ def deprecate_as(member):
 
 # [Exposed]
 EXPOSED_EXECUTION_CONTEXT_METHOD = {
-    'AnimationWorklet': 'isAnimationWorkletGlobalScope',
-    'AudioWorklet': 'isAudioWorkletGlobalScope',
-    'CompositorWorker': 'isCompositorWorkerGlobalScope',
-    'DedicatedWorker': 'isDedicatedWorkerGlobalScope',
-    'PaintWorklet': 'isPaintWorkletGlobalScope',
-    'ServiceWorker': 'isServiceWorkerGlobalScope',
-    'SharedWorker': 'isSharedWorkerGlobalScope',
-    'Window': 'isDocument',
-    'Worker': 'isWorkerGlobalScope',
-    'Worklet': 'isWorkletGlobalScope',
+    'AnimationWorklet': 'IsAnimationWorkletGlobalScope',
+    'AudioWorklet': 'IsAudioWorkletGlobalScope',
+    'CompositorWorker': 'IsCompositorWorkerGlobalScope',
+    'DedicatedWorker': 'IsDedicatedWorkerGlobalScope',
+    'PaintWorklet': 'IsPaintWorkletGlobalScope',
+    'ServiceWorker': 'IsServiceWorkerGlobalScope',
+    'SharedWorker': 'IsSharedWorkerGlobalScope',
+    'Window': 'IsDocument',
+    'Worker': 'IsWorkerGlobalScope',
+    'Worklet': 'IsWorkletGlobalScope',
 }
 
 
@@ -344,7 +344,7 @@ def secure_context(member, interface):
     """Returns C++ code that checks whether an interface/method/attribute/etc. is exposed
     to the current context."""
     if 'SecureContext' in member.extended_attributes or 'SecureContext' in interface.extended_attributes:
-        return "executionContext->isSecureContext()"
+        return "executionContext->IsSecureContext()"
     return None
 
 
@@ -478,9 +478,9 @@ def on_instance(interface, member):
     if member.is_static:
         return False
 
-    # TODO(yukishiino): Remove a hack for toString once we support
-    # Symbol.toStringTag.
-    if (interface.name == 'Window' and member.name == 'toString'):
+    # TODO(yukishiino): Remove a hack for ToString once we support
+    # Symbol.ToStringTag.
+    if interface.name == 'Window' and member.name == 'ToString':
         return False
 
     # TODO(yukishiino): Implement "interface object" and its [[Call]] method
@@ -624,7 +624,7 @@ def named_property_getter(interface):
             if ('getter' in method.specials and
                 len(method.arguments) == 1 and
                 str(method.arguments[0].idl_type) == 'DOMString'))
-        getter.name = getter.name or 'anonymousNamedGetter'
+        getter.name = getter.name or 'AnonymousNamedGetter'
         return getter
     except StopIteration:
         return None
diff --git a/third_party/WebKit/Source/bindings/templates/attributes.cpp.tmpl b/third_party/WebKit/Source/bindings/templates/attributes.cpp.tmpl
index a43b7d2bd2fc..87ee2a8f6f49 100644
--- a/third_party/WebKit/Source/bindings/templates/attributes.cpp.tmpl
+++ b/third_party/WebKit/Source/bindings/templates/attributes.cpp.tmpl
@@ -10,7 +10,7 @@ const v8::FunctionCallbackInfo<v8::Value>& info
 {%- endif %}) {
   {% filter format_remove_duplicates(['ExceptionState exceptionState']) %}
   {% set define_exception_state -%}
-  ExceptionState exceptionState(info.GetIsolate(), ExceptionState::GetterContext, "{{interface_name}}", "{{attribute.name}}");
+  ExceptionState exceptionState(info.GetIsolate(), ExceptionState::kGetterContext, "{{interface_name}}", "{{attribute.name}}");
   {%- endset %}
 
   {% if attribute.is_lenient_this %}
@@ -28,15 +28,15 @@ const v8::FunctionCallbackInfo<v8::Value>& info
   // [SaveSameObject]
   {% set same_object_private_key = interface_name + attribute.name[0]|capitalize + attribute.name[1:] %}
   // If you see a compile error that
-  //   V8PrivateProperty::getSameObject{{same_object_private_key}}
+  //   V8PrivateProperty::GetSameObject{{same_object_private_key}}
   // is not defined, then you need to register your attribute at
   // V8_PRIVATE_PROPERTY_FOR_EACH defined in V8PrivateProperty.h as
   //   X(SameObject, {{same_object_private_key}})
-  auto privateSameObject = V8PrivateProperty::getSameObject{{same_object_private_key}}(info.GetIsolate());
+  auto privateSameObject = V8PrivateProperty::GetSameObject{{same_object_private_key}}(info.GetIsolate());
   {
-    v8::Local<v8::Value> v8Value = privateSameObject.getOrEmpty(holder);
+    v8::Local<v8::Value> v8Value = privateSameObject.GetOrEmpty(holder);
     if (!v8Value.IsEmpty()) {
-      v8SetReturnValue(info, v8Value);
+      V8SetReturnValue(info, v8Value);
       return;
     }
   }
@@ -51,7 +51,7 @@ const v8::FunctionCallbackInfo<v8::Value>& info
   // Same-origin attribute getters are never exposed via the cross-origin
   // interceptors. Since same-origin access requires a LocalDOMWindow, it is
   // safe to downcast here.
-  LocalDOMWindow* impl = toLocalDOMWindow({{v8_class}}::toImpl(holder));
+  LocalDOMWindow* impl = ToLocalDOMWindow({{v8_class}}::toImpl(holder));
   {% endif %}{# attribute.is_check_security_for_receiver #}
   {% else %}
   {{cpp_class}}* impl = {{v8_class}}::toImpl(holder);
@@ -61,12 +61,12 @@ const v8::FunctionCallbackInfo<v8::Value>& info
   {% if attribute.cached_attribute_validation_method %}
   // [CachedAttribute]
   V8PrivateProperty::Symbol propertySymbol =
-      V8PrivateProperty::getSymbol(info.GetIsolate(),
+      V8PrivateProperty::GetSymbol(info.GetIsolate(),
           "{{cpp_class}}#{{attribute.name.capitalize()}}");
   if (!impl->{{attribute.cached_attribute_validation_method}}()) {
-    v8::Local<v8::Value> v8Value = propertySymbol.getOrUndefined(holder);
+    v8::Local<v8::Value> v8Value = propertySymbol.GetOrUndefined(holder);
     if (!v8Value->IsUndefined()) {
-      v8SetReturnValue(info, v8Value);
+      V8SetReturnValue(info, v8Value);
       return;
     }
   }
@@ -76,35 +76,35 @@ const v8::FunctionCallbackInfo<v8::Value>& info
   // Perform a security check for the receiver object.
   {{define_exception_state}}
   {% if local_dom_window_only %}
-  if (!BindingSecurity::shouldAllowAccessTo(currentDOMWindow(info.GetIsolate()), uncheckedImpl, exceptionState)) {
+  if (!BindingSecurity::ShouldAllowAccessTo(CurrentDOMWindow(info.GetIsolate()), uncheckedImpl, exceptionState)) {
   {% else %}
-  if (!BindingSecurity::shouldAllowAccessTo(currentDOMWindow(info.GetIsolate()), impl, exceptionState)) {
+  if (!BindingSecurity::ShouldAllowAccessTo(CurrentDOMWindow(info.GetIsolate()), impl, exceptionState)) {
   {% endif %}{# local_dom_window_only #}
-    v8SetReturnValueNull(info);
+    V8SetReturnValueNull(info);
     return;
   }
   {% if local_dom_window_only %}
-  LocalDOMWindow* impl = toLocalDOMWindow(uncheckedImpl);
+  LocalDOMWindow* impl = ToLocalDOMWindow(uncheckedImpl);
   {% endif %}{# local_dom_window_only #}
   {% endif %}
 
   {% if attribute.is_check_security_for_return_value %}
   // Perform a security check for the returned object.
   {{define_exception_state}}
-  if (!BindingSecurity::shouldAllowAccessTo(currentDOMWindow(info.GetIsolate()), {{attribute.cpp_value}}, exceptionState)) {
-    v8SetReturnValueNull(info);
+  if (!BindingSecurity::ShouldAllowAccessTo(CurrentDOMWindow(info.GetIsolate()), {{attribute.cpp_value}}, exceptionState)) {
+    V8SetReturnValueNull(info);
     return;
   }
   {% endif %}
 
   {% if attribute.is_call_with_execution_context %}
-  ExecutionContext* executionContext = currentExecutionContext(info.GetIsolate());
+  ExecutionContext* executionContext = CurrentExecutionContext(info.GetIsolate());
   {% endif %}
   {% if attribute.is_call_with_script_state %}
   {% if attribute.is_static %}
-  ScriptState* scriptState = ScriptState::forFunctionObject(info);
+  ScriptState* scriptState = ScriptState::ForFunctionObject(info);
   {% else %}
-  ScriptState* scriptState = ScriptState::forReceiverObject(info);
+  ScriptState* scriptState = ScriptState::ForReceiverObject(info);
   {% endif %}
   {% endif %}
   {% if attribute.is_getter_raises_exception %}
@@ -124,7 +124,7 @@ const v8::FunctionCallbackInfo<v8::Value>& info
   {% endif %}
 
   {% if attribute.is_getter_raises_exception %}
-  if (UNLIKELY(exceptionState.hadException()))
+  if (UNLIKELY(exceptionState.HadException()))
     return;
   {% endif %}
 
@@ -138,12 +138,12 @@ const v8::FunctionCallbackInfo<v8::Value>& info
   {% if attribute.cached_attribute_validation_method %}
   // [CachedAttribute]
   v8::Local<v8::Value> v8Value({{attribute.cpp_value_to_v8_value}});
-  propertySymbol.set(holder, v8Value);
+  propertySymbol.Set(holder, v8Value);
   {% endif %}
 
   {% if attribute.is_explicit_nullable %}
   if (isNull) {
-    v8SetReturnValueNull(info);
+    V8SetReturnValueNull(info);
     return;
   }
   {% endif %}
@@ -151,12 +151,12 @@ const v8::FunctionCallbackInfo<v8::Value>& info
   {% if attribute.is_keep_alive_for_gc %}
   // Keep the wrapper object for the return value alive as long as |this|
   // object is alive in order to save creation time of the wrapper object.
-  if ({{attribute.cpp_value}} && DOMDataStore::setReturnValue{{world_suffix}}(info.GetReturnValue(), {{attribute.cpp_value}}))
+  if ({{attribute.cpp_value}} && DOMDataStore::SetReturnValue{{world_suffix}}(info.GetReturnValue(), {{attribute.cpp_value}}))
     return;
   v8::Local<v8::Value> v8Value(ToV8({{attribute.cpp_value}}, holder, info.GetIsolate()));
-  V8PrivateProperty::getSymbol(
+  V8PrivateProperty::GetSymbol(
       info.GetIsolate(), "KeepAlive#{{interface_name}}#{{attribute.name}}")
-      .set(holder, v8Value);
+      .Set(holder, v8Value);
   {% endif %}
 
   {% if world_suffix %}
@@ -167,7 +167,7 @@ const v8::FunctionCallbackInfo<v8::Value>& info
 
   {% if attribute.is_save_same_object %}
   // [SaveSameObject]
-  privateSameObject.set(holder, info.GetReturnValue().Get());
+  privateSameObject.Set(holder, info.GetReturnValue().Get());
   {% endif %}
   {% endfilter %}{# format_remove_duplicates #}
 }
@@ -181,16 +181,16 @@ const v8::FunctionCallbackInfo<v8::Value>& info
    one of those. If not, set it to the empty string.
    http://www.whatwg.org/specs/web-apps/current-work/#limited-to-only-known-values #}
 {% if reflect_empty %}
-if ({{cpp_value}}.isNull()) {
+if ({{cpp_value}}.IsNull()) {
 {% if reflect_missing %}
   {{cpp_value}} = "{{reflect_missing}}";
 {% else %}
   ;
 {% endif %}
-} else if ({{cpp_value}}.isEmpty()) {
+} else if ({{cpp_value}}.IsEmpty()) {
   {{cpp_value}} = "{{reflect_empty}}";
 {% else %}
-if ({{cpp_value}}.isEmpty()) {
+if ({{cpp_value}}.IsEmpty()) {
 {# FIXME: should use [ReflectEmpty] instead; need to change IDL files #}
 {% if reflect_missing %}
   {{cpp_value}} = "{{reflect_missing}}";
@@ -199,7 +199,7 @@ if ({{cpp_value}}.isEmpty()) {
 {% endif %}
 {% endif %}
 {% for value in reflect_only_values %}
-} else if (equalIgnoringASCIICase({{cpp_value}}, "{{value}}")) {
+} else if (EqualIgnoringASCIICase({{cpp_value}}, "{{value}}")) {
   {{cpp_value}} = "{{value}}";
 {% endfor %}
 } else {
@@ -217,26 +217,26 @@ v8::Local<v8::Name>, const v8::PropertyCallbackInfo<v8::Value>& info
 const v8::FunctionCallbackInfo<v8::Value>& info
 {%- endif %}) {
   {% if attribute.deprecate_as %}
-  Deprecation::countDeprecation(currentExecutionContext(info.GetIsolate()), UseCounter::{{attribute.deprecate_as}});
+  Deprecation::CountDeprecation(CurrentExecutionContext(info.GetIsolate()), UseCounter::k{{attribute.deprecate_as}});
   {% endif %}
 
   {% if attribute.measure_as %}
-  UseCounter::count(currentExecutionContext(info.GetIsolate()), UseCounter::{{attribute.measure_as('AttributeGetter')}});
+  UseCounter::Count(CurrentExecutionContext(info.GetIsolate()), UseCounter::k{{attribute.measure_as('AttributeGetter')}});
   {% endif %}
 
   {% if world_suffix in attribute.activity_logging_world_list_for_getter %}
   {% if attribute.is_static %}
-  ScriptState* scriptState = ScriptState::forFunctionObject(info);
+  ScriptState* scriptState = ScriptState::ForFunctionObject(info);
   {% else %}
-  ScriptState* scriptState = ScriptState::forReceiverObject(info);
+  ScriptState* scriptState = ScriptState::ForReceiverObject(info);
   {% endif %}
-  V8PerContextData* contextData = scriptState->perContextData();
+  V8PerContextData* contextData = scriptState->PerContextData();
   if (
   {%- if attribute.activity_logging_world_check -%}
-      scriptState->world().isIsolatedWorld() && {# one space at the end #}
+      scriptState->World().IsIsolatedWorld() && {# one space at the end #}
   {%- endif -%}
-      contextData && contextData->activityLogger()) {
-    contextData->activityLogger()->logGetter("{{interface_name}}.{{attribute.name}}");
+      contextData && contextData->ActivityLogger()) {
+    contextData->ActivityLogger()->LogGetter("{{interface_name}}.{{attribute.name}}");
   }
   {% endif %}
 
@@ -253,7 +253,7 @@ const v8::FunctionCallbackInfo<v8::Value>& info
 {% macro attribute_cached_property_key(attribute) %}
 v8::Local<v8::Private> {{v8_class_or_partial}}::{{attribute.name}}CachedPropertyKey(v8::Isolate* isolate)
 {
-  return V8PrivateProperty::get{{attribute.cached_accessor_name}}(isolate).getPrivate();
+  return V8PrivateProperty::Get{{attribute.cached_accessor_name}}(isolate).GetPrivate();
 }
 {% endmacro %}
 
@@ -262,14 +262,14 @@ v8::Local<v8::Private> {{v8_class_or_partial}}::{{attribute.name}}CachedProperty
 {% macro constructor_getter_callback(attribute, world_suffix) %}
 void {{v8_class_or_partial}}::{{attribute.name}}ConstructorGetterCallback{{world_suffix}}(v8::Local<v8::Name> property, const v8::PropertyCallbackInfo<v8::Value>& info) {
   {% if attribute.deprecate_as %}
-  Deprecation::countDeprecation(currentExecutionContext(info.GetIsolate()), UseCounter::{{attribute.deprecate_as}});
+  Deprecation::CountDeprecation(CurrentExecutionContext(info.GetIsolate()), UseCounter::k{{attribute.deprecate_as}});
   {% endif %}
 
   {% if attribute.measure_as %}
-  UseCounter::count(currentExecutionContext(info.GetIsolate()), UseCounter::{{attribute.measure_as('ConstructorGetter')}});
+  UseCounter::Count(CurrentExecutionContext(info.GetIsolate()), UseCounter::k{{attribute.measure_as('ConstructorGetter')}});
   {% endif %}
 
-  v8ConstructorAttributeGetter(property, info);
+  V8ConstructorAttributeGetter(property, info);
 }
 {% endmacro %}
 
@@ -289,7 +289,7 @@ v8::Local<v8::Value> v8Value, const v8::FunctionCallbackInfo<v8::Value>& info
   ALLOW_UNUSED_LOCAL(isolate);
 
   {% set define_exception_state -%}
-  ExceptionState exceptionState(isolate, ExceptionState::SetterContext, "{{interface_name}}", "{{attribute.name}}");
+  ExceptionState exceptionState(isolate, ExceptionState::kSetterContext, "{{interface_name}}", "{{attribute.name}}");
   {%- endset %}
 
   {% if attribute.is_lenient_this %}
@@ -303,7 +303,7 @@ v8::Local<v8::Value> v8Value, const v8::FunctionCallbackInfo<v8::Value>& info
   v8::Local<v8::Object> holder = info.Holder();
   {% if attribute.is_put_forwards %}
   {{cpp_class}}* proxyImpl = {{v8_class}}::toImpl(holder);
-  {{attribute.cpp_type}} impl = WTF::getPtr(proxyImpl->{{attribute.name}}());
+  {{attribute.cpp_type}} impl = WTF::GetPtr(proxyImpl->{{attribute.name}}());
   if (!impl)
     return;
   {% else %}
@@ -315,7 +315,7 @@ v8::Local<v8::Value> v8Value, const v8::FunctionCallbackInfo<v8::Value>& info
   // Same-origin attributes setters are never exposed via the cross-origin
   // interceptors. Since same-origin access requires a LocalDOMWindow, it is
   // safe to downcast here.
-  LocalDOMWindow* impl = toLocalDOMWindow({{v8_class}}::toImpl(holder));
+  LocalDOMWindow* impl = ToLocalDOMWindow({{v8_class}}::toImpl(holder));
   {% endif %}{# attribute.is_check_security_for_receiver #}
   {% else %}
   {{cpp_class}}* impl = {{v8_class}}::toImpl(holder);
@@ -327,15 +327,15 @@ v8::Local<v8::Value> v8Value, const v8::FunctionCallbackInfo<v8::Value>& info
   // Perform a security check for the receiver object.
   {{define_exception_state}}
   {% if local_dom_window_only %}
-  if (!BindingSecurity::shouldAllowAccessTo(currentDOMWindow(isolate), uncheckedImpl, exceptionState)) {
+  if (!BindingSecurity::ShouldAllowAccessTo(CurrentDOMWindow(isolate), uncheckedImpl, exceptionState)) {
   {% else %}
-  if (!BindingSecurity::shouldAllowAccessTo(currentDOMWindow(isolate), impl, exceptionState)) {
+  if (!BindingSecurity::ShouldAllowAccessTo(CurrentDOMWindow(isolate), impl, exceptionState)) {
   {% endif %}{# local_dom_window_only #}
-    v8SetReturnValue(info, v8Value);
+    V8SetReturnValue(info, v8Value);
     return;
   }
   {% if local_dom_window_only %}
-  LocalDOMWindow* impl = toLocalDOMWindow(uncheckedImpl);
+  LocalDOMWindow* impl = ToLocalDOMWindow(uncheckedImpl);
   {% endif %}{# local_dom_window_only #}
   {% endif %}
 
@@ -356,7 +356,7 @@ v8::Local<v8::Value> v8Value, const v8::FunctionCallbackInfo<v8::Value>& info
   // Prepare the value to be set.
   {% if attribute.idl_type == 'EventHandler' %}
   {% if not is_node %}
-  moveEventListenerToNewWrapper(isolate, holder, {{attribute.event_handler_getter_expression}}, v8Value, {{v8_class}}::eventListenerCacheIndex);
+  MoveEventListenerToNewWrapper(isolate, holder, {{attribute.event_handler_getter_expression}}, v8Value, {{v8_class}}::eventListenerCacheIndex);
   {% endif %}
   {% else %}{# not EventHandler #}
   {{v8_value_to_local_cpp_value(attribute) | indent(2)}}
@@ -364,8 +364,8 @@ v8::Local<v8::Value> v8Value, const v8::FunctionCallbackInfo<v8::Value>& info
 
   {% if attribute.has_type_checking_interface %}
   // Type check per: http://heycam.github.io/webidl/#es-interface
-  if (!cppValue{% if attribute.is_nullable %} && !isUndefinedOrNull(v8Value){% endif %}) {
-    exceptionState.throwTypeError("The provided value is not of type '{{attribute.idl_type}}'.");
+  if (!cppValue{% if attribute.is_nullable %} && !IsUndefinedOrNull(v8Value){% endif %}) {
+    exceptionState.ThrowTypeError("The provided value is not of type '{{attribute.idl_type}}'.");
     return;
   }
   {% endif %}
@@ -375,35 +375,35 @@ v8::Local<v8::Value> v8Value, const v8::FunctionCallbackInfo<v8::Value>& info
   // Returns undefined without setting the value if the value is invalid.
   DummyExceptionStateForTesting dummyExceptionState;
   {{declare_enum_validation_variable(attribute.enum_values) | indent(2)}}
-  if (!isValidEnum(cppValue, validValues, WTF_ARRAY_LENGTH(validValues), "{{attribute.enum_type}}", dummyExceptionState)) {
-    currentExecutionContext(isolate)->addConsoleMessage(ConsoleMessage::create(JSMessageSource, WarningMessageLevel, dummyExceptionState.message()));
+  if (!IsValidEnum(cppValue, validValues, WTF_ARRAY_LENGTH(validValues), "{{attribute.enum_type}}", dummyExceptionState)) {
+    CurrentExecutionContext(isolate)->AddConsoleMessage(ConsoleMessage::Create(kJSMessageSource, kWarningMessageLevel, dummyExceptionState.Message()));
     return;
   }
   {% endif %}
 
   {% if attribute.is_call_with_execution_context or attribute.is_setter_call_with_execution_context %}
-  ExecutionContext* executionContext = currentExecutionContext(isolate);
+  ExecutionContext* executionContext = CurrentExecutionContext(isolate);
   {% endif %}
 
   {% if attribute.is_call_with_script_state %}
   {% if attribute.is_static %}
-  ScriptState* scriptState = ScriptState::forFunctionObject(info);
+  ScriptState* scriptState = ScriptState::ForFunctionObject(info);
   {% else %}
-  ScriptState* scriptState = ScriptState::forReceiverObject(info);
+  ScriptState* scriptState = ScriptState::ForReceiverObject(info);
   {% endif %}
   {% endif %}
 
   {% if attribute.is_replaceable %}
-  v8::Local<v8::String> propertyName = v8AtomicString(isolate, "{{attribute.name}}");
+  v8::Local<v8::String> propertyName = V8AtomicString(isolate, "{{attribute.name}}");
   {% endif %}
   {{attribute.cpp_setter}};
 
   {% if attribute.cached_attribute_validation_method %}
   // [CachedAttribute]
   // Invalidate the cached value.
-  V8PrivateProperty::getSymbol(
+  V8PrivateProperty::GetSymbol(
       isolate, "{{cpp_class}}#{{attribute.name.capitalize()}}")
-      .deleteProperty(holder, v8::Undefined(isolate));
+      .DeleteProperty(holder, v8::Undefined(isolate));
   {% endif %}
 }
 {% endfilter %}{# format_remove_duplicates #}
@@ -423,26 +423,26 @@ const v8::FunctionCallbackInfo<v8::Value>& info
   {% endif %}
 
   {% if attribute.deprecate_as %}
-  Deprecation::countDeprecation(currentExecutionContext(info.GetIsolate()), UseCounter::{{attribute.deprecate_as}});
+  Deprecation::CountDeprecation(CurrentExecutionContext(info.GetIsolate()), UseCounter::k{{attribute.deprecate_as}});
   {% endif %}
 
   {% if attribute.measure_as %}
-  UseCounter::count(currentExecutionContext(info.GetIsolate()), UseCounter::{{attribute.measure_as('AttributeSetter')}});
+  UseCounter::Count(CurrentExecutionContext(info.GetIsolate()), UseCounter::k{{attribute.measure_as('AttributeSetter')}});
   {% endif %}
 
   {% if world_suffix in attribute.activity_logging_world_list_for_setter %}
   {% if attribute.is_static %}
-  ScriptState* scriptState = ScriptState::forFunctionObject(info);
+  ScriptState* scriptState = ScriptState::ForFunctionObject(info);
   {% else %}
-  ScriptState* scriptState = ScriptState::forReceiverObject(info);
+  ScriptState* scriptState = ScriptState::ForReceiverObject(info);
   {% endif %}
-  V8PerContextData* contextData = scriptState->perContextData();
+  V8PerContextData* contextData = scriptState->PerContextData();
   if (
   {%- if attribute.activity_logging_world_check -%}
-      scriptState->world().isIsolatedWorld() && {# one space at the end #}
+      scriptState->World().IsIsolatedWorld() && {# one space at the end #}
   {%- endif -%}
-      contextData && contextData->activityLogger()) {
-    contextData->activityLogger()->logSetter("{{interface_name}}.{{attribute.name}}", v8Value);
+      contextData && contextData->ActivityLogger()) {
+    contextData->ActivityLogger()->LogSetter("{{interface_name}}.{{attribute.name}}", v8Value);
   }
   {% endif %}
 
@@ -473,7 +473,7 @@ const v8::FunctionCallbackInfo<v8::Value>& info
     {% set getter_callback = '%s::%sConstructorGetterCallback' % (v8_class_or_partial, attribute.name) %}
   {% else %}
     {% set getter_callback = 'V8%s::NamedConstructorAttributeGetter' % (attribute.constructor_type)
-       if attribute.is_named_constructor else 'v8ConstructorAttributeGetter' %}
+       if attribute.is_named_constructor else 'V8ConstructorAttributeGetter' %}
   {% endif %}
 {% set setter_callback = 'nullptr' %}
 {% else %}{# regular attributes #}
@@ -492,17 +492,17 @@ const v8::FunctionCallbackInfo<v8::Value>& info
        '%s::%sCachedPropertyKey' % (v8_class_or_partial, attribute.name)
        if attribute.is_cached_accessor else
        'nullptr' %}
-{% set holder_check = 'V8DOMConfiguration::DoNotCheckHolder'
-       if attribute.is_lenient_this else 'V8DOMConfiguration::CheckHolder' %}
+{% set holder_check = 'V8DOMConfiguration::kDoNotCheckHolder'
+       if attribute.is_lenient_this else 'V8DOMConfiguration::kCheckHolder' %}
 {% if attribute.is_per_world_bindings %}
 {% set getter_callback_for_main_world = '%sForMainWorld' % getter_callback %}
 {% set setter_callback_for_main_world =
        '%sForMainWorld' % setter_callback
        if attribute.has_setter else 'nullptr' %}
-{"{{attribute.name}}", {{getter_callback_for_main_world}}, {{setter_callback_for_main_world}}, {{cached_accessor_callback}}, {{wrapper_type_info}}, {{property_attribute}}, {{property_location(attribute)}}, {{holder_check}}, V8DOMConfiguration::MainWorld},
-{"{{attribute.name}}", {{getter_callback}}, {{setter_callback}}, {{cached_accessor_callback}}, {{wrapper_type_info}}, {{property_attribute}}, {{property_location(attribute)}}, {{holder_check}}, V8DOMConfiguration::NonMainWorlds}
+{"{{attribute.name}}", {{getter_callback_for_main_world}}, {{setter_callback_for_main_world}}, {{cached_accessor_callback}}, {{wrapper_type_info}}, {{property_attribute}}, {{property_location(attribute)}}, {{holder_check}}, V8DOMConfiguration::kMainWorld},
+{"{{attribute.name}}", {{getter_callback}}, {{setter_callback}}, {{cached_accessor_callback}}, {{wrapper_type_info}}, {{property_attribute}}, {{property_location(attribute)}}, {{holder_check}}, V8DOMConfiguration::kNonMainWorlds}
 {%- else %}
-{"{{attribute.name}}", {{getter_callback}}, {{setter_callback}}, {{cached_accessor_callback}}, {{wrapper_type_info}}, {{property_attribute}}, {{property_location(attribute)}}, {{holder_check}}, V8DOMConfiguration::AllWorlds}
+{"{{attribute.name}}", {{getter_callback}}, {{setter_callback}}, {{cached_accessor_callback}}, {{wrapper_type_info}}, {{property_attribute}}, {{property_location(attribute)}}, {{holder_check}}, V8DOMConfiguration::kAllWorlds}
 {%- endif %}
 {%- endmacro %}
 
@@ -516,7 +516,7 @@ static const V8DOMConfiguration::AccessorConfiguration accessorConfiguration[] =
   {{attribute_configuration(attribute)}}
 };
 for (const auto& accessorConfig : accessorConfiguration)
-  V8DOMConfiguration::installAccessor(isolate, world, v8::Local<v8::Object>(), prototypeObject, interfaceObject, signature, accessorConfig);
+  V8DOMConfiguration::InstallAccessor(isolate, world, v8::Local<v8::Object>(), prototypeObject, interfaceObject, signature, accessorConfig);
 {% endfilter %}{# runtime_enabled #}
 {% endfilter %}{# secure_context #}
 {% endfilter %}{# exposed #}
diff --git a/third_party/WebKit/Source/bindings/templates/callback_function.cpp.tmpl b/third_party/WebKit/Source/bindings/templates/callback_function.cpp.tmpl
index 8390f85535d9..16735eb1a9fd 100644
--- a/third_party/WebKit/Source/bindings/templates/callback_function.cpp.tmpl
+++ b/third_party/WebKit/Source/bindings/templates/callback_function.cpp.tmpl
@@ -12,43 +12,43 @@
 namespace blink {
 
 // static
-{{cpp_class}}* {{cpp_class}}::create(ScriptState* scriptState, v8::Local<v8::Value> callback) {
-  if (isUndefinedOrNull(callback))
+{{cpp_class}}* {{cpp_class}}::Create(ScriptState* scriptState, v8::Local<v8::Value> callback) {
+  if (IsUndefinedOrNull(callback))
     return nullptr;
   return new {{cpp_class}}(scriptState, v8::Local<v8::Function>::Cast(callback));
 }
 
 {{cpp_class}}::{{cpp_class}}(ScriptState* scriptState, v8::Local<v8::Function> callback)
     : m_scriptState(scriptState),
-    m_callback(scriptState->isolate(), this, callback) {
-  DCHECK(!m_callback.isEmpty());
+    m_callback(scriptState->GetIsolate(), this, callback) {
+  DCHECK(!m_callback.IsEmpty());
 }
 
 DEFINE_TRACE_WRAPPERS({{cpp_class}}) {
-  visitor->traceWrappers(m_callback.cast<v8::Value>());
+  visitor->TraceWrappers(m_callback.Cast<v8::Value>());
 }
 
 bool {{cpp_class}}::call({{argument_declarations | join(', ')}}) {
-  if (m_callback.isEmpty())
+  if (m_callback.IsEmpty())
     return false;
 
-  if (!m_scriptState->contextIsValid())
+  if (!m_scriptState->ContextIsValid())
     return false;
 
-  ExecutionContext* context = m_scriptState->getExecutionContext();
+  ExecutionContext* context = m_scriptState->GetExecutionContext();
   DCHECK(context);
-  if (context->isContextSuspended() || context->isContextDestroyed())
+  if (context->IsContextSuspended() || context->IsContextDestroyed())
     return false;
 
   // TODO(bashi): Make sure that using DummyExceptionStateForTesting is OK.
   // crbug.com/653769
   DummyExceptionStateForTesting exceptionState;
-  ScriptState::Scope scope(m_scriptState.get());
-  v8::Isolate* isolate = m_scriptState->isolate();
+  ScriptState::Scope scope(m_scriptState.Get());
+  v8::Isolate* isolate = m_scriptState->GetIsolate();
 
   v8::Local<v8::Value> thisValue = ToV8(
       scriptWrappable,
-      m_scriptState->context()->Global(),
+      m_scriptState->GetContext()->Global(),
       isolate);
 
   {% for argument in arguments %}
@@ -64,7 +64,7 @@ bool {{cpp_class}}::call({{argument_declarations | join(', ')}}) {
   exceptionCatcher.SetVerbose(true);
 
   v8::Local<v8::Value> v8ReturnValue;
-  if (!V8ScriptRunner::callFunction(m_callback.newLocal(isolate),
+  if (!V8ScriptRunner::CallFunction(m_callback.NewLocal(isolate),
                                     context,
                                     thisValue,
                                     {{arguments | length}},
@@ -80,10 +80,10 @@ bool {{cpp_class}}::call({{argument_declarations | join(', ')}}) {
   return true;
 }
 
-{{cpp_class}}* NativeValueTraits<{{cpp_class}}>::nativeValue(v8::Isolate* isolate, v8::Local<v8::Value> value, ExceptionState& exceptionState) {
-  {{cpp_class}}* nativeValue = {{cpp_class}}::create(ScriptState::current(isolate), value);
+{{cpp_class}}* NativeValueTraits<{{cpp_class}}>::NativeValue(v8::Isolate* isolate, v8::Local<v8::Value> value, ExceptionState& exceptionState) {
+  {{cpp_class}}* nativeValue = {{cpp_class}}::Create(ScriptState::Current(isolate), value);
   if (!nativeValue)
-    exceptionState.throwTypeError("Unable to convert value to {{callback_function_name}}.");
+    exceptionState.ThrowTypeError("Unable to convert value to {{callback_function_name}}.");
   return nativeValue;
 }
 
diff --git a/third_party/WebKit/Source/bindings/templates/callback_function.h.tmpl b/third_party/WebKit/Source/bindings/templates/callback_function.h.tmpl
index 6528813495e1..745995a5df37 100644
--- a/third_party/WebKit/Source/bindings/templates/callback_function.h.tmpl
+++ b/third_party/WebKit/Source/bindings/templates/callback_function.h.tmpl
@@ -18,7 +18,7 @@ class {{forward_declaration}};
 
 class {{exported}}{{cpp_class}} final : public GarbageCollectedFinalized<{{cpp_class}}>, public TraceWrapperBase {
  public:
-  static {{cpp_class}}* create(ScriptState*, v8::Local<v8::Value> callback);
+  static {{cpp_class}}* Create(ScriptState*, v8::Local<v8::Value> callback);
 
   ~{{cpp_class}}() = default;
 
@@ -28,7 +28,7 @@ class {{exported}}{{cpp_class}} final : public GarbageCollectedFinalized<{{cpp_c
   bool call({{argument_declarations | join(', ')}});
 
   v8::Local<v8::Function> v8Value(v8::Isolate* isolate) {
-    return m_callback.newLocal(isolate);
+    return m_callback.NewLocal(isolate);
   }
 
  private:
@@ -40,7 +40,7 @@ class {{exported}}{{cpp_class}} final : public GarbageCollectedFinalized<{{cpp_c
 
 template <>
 struct NativeValueTraits<{{cpp_class}}> : public NativeValueTraitsBase<{{cpp_class}}> {
-  {{exported}}static {{cpp_class}}* nativeValue(v8::Isolate*, v8::Local<v8::Value>, ExceptionState&);
+  {{exported}}static {{cpp_class}}* NativeValue(v8::Isolate*, v8::Local<v8::Value>, ExceptionState&);
 };
 
 }  // namespace blink
diff --git a/third_party/WebKit/Source/bindings/templates/callback_interface.cpp.tmpl b/third_party/WebKit/Source/bindings/templates/callback_interface.cpp.tmpl
index 420c27645fe3..e3109b5bdfe5 100644
--- a/third_party/WebKit/Source/bindings/templates/callback_interface.cpp.tmpl
+++ b/third_party/WebKit/Source/bindings/templates/callback_interface.cpp.tmpl
@@ -11,29 +11,29 @@ namespace blink {
 
 {{v8_class}}::{{v8_class}}(v8::Local<v8::Function> callback, ScriptState* scriptState)
     : m_scriptState(scriptState) {
-  m_callback.set(scriptState->isolate(), callback);
+  m_callback.Set(scriptState->GetIsolate(), callback);
 }
 
 {{v8_class}}::~{{v8_class}}() {}
 
 DEFINE_TRACE({{v8_class}}) {
-  {{cpp_class}}::trace(visitor);
+  {{cpp_class}}::Trace(visitor);
 }
 
 {% for method in methods if not method.is_custom %}
 {{method.cpp_type}} {{v8_class}}::{{method.name}}({{method.argument_declarations | join(', ')}}) {
   {% set return_default = 'return true'
          if method.idl_type == 'boolean' else 'return' %}{# void #}
-  ExecutionContext* executionContext = m_scriptState->getExecutionContext();
-  if (!executionContext || executionContext->isContextSuspended() ||
-      executionContext->isContextDestroyed())
+  ExecutionContext* executionContext = m_scriptState->GetExecutionContext();
+  if (!executionContext || executionContext->IsContextSuspended() ||
+      executionContext->IsContextDestroyed())
     {{return_default}};
-  if (!m_scriptState->contextIsValid())
+  if (!m_scriptState->ContextIsValid())
     {{return_default}};
 
-  ScriptState::Scope scope(m_scriptState.get());
+  ScriptState::Scope scope(m_scriptState.Get());
   {% if method.call_with_this_handle %}
-  v8::Local<v8::Value> thisHandle = thisValue.v8Value();
+  v8::Local<v8::Value> thisHandle = thisValue.V8Value();
   {% endif %}
 
   {% for argument in method.arguments %}
@@ -46,13 +46,13 @@ DEFINE_TRACE({{v8_class}}) {
   v8::Local<v8::Value> *argv = 0;
   {% endif %}
 
-  v8::Isolate* isolate = m_scriptState->isolate();
+  v8::Isolate* isolate = m_scriptState->GetIsolate();
   {% set this_handle_parameter = 'thisHandle'
          if method.call_with_this_handle else 'v8::Undefined(isolate)' %}
   {% if method.idl_type == 'boolean' %}
   v8::TryCatch exceptionCatcher(isolate);
   exceptionCatcher.SetVerbose(true);
-  V8ScriptRunner::callFunction(m_callback.newLocal(isolate),
+  V8ScriptRunner::CallFunction(m_callback.NewLocal(isolate),
                                executionContext,
                                {{this_handle_parameter}},
                                {{method.arguments | length}},
@@ -60,8 +60,8 @@ DEFINE_TRACE({{v8_class}}) {
                                isolate);
   return !exceptionCatcher.HasCaught();
   {% else %}{# void #}
-  V8ScriptRunner::callFunction(m_callback.newLocal(isolate),
-                               m_scriptState->getExecutionContext(),
+  V8ScriptRunner::CallFunction(m_callback.NewLocal(isolate),
+                               m_scriptState->GetExecutionContext(),
                                {{this_handle_parameter}},
                                {{method.arguments | length}},
                                argv,
diff --git a/third_party/WebKit/Source/bindings/templates/callback_interface.h.tmpl b/third_party/WebKit/Source/bindings/templates/callback_interface.h.tmpl
index e8d141217241..a38934ce1fe8 100644
--- a/third_party/WebKit/Source/bindings/templates/callback_interface.h.tmpl
+++ b/third_party/WebKit/Source/bindings/templates/callback_interface.h.tmpl
@@ -12,7 +12,7 @@ namespace blink {
 
 class {{v8_class}} final : public {{cpp_class}} {
  public:
-  static {{v8_class}}* create(v8::Local<v8::Function> callback, ScriptState* scriptState) {
+  static {{v8_class}}* Create(v8::Local<v8::Function> callback, ScriptState* scriptState) {
     return new {{v8_class}}(callback, scriptState);
   }
 
diff --git a/third_party/WebKit/Source/bindings/templates/constants.cpp.tmpl b/third_party/WebKit/Source/bindings/templates/constants.cpp.tmpl
index 9940b50bd4bd..ff8dc553801c 100644
--- a/third_party/WebKit/Source/bindings/templates/constants.cpp.tmpl
+++ b/third_party/WebKit/Source/bindings/templates/constants.cpp.tmpl
@@ -2,17 +2,17 @@
 {% macro constant_getter_callback(constant) %}
 void {{v8_class_or_partial}}::{{constant.name}}ConstantGetterCallback(v8::Local<v8::Name>, const v8::PropertyCallbackInfo<v8::Value>& info) {
   {% if constant.deprecate_as %}
-  Deprecation::countDeprecation(currentExecutionContext(info.GetIsolate()), UseCounter::{{constant.deprecate_as}});
+  Deprecation::CountDeprecation(CurrentExecutionContext(info.GetIsolate()), UseCounter::k{{constant.deprecate_as}});
   {% endif %}
   {% if constant.measure_as %}
-  UseCounter::count(currentExecutionContext(info.GetIsolate()), UseCounter::{{constant.measure_as('ConstantGetter')}});
+  UseCounter::Count(CurrentExecutionContext(info.GetIsolate()), UseCounter::k{{constant.measure_as('ConstantGetter')}});
   {% endif %}
   {% if constant.idl_type in ('Double', 'Float') %}
-  v8SetReturnValue(info, {{constant.value}});
+  V8SetReturnValue(info, {{constant.value}});
   {% elif constant.idl_type == 'String' %}
-  v8SetReturnValueString(info, "{{constant.value}}");
+  V8SetReturnValueString(info, "{{constant.value}}");
   {% else %}
-  v8SetReturnValueInt(info, {{constant.value}});
+  V8SetReturnValueInt(info, {{constant.value}});
   {% endif %}
 }
 {% endmacro %}
@@ -27,7 +27,7 @@ const V8DOMConfiguration::ConstantConfiguration {{v8_class}}Constants[] = {
     {{constant_configuration(constant)}},
     {% endfor %}
 };
-V8DOMConfiguration::installConstants(isolate, interfaceTemplate, prototypeTemplate, {{v8_class}}Constants, WTF_ARRAY_LENGTH({{v8_class}}Constants));
+V8DOMConfiguration::InstallConstants(isolate, interfaceTemplate, prototypeTemplate, {{v8_class}}Constants, WTF_ARRAY_LENGTH({{v8_class}}Constants));
 {% endif %}
 {# Runtime-enabled constants #}
 {% for group in constants | runtime_enabled_constants | groupby('runtime_enabled_feature_name') %}
@@ -35,13 +35,13 @@ V8DOMConfiguration::installConstants(isolate, interfaceTemplate, prototypeTempla
 {% for constant in group.list %}
 {% set constant_name = constant.name.title().replace('_', '') %}
 const V8DOMConfiguration::ConstantConfiguration constant{{constant_name}}Configuration = {{constant_configuration(constant)}};
-V8DOMConfiguration::installConstant(isolate, interfaceTemplate, prototypeTemplate, constant{{constant_name}}Configuration);
+V8DOMConfiguration::InstallConstant(isolate, interfaceTemplate, prototypeTemplate, constant{{constant_name}}Configuration);
 {% endfor %}
 {% endfilter %}
 {% endfor %}
 {# Constants with [DeprecateAs] or [MeasureAs] #}
 {% for constant in constants | has_special_getter %}
-V8DOMConfiguration::installConstantWithGetter(isolate, interfaceTemplate, prototypeTemplate, "{{constant.name}}", {{v8_class_or_partial}}::{{constant.name}}ConstantGetterCallback);
+V8DOMConfiguration::InstallConstantWithGetter(isolate, interfaceTemplate, prototypeTemplate, "{{constant.name}}", {{v8_class_or_partial}}::{{constant.name}}ConstantGetterCallback);
 {% endfor %}
 {# Check constants #}
 {% if not do_not_check_constants %}
@@ -63,5 +63,5 @@ static_assert({{constant.value}} == {{constant_cpp_class}}::{{constant.reflected
     {# 'Short', 'Long' etc. #}
     {% set value = '%s, 0' % constant.value %}
 {% endif %}
-{"{{constant.name}}", {{value}}, V8DOMConfiguration::ConstantType{{constant.idl_type}}}
+{"{{constant.name}}", {{value}}, V8DOMConfiguration::kConstantType{{constant.idl_type}}}
 {%- endmacro %}
diff --git a/third_party/WebKit/Source/bindings/templates/dictionary_impl.cpp.tmpl b/third_party/WebKit/Source/bindings/templates/dictionary_impl.cpp.tmpl
index 46b5735d58d8..f9865bb7afa4 100644
--- a/third_party/WebKit/Source/bindings/templates/dictionary_impl.cpp.tmpl
+++ b/third_party/WebKit/Source/bindings/templates/dictionary_impl.cpp.tmpl
@@ -51,10 +51,10 @@ void {{cpp_class}}::{{member.null_setter_name}}() {
 
 DEFINE_TRACE({{cpp_class}}) {
   {% for member in members if member.is_traceable %}
-  visitor->trace(m_{{member.cpp_name}});
+  visitor->Trace(m_{{member.cpp_name}});
   {% endfor %}
   {% if parent_cpp_class %}
-  {{parent_cpp_class}}::trace(visitor);
+  {{parent_cpp_class}}::Trace(visitor);
   {% endif %}
 }
 
diff --git a/third_party/WebKit/Source/bindings/templates/dictionary_impl.h.tmpl b/third_party/WebKit/Source/bindings/templates/dictionary_impl.h.tmpl
index 1324d882fe9e..7c904e5ee5aa 100644
--- a/third_party/WebKit/Source/bindings/templates/dictionary_impl.h.tmpl
+++ b/third_party/WebKit/Source/bindings/templates/dictionary_impl.h.tmpl
@@ -32,7 +32,7 @@ class {{exported}}{{cpp_class}}{% if parent_cpp_class %} : public {{parent_cpp_c
   {% endif %}
 
   {% endfor %}
-  v8::Local<v8::Value> toV8Impl(v8::Local<v8::Object>, v8::Isolate*) const override;
+  v8::Local<v8::Value> ToV8Impl(v8::Local<v8::Object>, v8::Isolate*) const override;
   DECLARE_VIRTUAL_TRACE();
 
  private:
diff --git a/third_party/WebKit/Source/bindings/templates/dictionary_v8.cpp.tmpl b/third_party/WebKit/Source/bindings/templates/dictionary_v8.cpp.tmpl
index cad3566b8f85..7b718cb97970 100644
--- a/third_party/WebKit/Source/bindings/templates/dictionary_v8.cpp.tmpl
+++ b/third_party/WebKit/Source/bindings/templates/dictionary_v8.cpp.tmpl
@@ -17,16 +17,16 @@ static const v8::Eternal<v8::Name>* eternal{{v8_class}}Keys(v8::Isolate* isolate
     "{{member.name}}",
     {% endfor %}
   };
-  return V8PerIsolateData::from(isolate)->findOrCreateEternalNameCache(
+  return V8PerIsolateData::From(isolate)->FindOrCreateEternalNameCache(
       kKeys, kKeys, WTF_ARRAY_LENGTH(kKeys));
 }
 {% endif %}
 
 {% from 'utilities.cpp.tmpl' import v8_value_to_local_cpp_value %}
 void {{v8_class}}::toImpl(v8::Isolate* isolate, v8::Local<v8::Value> v8Value, {{cpp_class}}& impl, ExceptionState& exceptionState) {
-  if (isUndefinedOrNull(v8Value)) {
+  if (IsUndefinedOrNull(v8Value)) {
     {% if required_member_names %}
-    exceptionState.throwTypeError("Missing required member(s): {{required_member_names|join(', ')}}.");
+    exceptionState.ThrowTypeError("Missing required member(s): {{required_member_names|join(', ')}}.");
     {% endif %}
     return;
   }
@@ -35,7 +35,7 @@ void {{v8_class}}::toImpl(v8::Isolate* isolate, v8::Local<v8::Value> v8Value, {{
     // Do nothing.
     return;
     {% else %}
-    exceptionState.throwTypeError("cannot convert to dictionary.");
+    exceptionState.ThrowTypeError("cannot convert to dictionary.");
     return;
     {% endif %}
   }
@@ -44,7 +44,7 @@ void {{v8_class}}::toImpl(v8::Isolate* isolate, v8::Local<v8::Value> v8Value, {{
 
   {% if parent_v8_class %}
   {{parent_v8_class}}::toImpl(isolate, v8Value, impl, exceptionState);
-  if (exceptionState.hadException())
+  if (exceptionState.HadException())
     return;
 
   {% endif %}
@@ -58,12 +58,12 @@ void {{v8_class}}::toImpl(v8::Isolate* isolate, v8::Local<v8::Value> v8Value, {{
   {% filter runtime_enabled(member.runtime_enabled_feature_name) %}
   v8::Local<v8::Value> {{member.name}}Value;
   if (!v8Object->Get(context, keys[{{loop.index0}}].Get(isolate)).ToLocal(&{{member.name}}Value)) {
-    exceptionState.rethrowV8Exception(block.Exception());
+    exceptionState.RethrowV8Exception(block.Exception());
     return;
   }
   if ({{member.name}}Value.IsEmpty() || {{member.name}}Value->IsUndefined()) {
     {% if member.is_required %}
-    exceptionState.throwTypeError("required member {{member.name}} is undefined.");
+    exceptionState.ThrowTypeError("required member {{member.name}} is undefined.");
     return;
     {% else %}
     // Do nothing.
@@ -74,22 +74,22 @@ void {{v8_class}}::toImpl(v8::Isolate* isolate, v8::Local<v8::Value> v8Value, {{
   {% endif %}
   } else {
     {% if member.deprecate_as %}
-    Deprecation::countDeprecation(currentExecutionContext(isolate), UseCounter::{{member.deprecate_as}});
+    Deprecation::CountDeprecation(CurrentExecutionContext(isolate), UseCounter::k{{member.deprecate_as}});
     {% endif %}
     {{v8_value_to_local_cpp_value(member) | indent}}
     {% if member.is_interface_type %}
     if (!{{member.name}}) {
-      exceptionState.throwTypeError("member {{member.name}} is not of type {{member.idl_type}}.");
+      exceptionState.ThrowTypeError("member {{member.name}} is not of type {{member.idl_type}}.");
       return;
     }
     {% endif %}
     {% if member.enum_values %}
     {{declare_enum_validation_variable(member.enum_values) | indent}}
-    if (!isValidEnum({{member.name}}, validValues, WTF_ARRAY_LENGTH(validValues), "{{member.enum_type}}", exceptionState))
+    if (!IsValidEnum({{member.name}}, validValues, WTF_ARRAY_LENGTH(validValues), "{{member.enum_type}}", exceptionState))
       return;
     {% elif member.is_object %}
-    if (!{{member.name}}.isObject()) {
-      exceptionState.throwTypeError("member {{member.name}} is not an object.");
+    if (!{{member.name}}.IsObject()) {
+      exceptionState.ThrowTypeError("member {{member.name}} is not an object.");
       return;
     }
     {% endif %}
@@ -100,7 +100,7 @@ void {{v8_class}}::toImpl(v8::Isolate* isolate, v8::Local<v8::Value> v8Value, {{
   {% endfor %}
 }
 
-v8::Local<v8::Value> {{cpp_class}}::toV8Impl(v8::Local<v8::Object> creationContext, v8::Isolate* isolate) const {
+v8::Local<v8::Value> {{cpp_class}}::ToV8Impl(v8::Local<v8::Object> creationContext, v8::Isolate* isolate) const {
   v8::Local<v8::Object> v8Object = v8::Object::New(isolate);
   if (!toV8{{cpp_class}}(*this, v8Object, creationContext, isolate))
     return v8::Undefined(isolate);
@@ -122,7 +122,7 @@ bool toV8{{cpp_class}}(const {{cpp_class}}& impl, v8::Local<v8::Object> dictiona
   bool {{member.name}}HasValueOrDefault = false;
   if (impl.{{member.has_method_name}}()) {
     {% if member.is_object %}
-    DCHECK(impl.{{member.getter_name}}().isObject());
+    DCHECK(impl.{{member.getter_name}}().IsObject());
     {% endif %}
     {{member.name}}Value = {{member.cpp_value_to_v8_value}};
     {{member.name}}HasValueOrDefault = true;
@@ -144,7 +144,7 @@ bool toV8{{cpp_class}}(const {{cpp_class}}& impl, v8::Local<v8::Object> dictiona
      If there is not, then the compiler will inline this call into the only branch that sets it to true.
      Either way, the code is efficient and the variable is completely elided. #}
   if ({{member.name}}HasValueOrDefault &&
-      !v8CallBoolean(dictionary->CreateDataProperty(context, keys[{{loop.index0}}].Get(isolate), {{member.name}}Value))) {
+      !V8CallBoolean(dictionary->CreateDataProperty(context, keys[{{loop.index0}}].Get(isolate), {{member.name}}Value))) {
     return false;
   }
 
@@ -152,7 +152,7 @@ bool toV8{{cpp_class}}(const {{cpp_class}}& impl, v8::Local<v8::Object> dictiona
   return true;
 }
 
-{{cpp_class}} NativeValueTraits<{{cpp_class}}>::nativeValue(v8::Isolate* isolate, v8::Local<v8::Value> value, ExceptionState& exceptionState) {
+{{cpp_class}} NativeValueTraits<{{cpp_class}}>::NativeValue(v8::Isolate* isolate, v8::Local<v8::Value> value, ExceptionState& exceptionState) {
   {{cpp_class}} impl;
   {{v8_class}}::toImpl(isolate, value, impl, exceptionState);
   return impl;
diff --git a/third_party/WebKit/Source/bindings/templates/dictionary_v8.h.tmpl b/third_party/WebKit/Source/bindings/templates/dictionary_v8.h.tmpl
index 59e14fdb5a2d..39d821385fc4 100644
--- a/third_party/WebKit/Source/bindings/templates/dictionary_v8.h.tmpl
+++ b/third_party/WebKit/Source/bindings/templates/dictionary_v8.h.tmpl
@@ -20,18 +20,18 @@ class {{v8_class}} {
 {{exported}}bool toV8{{cpp_class}}(const {{cpp_class}}&, v8::Local<v8::Object> dictionary, v8::Local<v8::Object> creationContext, v8::Isolate*);
 
 template <class CallbackInfo>
-inline void v8SetReturnValue(const CallbackInfo& callbackInfo, {{cpp_class}}& impl) {
-  v8SetReturnValue(callbackInfo, ToV8(impl, callbackInfo.Holder(), callbackInfo.GetIsolate()));
+inline void V8SetReturnValue(const CallbackInfo& callbackInfo, {{cpp_class}}& impl) {
+  V8SetReturnValue(callbackInfo, ToV8(impl, callbackInfo.Holder(), callbackInfo.GetIsolate()));
 }
 
 template <class CallbackInfo>
-inline void v8SetReturnValue(const CallbackInfo& callbackInfo, {{cpp_class}}& impl, v8::Local<v8::Object> creationContext) {
-  v8SetReturnValue(callbackInfo, ToV8(impl, creationContext, callbackInfo.GetIsolate()));
+inline void V8SetReturnValue(const CallbackInfo& callbackInfo, {{cpp_class}}& impl, v8::Local<v8::Object> creationContext) {
+  V8SetReturnValue(callbackInfo, ToV8(impl, creationContext, callbackInfo.GetIsolate()));
 }
 
 template <>
 struct NativeValueTraits<{{cpp_class}}> : public NativeValueTraitsBase<{{cpp_class}}> {
-  {{exported}}static {{cpp_class}} nativeValue(v8::Isolate*, v8::Local<v8::Value>, ExceptionState&);
+  {{exported}}static {{cpp_class}} NativeValue(v8::Isolate*, v8::Local<v8::Value>, ExceptionState&);
 };
 
 template <>
diff --git a/third_party/WebKit/Source/bindings/templates/interface.cpp.tmpl b/third_party/WebKit/Source/bindings/templates/interface.cpp.tmpl
index e840b30e4d2e..289ea7ebb4ac 100644
--- a/third_party/WebKit/Source/bindings/templates/interface.cpp.tmpl
+++ b/third_party/WebKit/Source/bindings/templates/interface.cpp.tmpl
@@ -6,7 +6,7 @@
 {% set getter = indexed_property_getter %}
 static void indexedPropertyGetter(uint32_t index, const v8::PropertyCallbackInfo<v8::Value>& info) {
   {% if getter.is_raises_exception %}
-  ExceptionState exceptionState(info.GetIsolate(), ExceptionState::IndexedGetterContext, "{{interface_name}}");
+  ExceptionState exceptionState(info.GetIsolate(), ExceptionState::kIndexedGetterContext, "{{interface_name}}");
   {% endif %}
 
   {{cpp_class}}* impl = {{v8_class}}::toImpl(info.Holder());
@@ -18,10 +18,10 @@ static void indexedPropertyGetter(uint32_t index, const v8::PropertyCallbackInfo
   if (index >= impl->length())
     return;  // Returns undefined due to out-of-range.
 
-  {% set getter_name = getter.name or 'anonymousIndexedGetter' %}
+  {% set getter_name = getter.name or 'AnonymousIndexedGetter' %}
   {% set getter_arguments = ['index'] %}
   {% if getter.is_call_with_script_state %}
-  ScriptState* scriptState = ScriptState::forReceiverObject(info);
+  ScriptState* scriptState = ScriptState::ForReceiverObject(info);
   {% set getter_arguments = ['scriptState'] + getter_arguments %}
   {% endif %}
   {% if getter.is_raises_exception %}
@@ -50,7 +50,7 @@ void {{v8_class_or_partial}}::indexedPropertyGetterCallback(uint32_t index, cons
 
   {% else %}{# otherwise, named property #}
 
-  const AtomicString& propertyName = AtomicString::number(index);
+  const AtomicString& propertyName = AtomicString::Number(index);
 
   {% if getter.is_custom %}
   {{v8_class}}::namedPropertyGetterCustom(propertyName, info);
@@ -72,7 +72,7 @@ void {{v8_class_or_partial}}::indexedPropertyGetterCallback(uint32_t index, cons
 {% set setter = indexed_property_setter %}
 static void indexedPropertySetter(uint32_t index, v8::Local<v8::Value> v8Value, const v8::PropertyCallbackInfo<v8::Value>& info) {
   {% if setter.has_exception_state %}
-  ExceptionState exceptionState(info.GetIsolate(), ExceptionState::IndexedSetterContext, "{{interface_name}}");
+  ExceptionState exceptionState(info.GetIsolate(), ExceptionState::kIndexedSetterContext, "{{interface_name}}");
   {% endif %}
 
   {{cpp_class}}* impl = {{v8_class}}::toImpl(info.Holder());
@@ -80,16 +80,16 @@ static void indexedPropertySetter(uint32_t index, v8::Local<v8::Value> v8Value,
   {% if setter.has_type_checking_interface %}
   {# Type checking for interface types (if interface not implemented, throw
      TypeError), per http://www.w3.org/TR/WebIDL/#es-interface #}
-  if (!propertyValue{% if setter.is_nullable %} && !isUndefinedOrNull(v8Value){% endif %}) {
-    exceptionState.throwTypeError("The provided value is not of type '{{setter.idl_type}}'.");
+  if (!propertyValue{% if setter.is_nullable %} && !IsUndefinedOrNull(v8Value){% endif %}) {
+    exceptionState.ThrowTypeError("The provided value is not of type '{{setter.idl_type}}'.");
     return;
   }
   {% endif %}
 
-  {% set setter_name = setter.name or 'anonymousIndexedSetter' %}
+  {% set setter_name = setter.name or 'AnonymousIndexedSetter' %}
   {% set setter_arguments = ['index', 'propertyValue'] %}
   {% if setter.is_call_with_script_state %}
-  ScriptState* scriptState = ScriptState::forReceiverObject(info);
+  ScriptState* scriptState = ScriptState::ForReceiverObject(info);
   {% set setter_arguments = ['scriptState'] + setter_arguments %}
   {% endif %}
   {% if setter.is_raises_exception %}
@@ -97,12 +97,12 @@ static void indexedPropertySetter(uint32_t index, v8::Local<v8::Value> v8Value,
   {% endif %}
   bool result = impl->{{setter_name}}({{setter_arguments | join(', ')}});
   {% if setter.is_raises_exception %}
-  if (exceptionState.hadException())
+  if (exceptionState.HadException())
     return;
   {% endif %}
   if (!result)
     return;
-  v8SetReturnValue(info, v8Value);
+  V8SetReturnValue(info, v8Value);
 }
 
 {% endif %}
@@ -128,7 +128,7 @@ void {{v8_class_or_partial}}::indexedPropertySetterCallback(uint32_t index, v8::
 
   {% else %}{# otherwise, named property #}
 
-  const AtomicString& propertyName = AtomicString::number(index);
+  const AtomicString& propertyName = AtomicString::Number(index);
 
   {% if setter.is_custom %}
   {{v8_class}}::namedPropertySetterCustom(propertyName, v8Value, info);
@@ -149,15 +149,15 @@ void {{v8_class_or_partial}}::indexedPropertySetterCallback(uint32_t index, v8::
 {% set deleter = indexed_property_deleter %}
 static void indexedPropertyDeleter(uint32_t index, const v8::PropertyCallbackInfo<v8::Boolean>& info) {
   {% if deleter.is_raises_exception %}
-  ExceptionState exceptionState(info.GetIsolate(), ExceptionState::IndexedDeletionContext, "{{interface_name}}");
+  ExceptionState exceptionState(info.GetIsolate(), ExceptionState::kIndexedDeletionContext, "{{interface_name}}");
   {% endif %}
 
   {{cpp_class}}* impl = {{v8_class}}::toImpl(info.Holder());
 
-  {% set deleter_name = deleter.name or 'anonymousIndexedDeleter' %}
+  {% set deleter_name = deleter.name or 'AnonymousIndexedDeleter' %}
   {% set deleter_arguments = ['index'] %}
   {% if deleter.is_call_with_script_state %}
-  ScriptState* scriptState = ScriptState::forReceiverObject(info);
+  ScriptState* scriptState = ScriptState::ForReceiverObject(info);
   {% set deleter_arguments = ['scriptState'] + deleter_arguments %}
   {% endif %}
   {% if deleter.is_raises_exception %}
@@ -165,12 +165,12 @@ static void indexedPropertyDeleter(uint32_t index, const v8::PropertyCallbackInf
   {% endif %}
   DeleteResult result = impl->{{deleter_name}}({{deleter_arguments | join(', ')}});
   {% if deleter.is_raises_exception %}
-  if (exceptionState.hadException())
+  if (exceptionState.HadException())
     return;
   {% endif %}
-  if (result == DeleteUnknownProperty)
+  if (result == kDeleteUnknownProperty)
     return;
-  v8SetReturnValue(info, result == DeleteSuccess);
+  V8SetReturnValue(info, result == kDeleteSuccess);
 }
 
 {% endif %}
@@ -196,7 +196,7 @@ void {{v8_class_or_partial}}::indexedPropertyDeleterCallback(uint32_t index, con
 
   {% else %}{# otherwise, named property #}
 
-  const AtomicString& propertyName = AtomicString::number(index);
+  const AtomicString& propertyName = AtomicString::Number(index);
 
   {% if deleter.is_custom %}
   {{v8_class}}::namedPropertyDeleterCustom(propertyName, info);
@@ -217,11 +217,11 @@ void {{v8_class_or_partial}}::indexedPropertyDeleterCallback(uint32_t index, con
 {% set getter = named_property_getter %}
 static void namedPropertyGetter(const AtomicString& name, const v8::PropertyCallbackInfo<v8::Value>& info) {
   {% if getter.is_raises_exception %}
-  const CString& nameInUtf8 = name.utf8();
-  ExceptionState exceptionState(info.GetIsolate(), ExceptionState::GetterContext, "{{interface_name}}", nameInUtf8.data());
+  const CString& nameInUtf8 = name.Utf8();
+  ExceptionState exceptionState(info.GetIsolate(), ExceptionState::kGetterContext, "{{interface_name}}", nameInUtf8.Data());
   {% endif %}
   {% if getter.is_call_with_script_state %}
-  ScriptState* scriptState = ScriptState::forReceiverObject(info);
+  ScriptState* scriptState = ScriptState::ForReceiverObject(info);
   {% endif %}
 
   {{cpp_class}}* impl = {{v8_class}}::toImpl(info.Holder());
@@ -247,7 +247,7 @@ static void namedPropertyGetter(const AtomicString& name, const v8::PropertyCall
 void {{v8_class_or_partial}}::namedPropertyGetterCallback(v8::Local<v8::Name> name, const v8::PropertyCallbackInfo<v8::Value>& info) {
   if (!name->IsString())
     return;
-  const AtomicString& propertyName = toCoreAtomicString(name.As<v8::String>());
+  const AtomicString& propertyName = ToCoreAtomicString(name.As<v8::String>());
 
   {% if getter.is_custom %}
   {{v8_class}}::namedPropertyGetterCustom(propertyName, info);
@@ -267,11 +267,11 @@ void {{v8_class_or_partial}}::namedPropertyGetterCallback(v8::Local<v8::Name> na
 {% set setter = named_property_setter %}
 static void namedPropertySetter(const AtomicString& name, v8::Local<v8::Value> v8Value, const v8::PropertyCallbackInfo<v8::Value>& info) {
   {% if setter.has_exception_state %}
-  const CString& nameInUtf8 = name.utf8();
-  ExceptionState exceptionState(info.GetIsolate(), ExceptionState::SetterContext, "{{interface_name}}", nameInUtf8.data());
+  const CString& nameInUtf8 = name.Utf8();
+  ExceptionState exceptionState(info.GetIsolate(), ExceptionState::kSetterContext, "{{interface_name}}", nameInUtf8.Data());
   {% endif %}
   {% if setter.is_call_with_script_state %}
-  ScriptState* scriptState = ScriptState::forReceiverObject(info);
+  ScriptState* scriptState = ScriptState::ForReceiverObject(info);
   {% endif %}
 
   {{cpp_class}}* impl = {{v8_class}}::toImpl(info.Holder());
@@ -279,13 +279,13 @@ static void namedPropertySetter(const AtomicString& name, v8::Local<v8::Value> v
   {% if setter.has_type_checking_interface %}
   {# Type checking for interface types (if interface not implemented, throw
      TypeError), per http://www.w3.org/TR/WebIDL/#es-interface #}
-  if (!propertyValue{% if setter.is_nullable %} && !isUndefinedOrNull(v8Value){% endif %}) {
-    exceptionState.throwTypeError("The provided value is not of type '{{setter.idl_type}}'.");
+  if (!propertyValue{% if setter.is_nullable %} && !IsUndefinedOrNull(v8Value){% endif %}) {
+    exceptionState.ThrowTypeError("The provided value is not of type '{{setter.idl_type}}'.");
     return;
   }
   {% endif %}
 
-  {% set setter_name = setter.name or 'anonymousNamedSetter' %}
+  {% set setter_name = setter.name or 'AnonymousNamedSetter' %}
   {% set setter_arguments = ['name', 'propertyValue'] %}
   {% if setter.is_call_with_script_state %}
   {% set setter_arguments = ['scriptState'] + setter_arguments %}
@@ -295,12 +295,12 @@ static void namedPropertySetter(const AtomicString& name, v8::Local<v8::Value> v
   {% endif %}
   bool result = impl->{{setter_name}}({{setter_arguments | join(', ')}});
   {% if setter.is_raises_exception %}
-  if (exceptionState.hadException())
+  if (exceptionState.HadException())
     return;
   {% endif %}
   if (!result)
     return;
-  v8SetReturnValue(info, v8Value);
+  V8SetReturnValue(info, v8Value);
 }
 
 {% endif %}
@@ -314,7 +314,7 @@ static void namedPropertySetter(const AtomicString& name, v8::Local<v8::Value> v
 void {{v8_class_or_partial}}::namedPropertySetterCallback(v8::Local<v8::Name> name, v8::Local<v8::Value> v8Value, const v8::PropertyCallbackInfo<v8::Value>& info) {
   if (!name->IsString())
     return;
-  const AtomicString& propertyName = toCoreAtomicString(name.As<v8::String>());
+  const AtomicString& propertyName = ToCoreAtomicString(name.As<v8::String>());
 
   {% if setter.is_ce_reactions %}
   CEReactionsScope ceReactionsScope;
@@ -337,16 +337,16 @@ void {{v8_class_or_partial}}::namedPropertySetterCallback(v8::Local<v8::Name> na
 {% set deleter = named_property_deleter %}
 static void namedPropertyDeleter(const AtomicString& name, const v8::PropertyCallbackInfo<v8::Boolean>& info) {
   {% if deleter.is_raises_exception %}
-  const CString& nameInUtf8 = name.utf8();
-  ExceptionState exceptionState(info.GetIsolate(), ExceptionState::DeletionContext, "{{interface_name}}", nameInUtf8.data());
+  const CString& nameInUtf8 = name.Utf8();
+  ExceptionState exceptionState(info.GetIsolate(), ExceptionState::kDeletionContext, "{{interface_name}}", nameInUtf8.Data());
   {% endif %}
   {% if deleter.is_call_with_script_state %}
-  ScriptState* scriptState = ScriptState::forReceiverObject(info);
+  ScriptState* scriptState = ScriptState::ForReceiverObject(info);
   {% endif %}
 
   {{cpp_class}}* impl = {{v8_class}}::toImpl(info.Holder());
 
-  {% set deleter_name = deleter.name or 'anonymousNamedDeleter' %}
+  {% set deleter_name = deleter.name or 'AnonymousNamedDeleter' %}
   {% set deleter_arguments = ['name'] %}
   {% if deleter.is_call_with_script_state %}
   {% set deleter_arguments = ['scriptState'] + deleter_arguments %}
@@ -356,12 +356,12 @@ static void namedPropertyDeleter(const AtomicString& name, const v8::PropertyCal
   {% endif %}
   DeleteResult result = impl->{{deleter_name}}({{deleter_arguments | join(', ')}});
   {% if deleter.is_raises_exception %}
-  if (exceptionState.hadException())
+  if (exceptionState.HadException())
     return;
   {% endif %}
-  if (result == DeleteUnknownProperty)
+  if (result == kDeleteUnknownProperty)
     return;
-  v8SetReturnValue(info, result == DeleteSuccess);
+  V8SetReturnValue(info, result == kDeleteSuccess);
 }
 
 {% endif %}
@@ -375,7 +375,7 @@ static void namedPropertyDeleter(const AtomicString& name, const v8::PropertyCal
 void {{v8_class_or_partial}}::namedPropertyDeleterCallback(v8::Local<v8::Name> name, const v8::PropertyCallbackInfo<v8::Boolean>& info) {
   if (!name->IsString())
     return;
-  const AtomicString& propertyName = toCoreAtomicString(name.As<v8::String>());
+  const AtomicString& propertyName = ToCoreAtomicString(name.As<v8::String>());
 
   {% if deleter.is_ce_reactions %}
   CEReactionsScope ceReactionsScope;
@@ -400,10 +400,10 @@ void {{v8_class_or_partial}}::namedPropertyDeleterCallback(v8::Local<v8::Name> n
 {# If there is an enumerator, there MUST be a query method to properly
    communicate property attributes. #}
 static void namedPropertyQuery(const AtomicString& name, const v8::PropertyCallbackInfo<v8::Integer>& info) {
-  const CString& nameInUtf8 = name.utf8();
-  ExceptionState exceptionState(info.GetIsolate(), ExceptionState::GetterContext, "{{interface_name}}", nameInUtf8.data());
+  const CString& nameInUtf8 = name.Utf8();
+  ExceptionState exceptionState(info.GetIsolate(), ExceptionState::kGetterContext, "{{interface_name}}", nameInUtf8.Data());
   {% if getter.is_call_with_script_state %}
-  ScriptState* scriptState = ScriptState::forReceiverObject(info);
+  ScriptState* scriptState = ScriptState::ForReceiverObject(info);
   {% endif %}
 
   {{cpp_class}}* impl = {{v8_class}}::toImpl(info.Holder());
@@ -412,10 +412,10 @@ static void namedPropertyQuery(const AtomicString& name, const v8::PropertyCallb
   {% if getter.is_call_with_script_state %}
   {% set getter_arguments = ['scriptState'] + getter_arguments %}
   {% endif %}
-  bool result = impl->namedPropertyQuery({{getter_arguments | join(', ')}});
+  bool result = impl->NamedPropertyQuery({{getter_arguments | join(', ')}});
   if (!result)
     return;
-  v8SetReturnValueInt(info, v8::None);
+  V8SetReturnValueInt(info, v8::None);
 }
 
 {% endif %}
@@ -429,7 +429,7 @@ static void namedPropertyQuery(const AtomicString& name, const v8::PropertyCallb
 void {{v8_class_or_partial}}::namedPropertyQueryCallback(v8::Local<v8::Name> name, const v8::PropertyCallbackInfo<v8::Integer>& info) {
   if (!name->IsString())
     return;
-  const AtomicString& propertyName = toCoreAtomicString(name.As<v8::String>());
+  const AtomicString& propertyName = ToCoreAtomicString(name.As<v8::String>());
 
   {% if getter.is_custom_property_query %}
   {{v8_class}}::namedPropertyQueryCustom(propertyName, info);
@@ -447,15 +447,15 @@ void {{v8_class_or_partial}}::namedPropertyQueryCallback(v8::Local<v8::Name> nam
 {% if named_property_getter and named_property_getter.is_enumerable and
       not named_property_getter.is_custom_property_enumerator %}
 static void namedPropertyEnumerator(const v8::PropertyCallbackInfo<v8::Array>& info) {
-  ExceptionState exceptionState(info.GetIsolate(), ExceptionState::EnumerationContext, "{{interface_name}}");
+  ExceptionState exceptionState(info.GetIsolate(), ExceptionState::kEnumerationContext, "{{interface_name}}");
 
   {{cpp_class}}* impl = {{v8_class}}::toImpl(info.Holder());
 
   Vector<String> names;
-  impl->namedPropertyEnumerator(names, exceptionState);
-  if (exceptionState.hadException())
+  impl->NamedPropertyEnumerator(names, exceptionState);
+  if (exceptionState.HadException())
     return;
-  v8SetReturnValue(info, ToV8(names, info.Holder(), info.GetIsolate()).As<v8::Array>());
+  V8SetReturnValue(info, ToV8(names, info.Holder(), info.GetIsolate()).As<v8::Array>());
 }
 
 {% endif %}
@@ -492,8 +492,8 @@ static void {{cpp_class}}OriginSafeMethodSetter(v8::Local<v8::Name> name, v8::Lo
     return;
   {{cpp_class}}* impl = {{v8_class}}::toImpl(holder);
   v8::String::Utf8Value methodName(name);
-  ExceptionState exceptionState(info.GetIsolate(), ExceptionState::SetterContext, "{{interface_name}}", *methodName);
-  if (!BindingSecurity::shouldAllowAccessTo(currentDOMWindow(info.GetIsolate()), impl, exceptionState)) {
+  ExceptionState exceptionState(info.GetIsolate(), ExceptionState::kSetterContext, "{{interface_name}}", *methodName);
+  if (!BindingSecurity::ShouldAllowAccessTo(CurrentDOMWindow(info.GetIsolate()), impl, exceptionState)) {
     return;
   }
 
@@ -503,8 +503,8 @@ static void {{cpp_class}}OriginSafeMethodSetter(v8::Local<v8::Name> name, v8::Lo
   // {{method.name}}OriginSafeMethodGetter{{world_suffix}} defined in
   // methods.cpp.tmpl
   {% endraw %}
-  V8PrivateProperty::getSymbol(info.GetIsolate(), *methodName)
-      .set(v8::Local<v8::Object>::Cast(info.Holder()), v8Value);
+  V8PrivateProperty::GetSymbol(info.GetIsolate(), *methodName)
+      .Set(v8::Local<v8::Object>::Cast(info.Holder()), v8Value);
 }
 {% endif %}
 {% endblock %}
@@ -523,16 +523,16 @@ void {{v8_class_or_partial}}::{{cpp_class}}OriginSafeMethodSetterCallback(v8::Lo
 {% from 'methods.cpp.tmpl' import generate_constructor with context %}
 {% if named_constructor %}
 {% set active_scriptwrappable_inheritance =
-    'InheritFromActiveScriptWrappable'
+    'kInheritFromActiveScriptWrappable'
     if active_scriptwrappable else
-    'NotInheritFromActiveScriptWrappable' %}
+    'kNotInheritFromActiveScriptWrappable' %}
 // Suppress warning: global constructors, because struct WrapperTypeInfo is trivial
 // and does not depend on another global objects.
 #if defined(COMPONENT_BUILD) && defined(WIN32) && COMPILER(CLANG)
 #pragma clang diagnostic push
 #pragma clang diagnostic ignored "-Wglobal-constructors"
 #endif
-const WrapperTypeInfo {{v8_class}}Constructor::wrapperTypeInfo = { gin::kEmbedderBlink, {{v8_class}}Constructor::domTemplate, {{v8_class}}::trace, {{v8_class}}::traceWrappers, {{prepare_prototype_and_interface_object_func or 'nullptr'}}, "{{interface_name}}", 0, WrapperTypeInfo::WrapperTypeObjectPrototype, WrapperTypeInfo::{{wrapper_class_id}}, WrapperTypeInfo::{{active_scriptwrappable_inheritance}}, WrapperTypeInfo::{{lifetime}} };
+const WrapperTypeInfo {{v8_class}}Constructor::wrapperTypeInfo = { gin::kEmbedderBlink, {{v8_class}}Constructor::domTemplate, {{v8_class}}::Trace, {{v8_class}}::TraceWrappers, {{prepare_prototype_and_interface_object_func or 'nullptr'}}, "{{interface_name}}", 0, WrapperTypeInfo::kWrapperTypeObjectPrototype, WrapperTypeInfo::{{wrapper_class_id}}, WrapperTypeInfo::{{active_scriptwrappable_inheritance}}, WrapperTypeInfo::{{lifetime}} };
 #if defined(COMPONENT_BUILD) && defined(WIN32) && COMPILER(CLANG)
 #pragma clang diagnostic pop
 #endif
@@ -540,17 +540,17 @@ const WrapperTypeInfo {{v8_class}}Constructor::wrapperTypeInfo = { gin::kEmbedde
 {{generate_constructor(named_constructor)}}
 v8::Local<v8::FunctionTemplate> {{v8_class}}Constructor::domTemplate(v8::Isolate* isolate, const DOMWrapperWorld& world) {
   static int domTemplateKey; // This address is used for a key to look up the dom template.
-  V8PerIsolateData* data = V8PerIsolateData::from(isolate);
-  v8::Local<v8::FunctionTemplate> result = data->findInterfaceTemplate(world, &domTemplateKey);
+  V8PerIsolateData* data = V8PerIsolateData::From(isolate);
+  v8::Local<v8::FunctionTemplate> result = data->FindInterfaceTemplate(world, &domTemplateKey);
   if (!result.IsEmpty())
     return result;
 
   result = v8::FunctionTemplate::New(isolate, {{v8_class}}ConstructorCallback);
   v8::Local<v8::ObjectTemplate> instanceTemplate = result->InstanceTemplate();
   instanceTemplate->SetInternalFieldCount({{v8_class}}::internalFieldCount);
-  result->SetClassName(v8AtomicString(isolate, "{{named_constructor.name}}"));
+  result->SetClassName(V8AtomicString(isolate, "{{named_constructor.name}}"));
   result->Inherit({{v8_class}}::domTemplate(isolate, world));
-  data->setInterfaceTemplate(world, &domTemplateKey, result);
+  data->SetInterfaceTemplate(world, &domTemplateKey, result);
   return result;
 }
 
@@ -558,29 +558,29 @@ void {{v8_class}}Constructor::NamedConstructorAttributeGetter(
     v8::Local<v8::Name> propertyName,
     const v8::PropertyCallbackInfo<v8::Value>& info) {
   v8::Local<v8::Context> creationContext = info.Holder()->CreationContext();
-  V8PerContextData* perContextData = V8PerContextData::from(creationContext);
+  V8PerContextData* perContextData = V8PerContextData::From(creationContext);
   if (!perContextData) {
     // TODO(yukishiino): Return a valid named constructor even after the context is detached
     return;
   }
 
-  v8::Local<v8::Function> namedConstructor = perContextData->constructorForType(&{{v8_class}}Constructor::wrapperTypeInfo);
+  v8::Local<v8::Function> namedConstructor = perContextData->ConstructorForType(&{{v8_class}}Constructor::wrapperTypeInfo);
 
   // Set the prototype of named constructors to the regular constructor.
-  auto privateProperty = V8PrivateProperty::getNamedConstructorInitialized(info.GetIsolate());
+  auto privateProperty = V8PrivateProperty::GetNamedConstructorInitialized(info.GetIsolate());
   v8::Local<v8::Context> currentContext = info.GetIsolate()->GetCurrentContext();
-  v8::Local<v8::Value> privateValue = privateProperty.getOrEmpty(namedConstructor);
+  v8::Local<v8::Value> privateValue = privateProperty.GetOrEmpty(namedConstructor);
 
   if (privateValue.IsEmpty()) {
-    v8::Local<v8::Function> interface = perContextData->constructorForType(&{{v8_class}}::wrapperTypeInfo);
-    v8::Local<v8::Value> interfacePrototype = interface->Get(currentContext, v8AtomicString(info.GetIsolate(), "prototype")).ToLocalChecked();
-    bool result = namedConstructor->Set(currentContext, v8AtomicString(info.GetIsolate(), "prototype"), interfacePrototype).ToChecked();
+    v8::Local<v8::Function> interface = perContextData->ConstructorForType(&{{v8_class}}::wrapperTypeInfo);
+    v8::Local<v8::Value> interfacePrototype = interface->Get(currentContext, V8AtomicString(info.GetIsolate(), "prototype")).ToLocalChecked();
+    bool result = namedConstructor->Set(currentContext, V8AtomicString(info.GetIsolate(), "prototype"), interfacePrototype).ToChecked();
     if (!result)
       return;
-    privateProperty.set(namedConstructor, v8::True(info.GetIsolate()));
+    privateProperty.Set(namedConstructor, v8::True(info.GetIsolate()));
   }
 
-  v8SetReturnValue(info, namedConstructor);
+  V8SetReturnValue(info, namedConstructor);
 }
 
 {% endif %}
@@ -590,7 +590,7 @@ void {{v8_class}}Constructor::NamedConstructorAttributeGetter(
 {% block overloaded_constructor %}
 {% if constructor_overloads %}
 static void constructor(const v8::FunctionCallbackInfo<v8::Value>& info) {
-  ExceptionState exceptionState(info.GetIsolate(), ExceptionState::ConstructionContext, "{{interface_name}}");
+  ExceptionState exceptionState(info.GetIsolate(), ExceptionState::kConstructionContext, "{{interface_name}}");
   {# 2. Initialize argcount to be min(maxarg, n). #}
   switch (std::min({{constructor_overloads.maxarg}}, info.Length())) {
     {# 3. Remove from S all entries whose type list is not of length argcount. #}
@@ -611,16 +611,16 @@ static void constructor(const v8::FunctionCallbackInfo<v8::Value>& info) {
       {# Report full list of valid arities if gaps and above minimum #}
       {% if constructor_overloads.valid_arities %}
       if (info.Length() >= {{constructor_overloads.length}}) {
-        exceptionState.throwTypeError(ExceptionMessages::invalidArity("{{constructor_overloads.valid_arities}}", info.Length()));
+        exceptionState.ThrowTypeError(ExceptionMessages::InvalidArity("{{constructor_overloads.valid_arities}}", info.Length()));
         return;
       }
       {% endif %}
       {# Otherwise just report "not enough arguments" #}
-      exceptionState.throwTypeError(ExceptionMessages::notEnoughArguments({{constructor_overloads.length}}, info.Length()));
+      exceptionState.ThrowTypeError(ExceptionMessages::NotEnoughArguments({{constructor_overloads.length}}, info.Length()));
       return;
   }
   {# No match, throw error #}
-  exceptionState.throwTypeError("No matching constructor signature.");
+  exceptionState.ThrowTypeError("No matching constructor signature.");
 }
 
 {% endif %}
@@ -632,22 +632,22 @@ static void constructor(const v8::FunctionCallbackInfo<v8::Value>& info) {
 {% if constructors or has_custom_constructor or has_event_constructor or has_html_constructor %}
 void {{v8_class}}::constructorCallback(const v8::FunctionCallbackInfo<v8::Value>& info) {
   {% if measure_as %}
-  UseCounter::count(currentExecutionContext(info.GetIsolate()), UseCounter::{{measure_as('Constructor')}});
+  UseCounter::Count(CurrentExecutionContext(info.GetIsolate()), UseCounter::k{{measure_as('Constructor')}});
   {% endif %}
   if (!info.IsConstructCall()) {
-    V8ThrowException::throwTypeError(info.GetIsolate(), ExceptionMessages::constructorNotCallableAsFunction("{{interface_name}}"));
+    V8ThrowException::ThrowTypeError(info.GetIsolate(), ExceptionMessages::ConstructorNotCallableAsFunction("{{interface_name}}"));
     return;
   }
 
-  if (ConstructorMode::current(info.GetIsolate()) == ConstructorMode::WrapExistingObject) {
-    v8SetReturnValue(info, info.Holder());
+  if (ConstructorMode::Current(info.GetIsolate()) == ConstructorMode::kWrapExistingObject) {
+    V8SetReturnValue(info, info.Holder());
     return;
   }
 
   {% if has_custom_constructor %}
   {{v8_class}}::constructorCustom(info);
   {% elif has_html_constructor %}
-  V8HTMLConstructor::htmlConstructor(info, {{v8_class}}::wrapperTypeInfo, HTMLElementType::k{{interface_name}});
+  V8HTMLConstructor::HtmlConstructor(info, {{v8_class}}::wrapperTypeInfo, HTMLElementType::k{{interface_name}});
   {% else %}
   {{cpp_class}}V8Internal::constructor(info);
   {% endif %}
@@ -672,7 +672,7 @@ void {{v8_class}}::constructorCallback(const v8::FunctionCallbackInfo<v8::Value>
 {% set property_attribute =
        'static_cast<v8::PropertyAttribute>(%s)' %
        ' | '.join(method.property_attributes or ['v8::None']) %}
-{% set holder_check = 'V8DOMConfiguration::CheckHolder' %}
+{% set holder_check = 'V8DOMConfiguration::kCheckHolder' %}
 static const V8DOMConfiguration::AttributeConfiguration {{method.name}}OriginSafeAttributeConfiguration[] = {
 {% if method.is_per_world_bindings %}
 {% set getter_callback_for_main_world = '%sForMainWorld' % getter_callback %}
@@ -681,11 +681,11 @@ static const V8DOMConfiguration::AttributeConfiguration {{method.name}}OriginSaf
     {"{{method.name}}", {{getter_callback_for_main_world}}, {{setter_callback_for_main_world}}, nullptr, &{{v8_class}}::wrapperTypeInfo, {{property_attribute}}, {{property_location(method)}}, {{holder_check}}, V8DOMConfiguration::MainWorld},
     {"{{method.name}}", {{getter_callback}}, {{setter_callback}}, nullptr, &{{v8_class}}::wrapperTypeInfo, {{property_attribute}}, {{property_location(method)}}, {{holder_check}}, V8DOMConfiguration::NonMainWorlds}}
 {% else %}
-    {"{{method.name}}", {{getter_callback}}, {{setter_callback}}, nullptr, &{{v8_class}}::wrapperTypeInfo, {{property_attribute}}, {{property_location(method)}}, {{holder_check}}, V8DOMConfiguration::AllWorlds}
+    {"{{method.name}}", {{getter_callback}}, {{setter_callback}}, nullptr, &{{v8_class}}::wrapperTypeInfo, {{property_attribute}}, {{property_location(method)}}, {{holder_check}}, V8DOMConfiguration::kAllWorlds}
 {% endif %}
 };
 for (const auto& attributeConfig : {{method.name}}OriginSafeAttributeConfiguration)
-  V8DOMConfiguration::installAttribute(isolate, world, {{instance_template}}, {{prototype_template}}, attributeConfig);
+  V8DOMConfiguration::InstallAttribute(isolate, world, {{instance_template}}, {{prototype_template}}, attributeConfig);
 {%- endmacro %}
 
 
@@ -701,7 +701,7 @@ for (const auto& attributeConfig : {{method.name}}OriginSafeAttributeConfigurati
        '%s::indexedPropertyDeleterCallback' % v8_class_or_partial
        if indexed_property_deleter or named_property_deleter else 'nullptr' %}
 {% set indexed_property_enumerator_callback =
-       'indexedPropertyEnumerator<%s>' % cpp_class
+       'IndexedPropertyEnumerator<%s>' % cpp_class
        if indexed_property_getter.is_enumerable else 'nullptr' %}
 {% set property_handler_flags =
        'v8::PropertyHandlerFlags::kNone' %}
@@ -745,7 +745,7 @@ v8::NamedPropertyHandlerConfiguration namedPropertyHandlerConfig({{named_propert
 {% if not is_array_buffer_or_view %}
 v8::Local<v8::FunctionTemplate> {{v8_class}}::domTemplate(v8::Isolate* isolate, const DOMWrapperWorld& world) {
   {% set installTemplateFunction = '%s::install%sTemplateFunction' % (v8_class, v8_class) if has_partial_interface else 'install%sTemplate' % v8_class %}
-  return V8DOMConfiguration::domClassTemplate(isolate, world, const_cast<WrapperTypeInfo*>(&wrapperTypeInfo), {{installTemplateFunction}});
+  return V8DOMConfiguration::DomClassTemplate(isolate, world, const_cast<WrapperTypeInfo*>(&wrapperTypeInfo), {{installTemplateFunction}});
 }
 
 {% endif %}
@@ -758,15 +758,15 @@ v8::Local<v8::FunctionTemplate> {{v8_class}}::domTemplate(v8::Isolate* isolate,
 v8::Local<v8::FunctionTemplate> {{v8_class}}::domTemplateForNamedPropertiesObject(v8::Isolate* isolate, const DOMWrapperWorld& world) {
   v8::Local<v8::FunctionTemplate> parentTemplate = V8{{parent_interface}}::domTemplate(isolate, world);
 
-  v8::Local<v8::FunctionTemplate> namedPropertiesObjectFunctionTemplate = v8::FunctionTemplate::New(isolate, V8ObjectConstructor::isValidConstructorMode);
-  namedPropertiesObjectFunctionTemplate->SetClassName(v8AtomicString(isolate, "{{interface_name}}Properties"));
+  v8::Local<v8::FunctionTemplate> namedPropertiesObjectFunctionTemplate = v8::FunctionTemplate::New(isolate, V8ObjectConstructor::IsValidConstructorMode);
+  namedPropertiesObjectFunctionTemplate->SetClassName(V8AtomicString(isolate, "{{interface_name}}Properties"));
   namedPropertiesObjectFunctionTemplate->Inherit(parentTemplate);
 
   v8::Local<v8::ObjectTemplate> namedPropertiesObjectTemplate = namedPropertiesObjectFunctionTemplate->PrototypeTemplate();
   namedPropertiesObjectTemplate->SetInternalFieldCount({{v8_class}}::internalFieldCount);
   // Named Properties object has SetPrototype method of Immutable Prototype Exotic Objects
   namedPropertiesObjectTemplate->SetImmutableProto();
-  V8DOMConfiguration::setClassString(isolate, namedPropertiesObjectTemplate, "{{interface_name}}Properties");
+  V8DOMConfiguration::SetClassString(isolate, namedPropertiesObjectTemplate, "{{interface_name}}Properties");
   {{install_named_property_handler('namedPropertiesObjectTemplate') | indent(2)}}
 
   return namedPropertiesObjectFunctionTemplate;
@@ -781,11 +781,11 @@ v8::Local<v8::FunctionTemplate> {{v8_class}}::domTemplateForNamedPropertiesObjec
 {% if not is_array_buffer_or_view %}
 
 bool {{v8_class}}::hasInstance(v8::Local<v8::Value> v8Value, v8::Isolate* isolate) {
-  return V8PerIsolateData::from(isolate)->hasInstance(&wrapperTypeInfo, v8Value);
+  return V8PerIsolateData::From(isolate)->HasInstance(&wrapperTypeInfo, v8Value);
 }
 
 v8::Local<v8::Object> {{v8_class}}::findInstanceInPrototypeChain(v8::Local<v8::Value> v8Value, v8::Isolate* isolate) {
-  return V8PerIsolateData::from(isolate)->findInstanceInPrototypeChain(&wrapperTypeInfo, v8Value);
+  return V8PerIsolateData::From(isolate)->FindInstanceInPrototypeChain(&wrapperTypeInfo, v8Value);
 }
 
 {% endif %}
@@ -799,19 +799,19 @@ v8::Local<v8::Object> {{v8_class}}::findInstanceInPrototypeChain(v8::Local<v8::V
   DCHECK(object->Is{{interface_name}}());
   v8::Local<v8::{{interface_name}}> v8buffer = object.As<v8::{{interface_name}}>();
   if (v8buffer->IsExternal()) {
-    const WrapperTypeInfo* wrapperTypeInfo = toWrapperTypeInfo(object);
+    const WrapperTypeInfo* wrapperTypeInfo = ToWrapperTypeInfo(object);
     CHECK(wrapperTypeInfo);
-    CHECK_EQ(wrapperTypeInfo->ginEmbedder, gin::kEmbedderBlink);
-    return toScriptWrappable(object)->toImpl<{{cpp_class}}>();
+    CHECK_EQ(wrapperTypeInfo->gin_embedder, gin::kEmbedderBlink);
+    return ToScriptWrappable(object)->ToImpl<{{cpp_class}}>();
   }
 
   // Transfer the ownership of the allocated memory to an {{interface_name}} without
   // copying.
   v8::{{interface_name}}::Contents v8Contents = v8buffer->Externalize();
-  WTF::ArrayBufferContents::DataHandle data(v8Contents.Data(), WTF::ArrayBufferContents::freeMemory);
-  WTF::ArrayBufferContents contents(std::move(data), v8Contents.ByteLength(), WTF::ArrayBufferContents::{% if interface_name == 'ArrayBuffer' %}Not{% endif %}Shared);
-  {{cpp_class}}* buffer = {{cpp_class}}::create(contents);
-  v8::Local<v8::Object> associatedWrapper = buffer->associateWithWrapper(v8::Isolate::GetCurrent(), buffer->wrapperTypeInfo(), object);
+  WTF::ArrayBufferContents::DataHandle data(v8Contents.Data(), WTF::ArrayBufferContents::FreeMemory);
+  WTF::ArrayBufferContents contents(std::move(data), v8Contents.ByteLength(), WTF::ArrayBufferContents::k{% if interface_name == 'ArrayBuffer' %}Not{% endif %}Shared);
+  {{cpp_class}}* buffer = {{cpp_class}}::Create(contents);
+  v8::Local<v8::Object> associatedWrapper = buffer->AssociateWithWrapper(v8::Isolate::GetCurrent(), buffer->GetWrapperTypeInfo(), object);
   DCHECK(associatedWrapper == object);
 
   return buffer;
@@ -820,9 +820,9 @@ v8::Local<v8::Object> {{v8_class}}::findInstanceInPrototypeChain(v8::Local<v8::V
 {% elif interface_name == 'ArrayBufferView' %}
 {{cpp_class}}* V8ArrayBufferView::toImpl(v8::Local<v8::Object> object) {
   DCHECK(object->IsArrayBufferView());
-  ScriptWrappable* scriptWrappable = toScriptWrappable(object);
+  ScriptWrappable* scriptWrappable = ToScriptWrappable(object);
   if (scriptWrappable)
-    return scriptWrappable->toImpl<{{cpp_class}}>();
+    return scriptWrappable->ToImpl<{{cpp_class}}>();
 
   if (object->IsInt8Array())
     return V8Int8Array::toImpl(object);
@@ -852,24 +852,24 @@ v8::Local<v8::Object> {{v8_class}}::findInstanceInPrototypeChain(v8::Local<v8::V
 {% elif is_array_buffer_or_view %}
 {{cpp_class}}* {{v8_class}}::toImpl(v8::Local<v8::Object> object) {
   DCHECK(object->Is{{interface_name}}());
-  ScriptWrappable* scriptWrappable = toScriptWrappable(object);
+  ScriptWrappable* scriptWrappable = ToScriptWrappable(object);
   if (scriptWrappable)
-    return scriptWrappable->toImpl<{{cpp_class}}>();
+    return scriptWrappable->ToImpl<{{cpp_class}}>();
 
   v8::Local<v8::{{interface_name}}> v8View = object.As<v8::{{interface_name}}>();
   v8::Local<v8::Object> arrayBuffer = v8View->Buffer();
   {{cpp_class}}* typedArray = nullptr;
   if (arrayBuffer->IsArrayBuffer()) {
-    typedArray = {{cpp_class}}::create(V8ArrayBuffer::toImpl(arrayBuffer), v8View->ByteOffset(), v8View->{% if interface_name == 'DataView' %}Byte{% endif %}Length());
+    typedArray = {{cpp_class}}::Create(V8ArrayBuffer::toImpl(arrayBuffer), v8View->ByteOffset(), v8View->{% if interface_name == 'DataView' %}Byte{% endif %}Length());
   } else if (arrayBuffer->IsSharedArrayBuffer()) {
-    typedArray = {{cpp_class}}::create(V8SharedArrayBuffer::toImpl(arrayBuffer), v8View->ByteOffset(), v8View->{% if interface_name == 'DataView' %}Byte{% endif %}Length());
+    typedArray = {{cpp_class}}::Create(V8SharedArrayBuffer::toImpl(arrayBuffer), v8View->ByteOffset(), v8View->{% if interface_name == 'DataView' %}Byte{% endif %}Length());
   } else {
     NOTREACHED();
   }
-  v8::Local<v8::Object> associatedWrapper = typedArray->associateWithWrapper(v8::Isolate::GetCurrent(), typedArray->wrapperTypeInfo(), object);
+  v8::Local<v8::Object> associatedWrapper = typedArray->AssociateWithWrapper(v8::Isolate::GetCurrent(), typedArray->GetWrapperTypeInfo(), object);
   DCHECK(associatedWrapper == object);
 
-  return typedArray->toImpl<{{cpp_class}}>();
+  return typedArray->ToImpl<{{cpp_class}}>();
 }
 
 {% endif %}
@@ -891,10 +891,10 @@ v8::Local<v8::Object> {{v8_class}}::findInstanceInPrototypeChain(v8::Local<v8::V
 
 {##############################################################################}
 {% block native_value_traits %}
-{{cpp_class}}* NativeValueTraits<{{cpp_class}}>::nativeValue(v8::Isolate* isolate, v8::Local<v8::Value> value, ExceptionState& exceptionState) {
+{{cpp_class}}* NativeValueTraits<{{cpp_class}}>::NativeValue(v8::Isolate* isolate, v8::Local<v8::Value> value, ExceptionState& exceptionState) {
   {{cpp_class}}* nativeValue = {{v8_class}}::toImplWithTypeCheck(isolate, value);
   if (!nativeValue)
-    exceptionState.throwTypeError("Unable to convert value to {{interface_name}}.");
+    exceptionState.ThrowTypeError("Unable to convert value to {{interface_name}}.");
   return nativeValue;
 }
 
@@ -926,7 +926,7 @@ void {{v8_class}}::updateWrapperTypeInfo(
       installRuntimeEnabledFunction;
   {% endif %}
   if (preparePrototypeAndInterfaceObjectFunction) {
-    {{v8_class}}::wrapperTypeInfo.preparePrototypeAndInterfaceObjectFunction =
+    {{v8_class}}::wrapperTypeInfo.prepare_prototype_and_interface_object_function =
         preparePrototypeAndInterfaceObjectFunction;
   }
 }
diff --git a/third_party/WebKit/Source/bindings/templates/interface.h.tmpl b/third_party/WebKit/Source/bindings/templates/interface.h.tmpl
index 88b5b51865f1..a87f5d0a4ebe 100644
--- a/third_party/WebKit/Source/bindings/templates/interface.h.tmpl
+++ b/third_party/WebKit/Source/bindings/templates/interface.h.tmpl
@@ -39,7 +39,7 @@ class {{v8_class}} {
   {{exported}}static v8::Local<v8::FunctionTemplate> domTemplateForNamedPropertiesObject(v8::Isolate*, const DOMWrapperWorld&);
   {% endif %}
   static {{cpp_class}}* toImpl(v8::Local<v8::Object> object) {
-    return toScriptWrappable(object)->toImpl<{{cpp_class}}>();
+    return ToScriptWrappable(object)->ToImpl<{{cpp_class}}>();
   }
   {% endif %}
   {{exported}}static {{cpp_class}}* toImplWithTypeCheck(v8::Isolate*, v8::Local<v8::Value>);
@@ -48,11 +48,11 @@ class {{v8_class}} {
   {% else %}
   {{exported}}static const WrapperTypeInfo wrapperTypeInfo;
   {% endif %}
-  static void trace(Visitor* visitor, ScriptWrappable* scriptWrappable) {
-    visitor->trace(scriptWrappable->toImpl<{{cpp_class}}>());
+  static void Trace(Visitor* visitor, ScriptWrappable* scriptWrappable) {
+    visitor->Trace(scriptWrappable->ToImpl<{{cpp_class}}>());
   }
-  static void traceWrappers(WrapperVisitor* visitor, ScriptWrappable* scriptWrappable) {
-    visitor->traceWrappers(scriptWrappable->toImpl<{{cpp_class}}>());
+  static void TraceWrappers(WrapperVisitor* visitor, ScriptWrappable* scriptWrappable) {
+    visitor->TraceWrappers(scriptWrappable->ToImpl<{{cpp_class}}>());
   }
   {% for method in methods %}
   {% if method.is_custom %}
@@ -120,7 +120,7 @@ class {{v8_class}} {
   {% set custom_internal_field_counter = 0 %}
   {% if is_event_target and not is_node %}
   {# Event listeners on DOM nodes are explicitly supported in the GC controller. #}
-  static const int eventListenerCacheIndex = v8DefaultWrapperInternalFieldCount + {{custom_internal_field_counter}};
+  static const int eventListenerCacheIndex = kV8DefaultWrapperInternalFieldCount + {{custom_internal_field_counter}};
   {% set custom_internal_field_counter = custom_internal_field_counter + 1 %}
   {% endif %}
   {# persistentHandleIndex must be the last field, if it is present.
@@ -128,7 +128,7 @@ class {{v8_class}} {
      FIXME: Remove this internal field, and share one field for either:
      * a persistent handle (if the object is in oilpan) or
      * a C++ pointer to the DOM object (if the object is not in oilpan) #}
-  static const int internalFieldCount = v8DefaultWrapperInternalFieldCount + {{custom_internal_field_counter}};
+  static const int internalFieldCount = kV8DefaultWrapperInternalFieldCount + {{custom_internal_field_counter}};
   {# End custom internal fields #}
   {% if prepare_prototype_and_interface_object_func %}
   {{exported}}static void preparePrototypeAndInterfaceObject(v8::Local<v8::Context>, const DOMWrapperWorld&, v8::Local<v8::Object> prototypeObject, v8::Local<v8::Function> interfaceObject, v8::Local<v8::FunctionTemplate> interfaceTemplate);
@@ -275,7 +275,7 @@ class {{v8_class}} {
 {% endif %}
 template <>
 struct NativeValueTraits<{{cpp_class}}> : public NativeValueTraitsBase<{{cpp_class}}> {
-  {{exported}}static {{cpp_class}}* nativeValue(v8::Isolate*, v8::Local<v8::Value>, ExceptionState&);
+  {{exported}}static {{cpp_class}}* NativeValue(v8::Isolate*, v8::Local<v8::Value>, ExceptionState&);
 };
 
 template <>
diff --git a/third_party/WebKit/Source/bindings/templates/interface_base.cpp.tmpl b/third_party/WebKit/Source/bindings/templates/interface_base.cpp.tmpl
index c4826362fc0b..83b24c6ac27c 100644
--- a/third_party/WebKit/Source/bindings/templates/interface_base.cpp.tmpl
+++ b/third_party/WebKit/Source/bindings/templates/interface_base.cpp.tmpl
@@ -11,12 +11,12 @@ namespace blink {
 {% set dom_template = '%s::domTemplate' % v8_class if not is_array_buffer_or_view else '0' %}
 {% set parent_wrapper_type_info = '&V8%s::wrapperTypeInfo' % parent_interface
                                   if parent_interface else '0' %}
-{% set wrapper_type_prototype = 'WrapperTypeExceptionPrototype' if is_exception else
-                                'WrapperTypeObjectPrototype' %}
+{% set wrapper_type_prototype = 'kWrapperTypeExceptionPrototype' if is_exception else
+                                'kWrapperTypeObjectPrototype' %}
 {% set active_scriptwrappable_inheritance =
-    'InheritFromActiveScriptWrappable'
+    'kInheritFromActiveScriptWrappable'
     if active_scriptwrappable else
-    'NotInheritFromActiveScriptWrappable' %}
+    'kNotInheritFromActiveScriptWrappable' %}
 
 {% set wrapper_type_info_const = '' if has_partial_interface else 'const ' %}
 {% if not is_partial %}
@@ -26,7 +26,7 @@ namespace blink {
 #pragma clang diagnostic push
 #pragma clang diagnostic ignored "-Wglobal-constructors"
 #endif
-{{wrapper_type_info_const}}WrapperTypeInfo {{v8_class}}::wrapperTypeInfo = { gin::kEmbedderBlink, {{dom_template}}, {{v8_class}}::trace, {{v8_class}}::traceWrappers, {{prepare_prototype_and_interface_object_func or 'nullptr'}}, "{{interface_name}}", {{parent_wrapper_type_info}}, WrapperTypeInfo::{{wrapper_type_prototype}}, WrapperTypeInfo::{{wrapper_class_id}}, WrapperTypeInfo::{{active_scriptwrappable_inheritance}}, WrapperTypeInfo::{{lifetime}} };
+{{wrapper_type_info_const}}WrapperTypeInfo {{v8_class}}::wrapperTypeInfo = { gin::kEmbedderBlink, {{dom_template}}, {{v8_class}}::Trace, {{v8_class}}::TraceWrappers, {{prepare_prototype_and_interface_object_func or 'nullptr'}}, "{{interface_name}}", {{parent_wrapper_type_info}}, WrapperTypeInfo::{{wrapper_type_prototype}}, WrapperTypeInfo::{{wrapper_class_id}}, WrapperTypeInfo::{{active_scriptwrappable_inheritance}}, WrapperTypeInfo::{{lifetime}} };
 #if defined(COMPONENT_BUILD) && defined(WIN32) && COMPILER(CLANG)
 #pragma clang diagnostic pop
 #endif
@@ -35,7 +35,7 @@ namespace blink {
 // This static member must be declared by DEFINE_WRAPPERTYPEINFO in {{cpp_class}}.h.
 // For details, see the comment of DEFINE_WRAPPERTYPEINFO in
 // bindings/core/v8/ScriptWrappable.h.
-const WrapperTypeInfo& {{cpp_class}}::s_wrapperTypeInfo = {{v8_class}}::wrapperTypeInfo;
+const WrapperTypeInfo& {{cpp_class}}::wrapper_type_info_ = {{v8_class}}::wrapperTypeInfo;
 {% endif %}
 
 {% if active_scriptwrappable %}
@@ -46,8 +46,8 @@ static_assert(
     "[ActiveScriptWrappable] extended attribute in the IDL file.  "
     "Be consistent.");
 static_assert(
-    !std::is_same<decltype(&{{cpp_class}}::hasPendingActivity),
-                  decltype(&ScriptWrappable::hasPendingActivity)>::value,
+    !std::is_same<decltype(&{{cpp_class}}::HasPendingActivity),
+                  decltype(&ScriptWrappable::HasPendingActivity)>::value,
     "{{cpp_class}} is not overriding hasPendingActivity(), but is specifying "
     "[ActiveScriptWrappable] extended attribute in the IDL file.  "
     "Be consistent.");
@@ -59,8 +59,8 @@ static_assert(
     "[ActiveScriptWrappable] extended attribute in the IDL file.  "
     "Be consistent.");
 static_assert(
-    std::is_same<decltype(&{{cpp_class}}::hasPendingActivity),
-                 decltype(&ScriptWrappable::hasPendingActivity)>::value,
+    std::is_same<decltype(&{{cpp_class}}::HasPendingActivity),
+                 decltype(&ScriptWrappable::HasPendingActivity)>::value,
     "{{cpp_class}} is overriding hasPendingActivity(), but is not specifying "
     "[ActiveScriptWrappable] extended attribute in the IDL file.  "
     "Be consistent.");
@@ -240,10 +240,10 @@ bool {{v8_class_or_partial}}::securityCheck(v8::Local<v8::Context> accessingCont
     return false;  // the frame is gone.
 
   const DOMWindow* targetWindow = V8Window::toImpl(window);
-  return BindingSecurity::shouldAllowAccessTo(toLocalDOMWindow(accessingContext), targetWindow, BindingSecurity::ErrorReportOption::DoNotReport);
+  return BindingSecurity::ShouldAllowAccessTo(ToLocalDOMWindow(accessingContext), targetWindow, BindingSecurity::ErrorReportOption::kDoNotReport);
   {% elif interface_name == 'Location' %}
   {{cpp_class}}* impl = {{v8_class}}::toImpl(accessedObject);
-  return BindingSecurity::shouldAllowAccessTo(toLocalDOMWindow(accessingContext), impl, BindingSecurity::ErrorReportOption::DoNotReport);
+  return BindingSecurity::ShouldAllowAccessTo(ToLocalDOMWindow(accessingContext), impl, BindingSecurity::ErrorReportOption::kDoNotReport);
   {% else %}
   #error "Unexpected security check for interface {{interface_name}}"
   {% endif %}
@@ -253,7 +253,7 @@ bool {{v8_class_or_partial}}::securityCheck(v8::Local<v8::Context> accessingCont
 void {{v8_class_or_partial}}::crossOriginNamedGetter(v8::Local<v8::Name> name, const v8::PropertyCallbackInfo<v8::Value>& info) {
   if (!name->IsString())
     return;
-  const AtomicString& propertyName = toCoreAtomicString(name.As<v8::String>());
+  const AtomicString& propertyName = ToCoreAtomicString(name.As<v8::String>());
 
   for (const auto& attribute : {{cpp_class_or_partial}}V8Internal::kCrossOriginAttributeTable) {
     if (propertyName == attribute.name && attribute.getter) {
@@ -269,9 +269,9 @@ void {{v8_class_or_partial}}::crossOriginNamedGetter(v8::Local<v8::Name> name, c
   {{cpp_class}}V8Internal::namedPropertyGetter(propertyName, info);
   {% endif %}
   {% else %}
-  BindingSecurity::failedAccessCheckFor(
+  BindingSecurity::FailedAccessCheckFor(
       info.GetIsolate(),
-      {{v8_class}}::toImpl(info.Holder())->frame());
+      {{v8_class}}::toImpl(info.Holder())->GetFrame());
   {% endif %}
 }
 {% endif %}
@@ -280,7 +280,7 @@ void {{v8_class_or_partial}}::crossOriginNamedGetter(v8::Local<v8::Name> name, c
 void {{v8_class_or_partial}}::crossOriginNamedSetter(v8::Local<v8::Name> name, v8::Local<v8::Value> value, const v8::PropertyCallbackInfo<v8::Value>& info) {
   if (!name->IsString())
     return;
-  const AtomicString& propertyName = toCoreAtomicString(name.As<v8::String>());
+  const AtomicString& propertyName = ToCoreAtomicString(name.As<v8::String>());
 
   for (const auto& attribute : {{cpp_class_or_partial}}V8Internal::kCrossOriginAttributeTable) {
     if (propertyName == attribute.name && attribute.setter) {
@@ -293,9 +293,9 @@ void {{v8_class_or_partial}}::crossOriginNamedSetter(v8::Local<v8::Name> name, v
      an access check failure: there are no custom named setters that are
      accessible from a cross-origin context. #}
 
-  BindingSecurity::failedAccessCheckFor(
+  BindingSecurity::FailedAccessCheckFor(
       info.GetIsolate(),
-      {{v8_class}}::toImpl(info.Holder())->frame());
+      {{v8_class}}::toImpl(info.Holder())->GetFrame());
 }
 {% endif %}
 
@@ -307,7 +307,7 @@ void {{v8_class_or_partial}}::crossOriginNamedEnumerator(const v8::PropertyCallb
 
   // Use the current context as the creation context, as a cross-origin access
   // may involve an object that does not have a creation context.
-  v8SetReturnValue(info,
+  V8SetReturnValue(info,
                    ToV8(names, info.GetIsolate()->GetCurrentContext()->Global(),
                         info.GetIsolate()).As<v8::Array>());
 }
@@ -417,7 +417,7 @@ static void install{{v8_class}}Template(v8::Isolate* isolate, const DOMWrapperWo
          'V8%s::domTemplate(isolate, world)' % parent_interface
          if parent_interface else
          'v8::Local<v8::FunctionTemplate>()' %}
-  V8DOMConfiguration::initializeDOMInterfaceTemplate(isolate, interfaceTemplate, {{v8_class}}::wrapperTypeInfo.interfaceName, {{parent_interface_template}}, {{v8_class}}::internalFieldCount);
+  V8DOMConfiguration::InitializeDOMInterfaceTemplate(isolate, interfaceTemplate, {{v8_class}}::wrapperTypeInfo.interface_name, {{parent_interface_template}}, {{v8_class}}::internalFieldCount);
   {% if constructors or has_custom_constructor or has_event_constructor or has_html_constructor %}
   interfaceTemplate->SetCallHandler({{v8_class}}::constructorCallback);
   interfaceTemplate->SetLength({{interface_length}});
@@ -456,16 +456,16 @@ static void install{{v8_class}}Template(v8::Isolate* isolate, const DOMWrapperWo
   {{install_constants() | indent(2)}}
   {% endif %}
   {% if data_attributes %}
-  V8DOMConfiguration::installAttributes(isolate, world, instanceTemplate, prototypeTemplate, {{'%sAttributes' % v8_class}}, {{'WTF_ARRAY_LENGTH(%sAttributes)' % v8_class}});
+  V8DOMConfiguration::InstallAttributes(isolate, world, instanceTemplate, prototypeTemplate, {{'%sAttributes' % v8_class}}, {{'WTF_ARRAY_LENGTH(%sAttributes)' % v8_class}});
   {% endif %}
   {% if lazy_data_attributes %}
-  V8DOMConfiguration::installLazyDataAttributes(isolate, world, instanceTemplate, prototypeTemplate, {{'%sLazyDataAttributes' % v8_class}}, {{'WTF_ARRAY_LENGTH(%sLazyDataAttributes)' % v8_class}});
+  V8DOMConfiguration::InstallLazyDataAttributes(isolate, world, instanceTemplate, prototypeTemplate, {{'%sLazyDataAttributes' % v8_class}}, {{'WTF_ARRAY_LENGTH(%sLazyDataAttributes)' % v8_class}});
   {% endif %}
   {% if accessors %}
-  V8DOMConfiguration::installAccessors(isolate, world, instanceTemplate, prototypeTemplate, interfaceTemplate, signature, {{'%sAccessors' % v8_class}}, {{'WTF_ARRAY_LENGTH(%sAccessors)' % v8_class}});
+  V8DOMConfiguration::InstallAccessors(isolate, world, instanceTemplate, prototypeTemplate, interfaceTemplate, signature, {{'%sAccessors' % v8_class}}, {{'WTF_ARRAY_LENGTH(%sAccessors)' % v8_class}});
   {% endif %}
   {% if methods | has_method_configuration(is_partial) %}
-  V8DOMConfiguration::installMethods(isolate, world, instanceTemplate, prototypeTemplate, interfaceTemplate, signature, {{'%sMethods' % v8_class}}, {{'WTF_ARRAY_LENGTH(%sMethods)' % v8_class}});
+  V8DOMConfiguration::InstallMethods(isolate, world, instanceTemplate, prototypeTemplate, interfaceTemplate, signature, {{'%sMethods' % v8_class}}, {{'WTF_ARRAY_LENGTH(%sMethods)' % v8_class}});
   {% endif %}
 
   {% if has_access_check_callbacks and not is_partial %}
@@ -485,13 +485,13 @@ static void install{{v8_class}}Template(v8::Isolate* isolate, const DOMWrapperWo
     {{attribute_configuration(attribute) | indent(2)}}
   };
   for (const auto& attributeConfig : attribute{{attribute.name}}Configuration)
-    V8DOMConfiguration::installAttribute(isolate, world, instanceTemplate, prototypeTemplate, attributeConfig);
+    V8DOMConfiguration::InstallAttribute(isolate, world, instanceTemplate, prototypeTemplate, attributeConfig);
   {% else %}
   static const V8DOMConfiguration::AccessorConfiguration accessor{{attribute.name}}Configuration[] = {
     {{attribute_configuration(attribute) | indent(2)}}
   };
   for (const auto& accessorConfig : accessor{{attribute.name}}Configuration)
-    V8DOMConfiguration::installAccessor(isolate, world, instanceTemplate, prototypeTemplate, interfaceTemplate, signature, accessorConfig);
+    V8DOMConfiguration::InstallAccessor(isolate, world, instanceTemplate, prototypeTemplate, interfaceTemplate, signature, accessorConfig);
   {% endif %}
   {% endfor %}
   {% endfilter %}
@@ -515,10 +515,10 @@ static void install{{v8_class}}Template(v8::Isolate* isolate, const DOMWrapperWo
   {% endif %}
   // For value iterators, the properties below must originally be set to the corresponding ones in %ArrayPrototype%.
   // See https://heycam.github.io/webidl/#es-iterators.
-  prototypeTemplate->SetIntrinsicDataProperty(v8AtomicString(isolate, "entries"), v8::kArrayProto_entries);
-  prototypeTemplate->SetIntrinsicDataProperty(v8AtomicString(isolate, "forEach"), v8::kArrayProto_forEach);
-  prototypeTemplate->SetIntrinsicDataProperty(v8AtomicString(isolate, "keys"), v8::kArrayProto_keys);
-  prototypeTemplate->SetIntrinsicDataProperty(v8AtomicString(isolate, "values"), v8::kArrayProto_values);
+  prototypeTemplate->SetIntrinsicDataProperty(V8AtomicString(isolate, "entries"), v8::kArrayProto_entries);
+  prototypeTemplate->SetIntrinsicDataProperty(V8AtomicString(isolate, "forEach"), v8::kArrayProto_forEach);
+  prototypeTemplate->SetIntrinsicDataProperty(V8AtomicString(isolate, "keys"), v8::kArrayProto_keys);
+  prototypeTemplate->SetIntrinsicDataProperty(V8AtomicString(isolate, "values"), v8::kArrayProto_values);
   {% endif %}
   {% endif %}
 
@@ -526,8 +526,8 @@ static void install{{v8_class}}Template(v8::Isolate* isolate, const DOMWrapperWo
   {% filter exposed(iterator_method.exposed_test) %}
   {% filter runtime_enabled(iterator_method.runtime_enabled_feature_name) %}
   // Iterator (@@iterator)
-  static const V8DOMConfiguration::SymbolKeyedMethodConfiguration symbolKeyedIteratorConfiguration = { v8::Symbol::GetIterator, {{v8_class_or_partial}}::iteratorMethodCallback, 0, v8::DontEnum, V8DOMConfiguration::OnPrototype, V8DOMConfiguration::CheckHolder, V8DOMConfiguration::DoNotCheckAccess };
-  V8DOMConfiguration::installMethod(isolate, world, prototypeTemplate, signature, symbolKeyedIteratorConfiguration);
+  static const V8DOMConfiguration::SymbolKeyedMethodConfiguration symbolKeyedIteratorConfiguration = { v8::Symbol::GetIterator, {{v8_class_or_partial}}::iteratorMethodCallback, 0, v8::DontEnum, V8DOMConfiguration::kOnPrototype, V8DOMConfiguration::kCheckHolder, V8DOMConfiguration::kDoNotCheckAccess };
+  V8DOMConfiguration::InstallMethod(isolate, world, prototypeTemplate, signature, symbolKeyedIteratorConfiguration);
   {% endfilter %}
   {% endfilter %}
   {% endif %}
@@ -605,13 +605,13 @@ void {{v8_class_or_partial}}::installRuntimeEnabledFeatures(v8::Isolate* isolate
     {{attribute_configuration(attribute) | indent(2)}}
   };
   for (const auto& attributeConfig : attribute{{attribute.name}}Configuration)
-    V8DOMConfiguration::installAttribute(isolate, world, instance, prototype, attributeConfig);
+    V8DOMConfiguration::InstallAttribute(isolate, world, instance, prototype, attributeConfig);
   {% else %}
   static const V8DOMConfiguration::AccessorConfiguration accessor{{attribute.name}}Configuration[] = {
     {{attribute_configuration(attribute) | indent(2)}}
   };
   for (const auto& accessorConfig : accessor{{attribute.name}}Configuration)
-    V8DOMConfiguration::installAccessor(isolate, world, instance, prototype, interface, signature, accessorConfig);
+    V8DOMConfiguration::InstallAccessor(isolate, world, instance, prototype, interface, signature, accessorConfig);
   {% endif %}
   {% endfor %}
   {% endfilter %}
@@ -667,20 +667,20 @@ void {{v8_class_or_partial}}::install{{feature.name}}(v8::Isolate* isolate, cons
     {{attribute_configuration(attribute) | indent(2)}}
   };
   for (const auto& attributeConfig : attribute{{attribute.name}}Configuration)
-    V8DOMConfiguration::installAttribute(isolate, world, instance, prototype, attributeConfig);
+    V8DOMConfiguration::InstallAttribute(isolate, world, instance, prototype, attributeConfig);
   {% else %}
   static const V8DOMConfiguration::AccessorConfiguration accessor{{attribute.name}}Configuration[] = {
     {{attribute_configuration(attribute) | indent(2)}}
   };
   for (const auto& accessorConfig : accessor{{attribute.name}}Configuration)
-    V8DOMConfiguration::installAccessor(isolate, world, instance, prototype, interface, signature, accessorConfig);
+    V8DOMConfiguration::InstallAccessor(isolate, world, instance, prototype, interface, signature, accessorConfig);
   {% endif %}
   {% endfor %}
   {# Origin-Trial-enabled constants #}
   {% for constant in feature.constants %}
   {% set constant_name = constant.name.title().replace('_', '') %}
   const V8DOMConfiguration::ConstantConfiguration constant{{constant_name}}Configuration = {{constant_configuration(constant)}};
-  V8DOMConfiguration::installConstant(isolate, interface, prototype, constant{{constant_name}}Configuration);
+  V8DOMConfiguration::InstallConstant(isolate, interface, prototype, constant{{constant_name}}Configuration);
   {% endfor %}
   {# Origin-Trial-enabled methods (no overloads) #}
   {% for method in feature.methods %}
@@ -689,16 +689,16 @@ void {{v8_class_or_partial}}::install{{feature.name}}(v8::Isolate* isolate, cons
     {{method_configuration(method) | indent(2)}}
   };
   for (const auto& methodConfig : method{{method_name}}Configuration)
-    V8DOMConfiguration::installMethod(isolate, world, instance, prototype, interface, signature, methodConfig);
+    V8DOMConfiguration::InstallMethod(isolate, world, instance, prototype, interface, signature, methodConfig);
   {% endfor %}
 }
 
 void {{v8_class_or_partial}}::install{{feature.name}}(ScriptState* scriptState, v8::Local<v8::Object> instance) {
-  V8PerContextData* perContextData = V8PerContextData::from(scriptState->context());
-  v8::Local<v8::Object> prototype = perContextData->prototypeForType(&{{v8_class}}::wrapperTypeInfo);
-  v8::Local<v8::Function> interface = perContextData->constructorForType(&{{v8_class}}::wrapperTypeInfo);
+  V8PerContextData* perContextData = V8PerContextData::From(scriptState->GetContext());
+  v8::Local<v8::Object> prototype = perContextData->PrototypeForType(&{{v8_class}}::wrapperTypeInfo);
+  v8::Local<v8::Function> interface = perContextData->ConstructorForType(&{{v8_class}}::wrapperTypeInfo);
   ALLOW_UNUSED_LOCAL(interface);
-  install{{feature.name}}(scriptState->isolate(), scriptState->world(), instance, prototype, interface);
+  install{{feature.name}}(scriptState->GetIsolate(), scriptState->World(), instance, prototype, interface);
 }
 {% if not feature.needs_instance %}
 
@@ -729,20 +729,20 @@ void {{v8_class_or_partial}}::preparePrototypeAndInterfaceObject(v8::Local<v8::C
   v8::Isolate* isolate = context->GetIsolate();
   {% if has_conditional_attributes_on_prototype or methods | conditionally_exposed(is_partial) %}
   v8::Local<v8::Signature> signature = v8::Signature::New(isolate, interfaceTemplate);
-  ExecutionContext* executionContext = toExecutionContext(context);
+  ExecutionContext* executionContext = ToExecutionContext(context);
   DCHECK(executionContext);
   {% endif %}
 
 {% if unscopables %}
   v8::Local<v8::Name> unscopablesSymbol(v8::Symbol::GetUnscopables(isolate));
   v8::Local<v8::Object> unscopables;
-  if (v8CallBoolean(prototypeObject->HasOwnProperty(context, unscopablesSymbol)))
+  if (V8CallBoolean(prototypeObject->HasOwnProperty(context, unscopablesSymbol)))
     unscopables = prototypeObject->Get(context, unscopablesSymbol).ToLocalChecked().As<v8::Object>();
   else
     unscopables = v8::Object::New(isolate);
   {% for name, runtime_enabled_feature_name in unscopables %}
   {% filter runtime_enabled(runtime_enabled_feature_name) %}
-  unscopables->CreateDataProperty(context, v8AtomicString(isolate, "{{name}}"), v8::True(isolate)).FromJust();
+  unscopables->CreateDataProperty(context, V8AtomicString(isolate, "{{name}}"), v8::True(isolate)).FromJust();
   {% endfilter %}
   {% endfor %}
   prototypeObject->CreateDataProperty(context, unscopablesSymbol, unscopables).FromJust();
diff --git a/third_party/WebKit/Source/bindings/templates/methods.cpp.tmpl b/third_party/WebKit/Source/bindings/templates/methods.cpp.tmpl
index 8033b620f5a2..71453338eb3a 100644
--- a/third_party/WebKit/Source/bindings/templates/methods.cpp.tmpl
+++ b/third_party/WebKit/Source/bindings/templates/methods.cpp.tmpl
@@ -7,7 +7,7 @@ static void {{method.name}}{{method.overload_index}}Method{{world_suffix}}(const
       'ExceptionState exceptionState',
       'ScriptState* scriptState = ']) %}
   {% set define_exception_state -%}
-  ExceptionState exceptionState(info.GetIsolate(), ExceptionState::ExecutionContext, "{{interface_name}}", "{{method.name}}");
+  ExceptionState exceptionState(info.GetIsolate(), ExceptionState::kExecutionContext, "{{interface_name}}", "{{method.name}}");
   {%- endset %}
 
   {% set function_call = func_call_with_prep_of_args(method, world_suffix) %}
@@ -22,7 +22,7 @@ static void {{method.name}}{{method.overload_index}}Method{{world_suffix}}(const
 
   {% if not method.is_static %}
   {% if method.returns_promise %}
-  // V8DOMConfiguration::DoNotCheckHolder
+  // V8DOMConfiguration::kDoNotCheckHolder
   // Make sure that info.Holder() really points to an instance of the type.
   if (!{{v8_class}}::hasInstance(info.Holder(), info.GetIsolate())) {
     {{throw_type_error(method, '"Illegal invocation"')}}
@@ -33,7 +33,7 @@ static void {{method.name}}{{method.overload_index}}Method{{world_suffix}}(const
   // Same-origin methods are never exposed via the cross-origin interceptors.
   // Since same-origin access requires a LocalDOMWindow, it is safe to downcast
   // here.
-  LocalDOMWindow* impl = toLocalDOMWindow({{v8_class}}::toImpl(info.Holder()));
+  LocalDOMWindow* impl = ToLocalDOMWindow({{v8_class}}::toImpl(info.Holder()));
   {% else %}
   {{cpp_class}}* impl = {{v8_class}}::toImpl(info.Holder());
   {% endif %}{# interface_name == 'Window' and not method.is_cross_origin #}
@@ -42,17 +42,17 @@ static void {{method.name}}{{method.overload_index}}Method{{world_suffix}}(const
   {# Security checks #}
   {% if method.is_check_security_for_return_value %}
   {{define_exception_state}}
-  if (!BindingSecurity::shouldAllowAccessTo(currentDOMWindow(info.GetIsolate()), {{method.cpp_value}}, exceptionState)) {
-    v8SetReturnValueNull(info);
+  if (!BindingSecurity::ShouldAllowAccessTo(CurrentDOMWindow(info.GetIsolate()), {{method.cpp_value}}, exceptionState)) {
+    V8SetReturnValueNull(info);
     return;
   }
   {% endif %}
 
   {% if 'scriptState' in function_call %}
   {% if method.is_static %}
-  ScriptState* scriptState = ScriptState::forFunctionObject(info);
+  ScriptState* scriptState = ScriptState::ForFunctionObject(info);
   {% else %}
-  ScriptState* scriptState = ScriptState::forReceiverObject(info);
+  ScriptState* scriptState = ScriptState::ForReceiverObject(info);
   {% endif %}
   {% endif %}
 
@@ -85,7 +85,7 @@ static void {{method.name}}{{method.overload_index}}Method{{world_suffix}}(const
 {% if method.number_of_required_arguments and not method.overload_index %}
 if (UNLIKELY(info.Length() < {{method.number_of_required_arguments}})) {
   {{throw_type_error(method,
-        'ExceptionMessages::notEnoughArguments(%(expected)d, info.Length())'
+        'ExceptionMessages::NotEnoughArguments(%(expected)d, info.Length())'
         | format(expected=method.number_of_required_arguments))}}
   return;
 }
@@ -139,21 +139,21 @@ if (UNLIKELY(numArgsPassed <= {{argument.index}})) {
 {% if argument.is_callback_interface %}
 {# FIXME: remove EventListener special case #}
 {% if argument.idl_type == 'EventListener' %}
-{% if method.name == 'removeEventListener' or method.name == 'removeListener' %}
-{{argument.name}} = V8EventListenerHelper::getEventListener(ScriptState::current(info.GetIsolate()), info[{{argument.index}}], false, ListenerFindOnly);
-{% else %}{# method.name == 'addEventListener' #}
-{{argument.name}} = V8EventListenerHelper::getEventListener(ScriptState::current(info.GetIsolate()), info[{{argument.index}}], false, ListenerFindOrCreate);
+{% if method.name == 'RemoveEventListener' or method.name == 'RemoveListener' %}
+{{argument.name}} = V8EventListenerHelper::GetEventListener(ScriptState::Current(info.GetIsolate()), info[{{argument.index}}], false, kListenerFindOnly);
+{% else %}{# method.name == 'AddEventListener' #}
+{{argument.name}} = V8EventListenerHelper::GetEventListener(ScriptState::Current(info.GetIsolate()), info[{{argument.index}}], false, kListenerFindOrCreate);
 {% endif %}{# method.name #}
 {% else %}{# argument.idl_type == 'EventListener' #}
 {# Callback functions must be functions:
    http://www.w3.org/TR/WebIDL/#es-callback-function #}
 {% if argument.is_optional %}
-if (!isUndefinedOrNull(info[{{argument.index}}])) {
+if (!IsUndefinedOrNull(info[{{argument.index}}])) {
   if (!info[{{argument.index}}]->IsFunction()) {
     {{throw_argument_error(method, argument, "The callback provided as parameter %(index)d is not a function.")}}
     return;
   }
-  {{argument.name}} = V8{{argument.idl_type}}::create(v8::Local<v8::Function>::Cast(info[{{argument.index}}]), ScriptState::current(info.GetIsolate()));
+  {{argument.name}} = V8{{argument.idl_type}}::Create(v8::Local<v8::Function>::Cast(info[{{argument.index}}]), ScriptState::Current(info.GetIsolate()));
 } else {
   {{argument.name}} = nullptr;
 }
@@ -162,11 +162,11 @@ if (info.Length() <= {{argument.index}} || !{% if argument.is_nullable %}(info[{
   {{throw_argument_error(method, argument, "The callback provided as parameter %(index)d is not a function.")}}
   return;
 }
-{{argument.name}} = {% if argument.is_nullable %}info[{{argument.index}}]->IsNull() ? nullptr : {% endif %}V8{{argument.idl_type}}::create(v8::Local<v8::Function>::Cast(info[{{argument.index}}]), ScriptState::current(info.GetIsolate()));
+{{argument.name}} = {% if argument.is_nullable %}info[{{argument.index}}]->IsNull() ? nullptr : {% endif %}V8{{argument.idl_type}}::Create(v8::Local<v8::Function>::Cast(info[{{argument.index}}]), ScriptState::Current(info.GetIsolate()));
 {% endif %}{# argument.is_optional #}
 {% endif %}{# argument.idl_type == 'EventListener' #}
 {% elif argument.is_callback_function %}
-if ({% if argument.is_nullable %}!isUndefinedOrNull(info[{{argument.index}}]) && {% endif %}!(info[{{argument.index}}]->IsObject() && v8::Local<v8::Object>::Cast(info[{{argument.index}}])->IsCallable())) {
+if ({% if argument.is_nullable %}!IsUndefinedOrNull(info[{{argument.index}}]) && {% endif %}!(info[{{argument.index}}]->IsObject() && v8::Local<v8::Object>::Cast(info[{{argument.index}}])->IsCallable())) {
   {{throw_argument_error(method, argument, "The callback provided as parameter %(index)d is not a function.")}}
   return;
 }
@@ -183,14 +183,14 @@ for (int i = {{argument.index}}; i < info.Length(); ++i) {
 {% if not argument.use_permissive_dictionary_conversion %}
 {# Dictionaries must have type Undefined, Null or Object:
    http://heycam.github.io/webidl/#es-dictionary #}
-if (!isUndefinedOrNull(info[{{argument.index}}]) && !info[{{argument.index}}]->IsObject()) {
+if (!IsUndefinedOrNull(info[{{argument.index}}]) && !info[{{argument.index}}]->IsObject()) {
   {{throw_argument_error(method, argument, "parameter %(index)d ('%(name)s') is not an object.")}}
   return;
 }
 {% endif %}{# not argument.use_permissive_dictionary_conversion #}
 {{v8_value_to_local_cpp_value(argument)}}
 {% elif argument.is_explicit_nullable %}
-if (!isUndefinedOrNull(info[{{argument.index}}])) {
+if (!IsUndefinedOrNull(info[{{argument.index}}])) {
   {{v8_value_to_local_cpp_value(argument) | indent(2)}}
 }
 {% else %}{# argument.is_nullable #}
@@ -203,7 +203,7 @@ if (!isUndefinedOrNull(info[{{argument.index}}])) {
    throw a TypeError), per http://www.w3.org/TR/WebIDL/#es-interface
    Note: for variadic arguments, the type checking is done for each matched
    argument instead; see argument.is_variadic_wrapper_type code-path above. #}
-if (!{{argument.name}}{% if argument.is_nullable %} && !isUndefinedOrNull(info[{{argument.index}}]){% endif %}) {
+if (!{{argument.name}}{% if argument.is_nullable %} && !IsUndefinedOrNull(info[{{argument.index}}]){% endif %}) {
   {{throw_argument_error(method, argument, "parameter %(index)d is not of type '%(type)s'.")}}
   return;
 }
@@ -211,13 +211,13 @@ if (!{{argument.name}}{% if argument.is_nullable %} && !isUndefinedOrNull(info[{
 {# Invalid enum values: http://www.w3.org/TR/WebIDL/#idl-enums #}
 {% set enum_variable = 'valid' + argument.name[0].upper() + argument.name[1:] + 'Values' %}
 {{declare_enum_validation_variable(argument.enum_values, enum_variable)}}
-if (!isValidEnum({{argument.name}}, {{enum_variable}}, WTF_ARRAY_LENGTH({{enum_variable}}), "{{argument.enum_type}}", exceptionState)) {
+if (!IsValidEnum({{argument.name}}, {{enum_variable}}, WTF_ARRAY_LENGTH({{enum_variable}}), "{{argument.enum_type}}", exceptionState)) {
   return;
 }
 {% elif argument.idl_type == 'Promise' %}
 {# We require this for our implementation of promises, though not in spec:
 http://heycam.github.io/webidl/#es-promise #}
-if (!{{argument.name}}.isUndefinedOrNull() && !{{argument.name}}.isObject()) {
+if (!{{argument.name}}.IsUndefinedOrNull() && !{{argument.name}}.IsObject()) {
   {{throw_argument_error(method, argument, "parameter %(index)d ('%(name)s') is not an object.")}}
   return;
 }
@@ -234,15 +234,15 @@ if (!{{argument.name}}.isUndefinedOrNull() && !{{argument.name}}.isObject()) {
 {% if method.is_call_with_execution_context %}
 {# [ConstructorCallWith=ExecutionContext] #}
 {# [CallWith=ExecutionContext] #}
-ExecutionContext* executionContext = currentExecutionContext(info.GetIsolate());
+ExecutionContext* executionContext = CurrentExecutionContext(info.GetIsolate());
 {% endif %}
 {% if method.is_call_with_script_arguments %}
 {# [CallWith=ScriptArguments] #}
-ScriptArguments* scriptArguments(ScriptArguments::create(scriptState, info, {{method.number_of_arguments}}));
+ScriptArguments* scriptArguments(ScriptArguments::Create(scriptState, info, {{method.number_of_arguments}}));
 {% endif %}
 {% if method.is_call_with_document %}
 {# [ConstructorCallWith=Document] #}
-Document& document = *toDocument(currentExecutionContext(info.GetIsolate()));
+Document& document = *ToDocument(CurrentExecutionContext(info.GetIsolate()));
 {% endif %}
 {# Call #}
 {% if method.idl_type == 'void' %}
@@ -257,7 +257,7 @@ Document& document = *toDocument(currentExecutionContext(info.GetIsolate()));
 {% endif %}
 {# Post-call #}
 {% if method.is_raises_exception %}
-if (exceptionState.hadException()) {
+if (exceptionState.HadException()) {
   return;
 }
 {% endif %}
@@ -265,14 +265,14 @@ if (exceptionState.hadException()) {
 {% if method.is_new_object and not method.do_not_test_new_object %}
 // [NewObject] must always create a new wrapper.  Check that a wrapper
 // does not exist yet.
-DCHECK(!result || DOMDataStore::getWrapper(result, info.GetIsolate()).IsEmpty());
+DCHECK(!result || DOMDataStore::GetWrapper(result, info.GetIsolate()).IsEmpty());
 {% endif %}
 {% if method.is_constructor %}
 {{generate_constructor_wrapper(method)}}
 {%- elif v8_set_return_value %}
 {% if method.is_explicit_nullable %}
-if (result.isNull())
-  v8SetReturnValueNull(info);
+if (result.IsNull())
+  V8SetReturnValueNull(info);
 else
   {{v8_set_return_value}};
 {% else %}
@@ -288,11 +288,11 @@ else
 {##############################################################################}
 {% macro throw_type_error(method, error_message) %}
 {% if method.has_exception_state or method.returns_promise %}
-exceptionState.throwTypeError({{error_message}});
+exceptionState.ThrowTypeError({{error_message}});
 {%- elif method.is_constructor %}
-V8ThrowException::throwTypeError(info.GetIsolate(), ExceptionMessages::failedToConstruct("{{interface_name}}", {{error_message}}));
+V8ThrowException::ThrowTypeError(info.GetIsolate(), ExceptionMessages::FailedToConstruct("{{interface_name}}", {{error_message}}));
 {%- else %}
-V8ThrowException::throwTypeError(info.GetIsolate(), ExceptionMessages::failedToExecute("{{method.name}}", "{{interface_name}}", {{error_message}}));
+V8ThrowException::ThrowTypeError(info.GetIsolate(), ExceptionMessages::FailedToExecute("{{method.name}}", "{{interface_name}}", {{error_message}}));
 {%- endif %}
 {% endmacro %}
 
@@ -338,10 +338,10 @@ static void {{overloads.name}}Method{{world_suffix}}(const v8::FunctionCallbackI
   {% set fall_through_to_partial_overloads = not is_partial and overloads.has_partial_overloads %}
 
   {% if overloads.measure_all_as %}
-  UseCounter::count(currentExecutionContext(info.GetIsolate()), UseCounter::{{overloads.measure_all_as}});
+  UseCounter::Count(CurrentExecutionContext(info.GetIsolate()), UseCounter::k{{overloads.measure_all_as}});
   {% endif %}
   {% if overloads.deprecate_all_as %}
-  Deprecation::countDeprecation(currentExecutionContext(info.GetIsolate()), UseCounter::{{overloads.deprecate_all_as}});
+  Deprecation::CountDeprecation(CurrentExecutionContext(info.GetIsolate()), UseCounter::k{{overloads.deprecate_all_as}});
   {% endif %}
 
   {# First resolve by length #}
@@ -360,10 +360,10 @@ static void {{overloads.name}}Method{{world_suffix}}(const v8::FunctionCallbackI
       {% filter runtime_enabled(not overloads.runtime_enabled_all and method.runtime_enabled_feature_name) %}
       if ({{test}}) {
         {% if method.measure_as and not overloads.measure_all_as %}
-        UseCounter::count(currentExecutionContext(info.GetIsolate()), UseCounter::{{method.measure_as('Method')}});
+        UseCounter::Count(CurrentExecutionContext(info.GetIsolate()), UseCounter::k{{method.measure_as('Method')}});
         {% endif %}
         {% if method.deprecate_as and not overloads.deprecate_all_as %}
-        Deprecation::countDeprecation(currentExecutionContext(info.GetIsolate()), UseCounter::{{method.deprecate_as}});
+        Deprecation::CountDeprecation(CurrentExecutionContext(info.GetIsolate()), UseCounter::k{{method.deprecate_as}});
         {% endif %}
         {{method.name}}{{method.overload_index}}Method{{world_suffix}}(info);
         return;
@@ -387,7 +387,7 @@ static void {{overloads.name}}Method{{world_suffix}}(const v8::FunctionCallbackI
 
   {% else %}{# fall_through_to_partial_overloads #}
 
-  ExceptionState exceptionState(info.GetIsolate(), ExceptionState::ExecutionContext, "{{interface_name}}", "{{overloads.name}}");
+  ExceptionState exceptionState(info.GetIsolate(), ExceptionState::kExecutionContext, "{{interface_name}}", "{{overloads.name}}");
   {% if overloads.returns_promise_all %}
   ExceptionToRejectPromiseScope rejectPromiseScope(info, exceptionState);
   {% endif %}
@@ -395,18 +395,18 @@ static void {{overloads.name}}Method{{world_suffix}}(const v8::FunctionCallbackI
   if (isArityError) {
     {% if overloads.length != 0 %}
     if (info.Length() < {{overloads.length}}) {
-      exceptionState.throwTypeError(ExceptionMessages::notEnoughArguments({{overloads.length}}, info.Length()));
+      exceptionState.ThrowTypeError(ExceptionMessages::NotEnoughArguments({{overloads.length}}, info.Length()));
       return;
     }
     {% endif %}
     {% if overloads.valid_arities %}
     if (info.Length() >= {{overloads.length}}) {
-      exceptionState.throwTypeError(ExceptionMessages::invalidArity("{{overloads.valid_arities}}", info.Length()));
+      exceptionState.ThrowTypeError(ExceptionMessages::InvalidArity("{{overloads.valid_arities}}", info.Length()));
       return;
     }
     {% endif %}
   }
-  exceptionState.throwTypeError("No function was found that matched the signature provided.");
+  exceptionState.ThrowTypeError("No function was found that matched the signature provided.");
 
   {% endif %}{# fall_through_to_partial_overloads #}
 }
@@ -416,27 +416,27 @@ static void {{overloads.name}}Method{{world_suffix}}(const v8::FunctionCallbackI
 {##############################################################################}
 {% macro generate_post_message_impl(method) %}
 static void postMessageImpl(const char* interfaceName, {{cpp_class}}* instance, const v8::FunctionCallbackInfo<v8::Value>& info) {
-  ExceptionState exceptionState(info.GetIsolate(), ExceptionState::ExecutionContext, interfaceName, "postMessage");
+  ExceptionState exceptionState(info.GetIsolate(), ExceptionState::kExecutionContext, interfaceName, "postMessage");
   if (UNLIKELY(info.Length() < {{method.number_of_required_arguments}})) {
-    exceptionState.throwTypeError(ExceptionMessages::notEnoughArguments({{method.number_of_required_arguments}}, info.Length()));
+    exceptionState.ThrowTypeError(ExceptionMessages::NotEnoughArguments({{method.number_of_required_arguments}}, info.Length()));
     return;
   }
 
   Transferables transferables;
   if (info.Length() > 1) {
     const int transferablesArgIndex = 1;
-    if (!SerializedScriptValue::extractTransferables(info.GetIsolate(), info[transferablesArgIndex], transferablesArgIndex, transferables, exceptionState)) {
+    if (!SerializedScriptValue::ExtractTransferables(info.GetIsolate(), info[transferablesArgIndex], transferablesArgIndex, transferables, exceptionState)) {
       return;
     }
   }
 
   RefPtr<SerializedScriptValue> message;
-  if (instance->canTransferArrayBuffersAndImageBitmaps()) {
+  if (instance->CanTransferArrayBuffersAndImageBitmaps()) {
     // This instance supports sending array buffers by move semantics.
     SerializedScriptValue::SerializeOptions options;
     options.transferables = &transferables;
-    message = SerializedScriptValue::serialize(info.GetIsolate(), info[0], options, exceptionState);
-    if (exceptionState.hadException())
+    message = SerializedScriptValue::Serialize(info.GetIsolate(), info[0], options, exceptionState);
+    if (exceptionState.HadException())
       return;
   } else {
     // This instance doesn't support sending array buffers and image bitmaps
@@ -447,30 +447,30 @@ static void postMessageImpl(const char* interfaceName, {{cpp_class}}* instance,
     // Clear references to array buffers and image bitmaps from transferables
     // so that the serializer can consider the array buffers as
     // non-transferable and serialize them into the message.
-    ArrayBufferArray transferableArrayBuffers = transferables.arrayBuffers;
-    transferables.arrayBuffers.clear();
-    ImageBitmapArray transferableImageBitmaps = transferables.imageBitmaps;
-    transferables.imageBitmaps.clear();
+    ArrayBufferArray transferableArrayBuffers = transferables.array_buffers;
+    transferables.array_buffers.Clear();
+    ImageBitmapArray transferableImageBitmaps = transferables.image_bitmaps;
+    transferables.image_bitmaps.Clear();
     SerializedScriptValue::SerializeOptions options;
     options.transferables = &transferables;
-    message = SerializedScriptValue::serialize(info.GetIsolate(), info[0], options, exceptionState);
-    if (exceptionState.hadException())
+    message = SerializedScriptValue::Serialize(info.GetIsolate(), info[0], options, exceptionState);
+    if (exceptionState.HadException())
       return;
 
     // Neuter the original array buffers on the sender context.
-    SerializedScriptValue::transferArrayBufferContents(info.GetIsolate(), transferableArrayBuffers, exceptionState);
-    if (exceptionState.hadException())
+    SerializedScriptValue::TransferArrayBufferContents(info.GetIsolate(), transferableArrayBuffers, exceptionState);
+    if (exceptionState.HadException())
       return;
     // Neuter the original image bitmaps on the sender context.
-    SerializedScriptValue::transferImageBitmapContents(info.GetIsolate(), transferableImageBitmaps, exceptionState);
-    if (exceptionState.hadException())
+    SerializedScriptValue::TransferImageBitmapContents(info.GetIsolate(), transferableImageBitmaps, exceptionState);
+    if (exceptionState.HadException())
       return;
   }
 
   // FIXME: Only pass scriptState/exceptionState if instance really requires it.
-  ScriptState* scriptState = ScriptState::current(info.GetIsolate());
-  message->unregisterMemoryAllocatedWithCurrentScriptContext();
-  instance->postMessage(scriptState, message.get(), transferables.messagePorts, exceptionState);
+  ScriptState* scriptState = ScriptState::Current(info.GetIsolate());
+  message->UnregisterMemoryAllocatedWithCurrentScriptContext();
+  instance->postMessage(scriptState, message.Get(), transferables.message_ports, exceptionState);
 }
 {% endmacro %}
 
@@ -480,23 +480,23 @@ static void postMessageImpl(const char* interfaceName, {{cpp_class}}* instance,
 void {{v8_class_or_partial}}::{{method.name}}MethodCallback{{world_suffix}}(const v8::FunctionCallbackInfo<v8::Value>& info) {
   {% if not method.overloads %}{# Overloaded methods are measured in overload_resolution_method() #}
   {% if method.measure_as %}
-  UseCounter::count(currentExecutionContext(info.GetIsolate()), UseCounter::{{method.measure_as('Method')}});
+  UseCounter::Count(CurrentExecutionContext(info.GetIsolate()), UseCounter::k{{method.measure_as('Method')}});
   {% endif %}
   {% if method.deprecate_as %}
-  Deprecation::countDeprecation(currentExecutionContext(info.GetIsolate()), UseCounter::{{method.deprecate_as}});
+  Deprecation::CountDeprecation(CurrentExecutionContext(info.GetIsolate()), UseCounter::k{{method.deprecate_as}});
   {% endif %}
   {% endif %}{# not method.overloads #}
   {% if world_suffix in method.activity_logging_world_list %}
   {% if method.is_static %}
-  ScriptState* scriptState = ScriptState::forFunctionObject(info);
+  ScriptState* scriptState = ScriptState::ForFunctionObject(info);
   {% else %}
-  ScriptState* scriptState = ScriptState::forReceiverObject(info);
+  ScriptState* scriptState = ScriptState::ForReceiverObject(info);
   {% endif %}
-  V8PerContextData* contextData = scriptState->perContextData();
-  if (contextData && contextData->activityLogger()) {
-    ExceptionState exceptionState(info.GetIsolate(), ExceptionState::ExecutionContext, "{{interface_name}}", "{{method.name}}");
-    Vector<v8::Local<v8::Value>> loggerArgs = toImplArguments<Vector<v8::Local<v8::Value>>>(info, 0, exceptionState);
-    contextData->activityLogger()->logMethod("{{interface_name}}.{{method.name}}", info.Length(), loggerArgs.data());
+  V8PerContextData* contextData = scriptState->PerContextData();
+  if (contextData && contextData->ActivityLogger()) {
+    ExceptionState exceptionState(info.GetIsolate(), ExceptionState::kExecutionContext, "{{interface_name}}", "{{method.name}}");
+    Vector<v8::Local<v8::Value>> loggerArgs = ToImplArguments<Vector<v8::Local<v8::Value>>>(info, 0, exceptionState);
+    contextData->ActivityLogger()->LogMethod("{{interface_name}}.{{method.name}}", info.Length(), loggerArgs.Data());
   }
   {% endif %}
   {% if method.is_ce_reactions %}
@@ -520,17 +520,17 @@ void {{v8_class_or_partial}}::{{method.name}}MethodCallback{{world_suffix}}(cons
    properly supports the incumbent realm. #}
 static void {{method.name}}OriginSafeMethodGetter{{world_suffix}}(const v8::PropertyCallbackInfo<v8::Value>& info) {
   static int domTemplateKey; // This address is used for a key to look up the dom template.
-  V8PerIsolateData* data = V8PerIsolateData::from(info.GetIsolate());
-  const DOMWrapperWorld& world = DOMWrapperWorld::world(info.GetIsolate()->GetCurrentContext());
-  v8::Local<v8::FunctionTemplate> interfaceTemplate = data->findInterfaceTemplate(world, &{{v8_class}}::wrapperTypeInfo);
+  V8PerIsolateData* data = V8PerIsolateData::From(info.GetIsolate());
+  const DOMWrapperWorld& world = DOMWrapperWorld::World(info.GetIsolate()->GetCurrentContext());
+  v8::Local<v8::FunctionTemplate> interfaceTemplate = data->FindInterfaceTemplate(world, &{{v8_class}}::wrapperTypeInfo);
   v8::Local<v8::Signature> signature = v8::Signature::New(info.GetIsolate(), interfaceTemplate);
 
-  v8::Local<v8::FunctionTemplate> methodTemplate = data->findOrCreateOperationTemplate(world, &domTemplateKey, {{v8_class_or_partial}}::{{method.name}}MethodCallback{{world_suffix}}, v8Undefined(), signature, {{method.length}});
+  v8::Local<v8::FunctionTemplate> methodTemplate = data->FindOrCreateOperationTemplate(world, &domTemplateKey, {{v8_class_or_partial}}::{{method.name}}MethodCallback{{world_suffix}}, V8Undefined(), signature, {{method.length}});
   // Return the function by default, unless the user script has overwritten it.
-  v8SetReturnValue(info, methodTemplate->GetFunction(info.GetIsolate()->GetCurrentContext()).ToLocalChecked());
+  V8SetReturnValue(info, methodTemplate->GetFunction(info.GetIsolate()->GetCurrentContext()).ToLocalChecked());
 
   {{cpp_class}}* impl = {{v8_class}}::toImpl(info.Holder());
-  if (!BindingSecurity::shouldAllowAccessTo(currentDOMWindow(info.GetIsolate()), impl, BindingSecurity::ErrorReportOption::DoNotReport)) {
+  if (!BindingSecurity::ShouldAllowAccessTo(CurrentDOMWindow(info.GetIsolate()), impl, BindingSecurity::ErrorReportOption::kDoNotReport)) {
     return;
   }
 
@@ -539,10 +539,10 @@ static void {{method.name}}OriginSafeMethodGetter{{world_suffix}}(const v8::Prop
   // {{cpp_class}}OriginSafeMethodSetter defined in interface.cpp.tmpl.
   {% endraw %}
   V8PrivateProperty::Symbol propertySymbol =
-      V8PrivateProperty::getSymbol(info.GetIsolate(), "{{method.name}}");
+      V8PrivateProperty::GetSymbol(info.GetIsolate(), "{{method.name}}");
   v8::Local<v8::Object> holder = v8::Local<v8::Object>::Cast(info.Holder());
-  if (propertySymbol.hasValue(holder)) {
-    v8SetReturnValue(info, propertySymbol.getOrUndefined(holder));
+  if (propertySymbol.HasValue(holder)) {
+    V8SetReturnValue(info, propertySymbol.GetOrUndefined(holder));
   }
 }
 {% endmacro %}
@@ -564,21 +564,21 @@ static void {{name}}(const v8::FunctionCallbackInfo<v8::Value>& info) {
 
   {% if constructor.is_named_constructor %}
   if (!info.IsConstructCall()) {
-    V8ThrowException::throwTypeError(info.GetIsolate(), ExceptionMessages::constructorNotCallableAsFunction("{{constructor.name}}"));
+    V8ThrowException::ThrowTypeError(info.GetIsolate(), ExceptionMessages::ConstructorNotCallableAsFunction("{{constructor.name}}"));
     return;
   }
 
-  if (ConstructorMode::current(info.GetIsolate()) == ConstructorMode::WrapExistingObject) {
-    v8SetReturnValue(info, info.Holder());
+  if (ConstructorMode::Current(info.GetIsolate()) == ConstructorMode::kWrapExistingObject) {
+    V8SetReturnValue(info, info.Holder());
     return;
   }
   {% endif %}
 
   {% if 'exceptionState' in function_call %}
-  ExceptionState exceptionState(info.GetIsolate(), ExceptionState::ConstructionContext, "{{interface_name}}");
+  ExceptionState exceptionState(info.GetIsolate(), ExceptionState::kConstructionContext, "{{interface_name}}");
   {% endif %}
   {% if 'scriptState' in function_call %}
-  ScriptState* scriptState = ScriptState::forReceiverObject(info);
+  ScriptState* scriptState = ScriptState::ForReceiverObject(info);
   {% endif %}
 
   {{function_call | indent(2)}}
@@ -592,8 +592,8 @@ static void {{name}}(const v8::FunctionCallbackInfo<v8::Value>& info) {
                                        if constructor.is_named_constructor else
                                        '') %}
 v8::Local<v8::Object> wrapper = info.Holder();
-wrapper = impl->associateWithWrapper(info.GetIsolate(), &{{constructor_class}}::wrapperTypeInfo, wrapper);
-v8SetReturnValue(info, wrapper);
+wrapper = impl->AssociateWithWrapper(info.GetIsolate(), &{{constructor_class}}::wrapperTypeInfo, wrapper);
+V8SetReturnValue(info, wrapper);
 {% endmacro %}
 
 
@@ -608,17 +608,17 @@ v8SetReturnValue(info, wrapper);
 {% set property_attribute =
        'static_cast<v8::PropertyAttribute>(%s)' % ' | '.join(method.property_attributes)
        if method.property_attributes else 'v8::None' %}
-{% set holder_check = 'V8DOMConfiguration::DoNotCheckHolder'
-       if method.returns_promise else 'V8DOMConfiguration::CheckHolder' %}
-{% set access_check = 'V8DOMConfiguration::CheckAccess'
-       if method.is_check_security_for_receiver else 'V8DOMConfiguration::DoNotCheckAccess' %}
+{% set holder_check = 'V8DOMConfiguration::kDoNotCheckHolder'
+       if method.returns_promise else 'V8DOMConfiguration::kCheckHolder' %}
+{% set access_check = 'V8DOMConfiguration::kCheckAccess'
+       if method.is_check_security_for_receiver else 'V8DOMConfiguration::kDoNotCheckAccess' %}
 {% if method.is_per_world_bindings %}
 {% set method_callback_for_main_world =
        '%s::%sMethodCallbackForMainWorld' % (v8_class_or_partial, method.name) %}
-{"{{method.name}}", {{method_callback_for_main_world}}, {{method.length}}, {{property_attribute}}, {{property_location(method)}}, {{holder_check}}, {{access_check}}, V8DOMConfiguration::MainWorld},
-{"{{method.name}}", {{method_callback}}, {{method.length}}, {{property_attribute}}, {{property_location(method)}}, {{holder_check}}, {{access_check}}, V8DOMConfiguration::NonMainWorlds}
+{"{{method.name}}", {{method_callback_for_main_world}}, {{method.length}}, {{property_attribute}}, {{property_location(method)}}, {{holder_check}}, {{access_check}}, V8DOMConfiguration::kMainWorld},
+{"{{method.name}}", {{method_callback}}, {{method.length}}, {{property_attribute}}, {{property_location(method)}}, {{holder_check}}, {{access_check}}, V8DOMConfiguration::kNonMainWorlds}
 {%- else %}
-{"{{method.name}}", {{method_callback}}, {{method.length}}, {{property_attribute}}, {{property_location(method)}}, {{holder_check}}, {{access_check}}, V8DOMConfiguration::AllWorlds}
+{"{{method.name}}", {{method_callback}}, {{method.length}}, {{property_attribute}}, {{property_location(method)}}, {{holder_check}}, {{access_check}}, V8DOMConfiguration::kAllWorlds}
 {%- endif %}
 {%- endmacro %}
 
@@ -629,7 +629,7 @@ const V8DOMConfiguration::MethodConfiguration {{method.name}}MethodConfiguration
   {{method_configuration(method) | indent(2)}}
 };
 for (const auto& methodConfig : {{method.name}}MethodConfiguration)
-  V8DOMConfiguration::installMethod(isolate, world, {{instance_template}}, {{prototype_template}}, {{interface_template}}, {{signature}}, methodConfig);
+  V8DOMConfiguration::InstallMethod(isolate, world, {{instance_template}}, {{prototype_template}}, {{interface_template}}, {{signature}}, methodConfig);
 {%- endmacro %}
 
 
@@ -650,7 +650,7 @@ const V8DOMConfiguration::MethodConfiguration {{method.name}}MethodConfiguration
   {{method_configuration(method) | indent(2)}}
 };
 for (const auto& methodConfig : {{method.name}}MethodConfiguration)
-  V8DOMConfiguration::installMethod(isolate, world, v8::Local<v8::Object>(), prototypeObject, interfaceObject, signature, methodConfig);
+  V8DOMConfiguration::InstallMethod(isolate, world, v8::Local<v8::Object>(), prototypeObject, interfaceObject, signature, methodConfig);
 {% endfilter %}{# runtime_enabled() #}
 {% endfilter %}{# exposed() #}
 {% endfilter %}{# secure_context() #}
diff --git a/third_party/WebKit/Source/bindings/templates/union_container.cpp.tmpl b/third_party/WebKit/Source/bindings/templates/union_container.cpp.tmpl
index ff2eca5b997b..02dca6c3f7a3 100644
--- a/third_party/WebKit/Source/bindings/templates/union_container.cpp.tmpl
+++ b/third_party/WebKit/Source/bindings/templates/union_container.cpp.tmpl
@@ -36,7 +36,7 @@ void {{cpp_class}}::set{{member.type_name}}({{member.rvalue_cpp_type}} value) {
   {% if member.enum_values %}
   NonThrowableExceptionState exceptionState;
   {{declare_enum_validation_variable(member.enum_values) | indent(2)}}
-  if (!isValidEnum(value, validValues, WTF_ARRAY_LENGTH(validValues), "{{member.type_name}}", exceptionState)) {
+  if (!IsValidEnum(value, validValues, WTF_ARRAY_LENGTH(validValues), "{{member.type_name}}", exceptionState)) {
     NOTREACHED();
     return;
   }
@@ -58,7 +58,7 @@ void {{cpp_class}}::set{{member.type_name}}({{member.rvalue_cpp_type}} value) {
 
 DEFINE_TRACE({{cpp_class}}) {
   {% for member in members if member.is_traceable %}
-  visitor->trace(m_{{member.cpp_name}});
+  visitor->Trace(m_{{member.cpp_name}});
   {% endfor %}
 }
 
@@ -69,12 +69,12 @@ void {{v8_class}}::toImpl(v8::Isolate* isolate, v8::Local<v8::Value> v8Value, {{
   {# The numbers in the following comments refer to the steps described in
      http://heycam.github.io/webidl/#es-union #}
   {# 1. null or undefined #}
-  if (conversionMode == UnionTypeConversionMode::Nullable && isUndefinedOrNull(v8Value))
+  if (conversionMode == UnionTypeConversionMode::kNullable && IsUndefinedOrNull(v8Value))
     return;
 
   {% if dictionary_type %}
   {# 3. Dictionaries for null or undefined #}
-  if (isUndefinedOrNull(v8Value)) {
+  if (IsUndefinedOrNull(v8Value)) {
     {{v8_value_to_local_cpp_value(dictionary_type) | indent}}
     impl.set{{dictionary_type.type_name}}(cppValue);
     return;
@@ -130,7 +130,7 @@ void {{v8_class}}::toImpl(v8::Isolate* isolate, v8::Local<v8::Value> v8Value, {{
   {# TODO(bashi): Support 11.5 Callback interface when we need it #}
   {# 11.6. Objects #}
   {% if object_type %}
-  if (isUndefinedOrNull(v8Value) || v8Value->IsObject()) {
+  if (IsUndefinedOrNull(v8Value) || v8Value->IsObject()) {
     {{v8_value_to_local_cpp_value(object_type) | indent}}
     impl.set{{object_type.type_name}}(cppValue);
     return;
@@ -162,7 +162,7 @@ void {{v8_class}}::toImpl(v8::Isolate* isolate, v8::Local<v8::Value> v8Value, {{
     {{v8_value_to_local_cpp_value(string_type) | indent}}
     {% if string_type.enum_values %}
     {{declare_enum_validation_variable(string_type.enum_values) | indent}}
-    if (!isValidEnum(cppValue, validValues, WTF_ARRAY_LENGTH(validValues), "{{string_type.type_name}}", exceptionState))
+    if (!IsValidEnum(cppValue, validValues, WTF_ARRAY_LENGTH(validValues), "{{string_type.type_name}}", exceptionState))
       return;
     {% endif %}
     impl.set{{string_type.type_name}}(cppValue);
@@ -186,7 +186,7 @@ void {{v8_class}}::toImpl(v8::Isolate* isolate, v8::Local<v8::Value> v8Value, {{
 
   {% else %}
   {# 17. TypeError #}
-  exceptionState.throwTypeError("The provided value is not of type '{{type_string}}'");
+  exceptionState.ThrowTypeError("The provided value is not of type '{{type_string}}'");
   {% endif %}
 }
 
@@ -205,9 +205,9 @@ v8::Local<v8::Value> ToV8(const {{cpp_class}}& impl, v8::Local<v8::Object> creat
   return v8::Local<v8::Value>();
 }
 
-{{cpp_class}} NativeValueTraits<{{cpp_class}}>::nativeValue(v8::Isolate* isolate, v8::Local<v8::Value> value, ExceptionState& exceptionState) {
+{{cpp_class}} NativeValueTraits<{{cpp_class}}>::NativeValue(v8::Isolate* isolate, v8::Local<v8::Value> value, ExceptionState& exceptionState) {
   {{cpp_class}} impl;
-  {{v8_class}}::toImpl(isolate, value, impl, UnionTypeConversionMode::NotNullable, exceptionState);
+  {{v8_class}}::toImpl(isolate, value, impl, UnionTypeConversionMode::kNotNullable, exceptionState);
   return impl;
 }
 
diff --git a/third_party/WebKit/Source/bindings/templates/union_container.h.tmpl b/third_party/WebKit/Source/bindings/templates/union_container.h.tmpl
index 29453cfaf6d8..e6ca782b6298 100644
--- a/third_party/WebKit/Source/bindings/templates/union_container.h.tmpl
+++ b/third_party/WebKit/Source/bindings/templates/union_container.h.tmpl
@@ -56,18 +56,18 @@ class {{v8_class}} final {
 {{exported}}v8::Local<v8::Value> ToV8(const {{cpp_class}}&, v8::Local<v8::Object>, v8::Isolate*);
 
 template <class CallbackInfo>
-inline void v8SetReturnValue(const CallbackInfo& callbackInfo, {{cpp_class}}& impl) {
-  v8SetReturnValue(callbackInfo, ToV8(impl, callbackInfo.Holder(), callbackInfo.GetIsolate()));
+inline void V8SetReturnValue(const CallbackInfo& callbackInfo, {{cpp_class}}& impl) {
+  V8SetReturnValue(callbackInfo, ToV8(impl, callbackInfo.Holder(), callbackInfo.GetIsolate()));
 }
 
 template <class CallbackInfo>
-inline void v8SetReturnValue(const CallbackInfo& callbackInfo, {{cpp_class}}& impl, v8::Local<v8::Object> creationContext) {
-  v8SetReturnValue(callbackInfo, ToV8(impl, creationContext, callbackInfo.GetIsolate()));
+inline void V8SetReturnValue(const CallbackInfo& callbackInfo, {{cpp_class}}& impl, v8::Local<v8::Object> creationContext) {
+  V8SetReturnValue(callbackInfo, ToV8(impl, creationContext, callbackInfo.GetIsolate()));
 }
 
 template <>
 struct NativeValueTraits<{{cpp_class}}> : public NativeValueTraitsBase<{{cpp_class}}> {
-  {{exported}}static {{cpp_class}} nativeValue(v8::Isolate*, v8::Local<v8::Value>, ExceptionState&);
+  {{exported}}static {{cpp_class}} NativeValue(v8::Isolate*, v8::Local<v8::Value>, ExceptionState&);
 };
 
 template <>
diff --git a/third_party/WebKit/Source/bindings/templates/utilities.cpp.tmpl b/third_party/WebKit/Source/bindings/templates/utilities.cpp.tmpl
index 1e23d92f1a19..5040010b78ed 100644
--- a/third_party/WebKit/Source/bindings/templates/utilities.cpp.tmpl
+++ b/third_party/WebKit/Source/bindings/templates/utilities.cpp.tmpl
@@ -43,25 +43,25 @@ const char* {{enum_variable}}[] = {
 {% macro property_location(member) %}
 {% set property_location_list = [] %}
 {% if member.on_instance %}
-{% set property_location_list = property_location_list + ['V8DOMConfiguration::OnInstance'] %}
+{% set property_location_list = property_location_list + ['V8DOMConfiguration::kOnInstance'] %}
 {% endif %}
 {% if member.on_prototype %}
-{% set property_location_list = property_location_list + ['V8DOMConfiguration::OnPrototype'] %}
+{% set property_location_list = property_location_list + ['V8DOMConfiguration::kOnPrototype'] %}
 {% endif %}
 {% if member.on_interface %}
-{% set property_location_list = property_location_list + ['V8DOMConfiguration::OnInterface'] %}
+{% set property_location_list = property_location_list + ['V8DOMConfiguration::kOnInterface'] %}
 {% endif %}
 {{property_location_list | join(' | ')}}
 {%- endmacro %}
 
 
 {% macro check_origin_trial(member, isolate="info.GetIsolate()") -%}
-ExecutionContext* executionContext = currentExecutionContext({{isolate}});
+ExecutionContext* executionContext = CurrentExecutionContext({{isolate}});
 String errorMessage;
 if (!{{member.origin_trial_enabled_function}}(executionContext, errorMessage)) {
-  v8SetReturnValue(info, v8::Undefined(info.GetIsolate()));
-  if (!errorMessage.isEmpty()) {
-    executionContext->addConsoleMessage(ConsoleMessage::create(JSMessageSource, ErrorMessageLevel, errorMessage));
+  V8SetReturnValue(info, v8::Undefined(info.GetIsolate()));
+  if (!errorMessage.IsEmpty()) {
+    executionContext->AddConsoleMessage(ConsoleMessage::Create(kJSMessageSource, kErrorMessageLevel, errorMessage));
   }
   return;
 }
diff --git a/third_party/WebKit/Source/build/scripts/make_computed_style_base.py b/third_party/WebKit/Source/build/scripts/make_computed_style_base.py
index 03bf4aaa816b..29475a0ad2e7 100755
--- a/third_party/WebKit/Source/build/scripts/make_computed_style_base.py
+++ b/third_party/WebKit/Source/build/scripts/make_computed_style_base.py
@@ -62,7 +62,7 @@ NONPROPERTIES = [
      'type_name': 'bool', 'inherited': False, 'independent': False},
     {'name': 'StyleType', 'field_template': 'storage_only', 'size': 6, 'default_value': '0',
      'type_name': 'PseudoId', 'inherited': False, 'independent': False},
-    {'name': 'PseudoBits', 'field_template': 'storage_only', 'size': 8, 'default_value': 'PseudoIdNone',
+    {'name': 'PseudoBits', 'field_template': 'storage_only', 'size': 8, 'default_value': 'kPseudoIdNone',
      'type_name': 'PseudoId', 'inherited': False, 'independent': False},
     # True if 'underline solid' is the only text decoration on this element.
     {'name': 'HasSimpleUnderline', 'field_template': 'storage_only', 'size': 1, 'default_value': 'false',
@@ -105,7 +105,7 @@ class Field(object):
     """
 
     def __init__(self, field_role, name_for_methods, property_name, type_name,
-                 field_template, size, default_value, **kwargs):
+                 field_template, size, default_value, properties, **kwargs):
         """Creates a new field."""
         self.name = class_member_name(name_for_methods)
         self.property_name = property_name
@@ -129,11 +129,14 @@ class Field(object):
             self.is_inherited_method_name = method_name(join_name(name_for_methods, 'is inherited'))
 
         # Method names
-        getter_prefix = 'Get' if name_for_methods == self.type_name else ''
-        self.getter_method_name = method_name(join_name(getter_prefix, name_for_methods))
-        self.setter_method_name = method_name(join_name('set', name_for_methods))
-        self.initial_method_name = method_name(join_name('initial', name_for_methods))
-        self.resetter_method_name = method_name(join_name('reset', name_for_methods))
+        if 'getter' in properties and not self.is_inherited_flag:
+          self.getter_method_name = properties['getter']
+        else:
+          getter_prefix = 'Get' if name_for_methods == self.type_name else ''
+          self.getter_method_name = method_name(join_name(getter_prefix, name_for_methods))
+        self.setter_method_name = method_name(join_name('Set', name_for_methods))
+        self.initial_method_name = method_name(join_name('Initial', name_for_methods))
+        self.resetter_method_name = method_name(join_name('Reset', name_for_methods))
 
         # If the size of the field is not None, it means it is a bit field
         self.is_bit_field = self.size is not None
@@ -221,6 +224,7 @@ def _create_field(field_role, property_):
         field_template=property_['field_template'],
         size=size,
         default_value=default_value,
+        properties=property_,
     )
 
 
@@ -237,6 +241,7 @@ def _create_inherited_flag_field(property_):
         field_template='primitive',
         size=1,
         default_value='true',
+        properties=property_,
     )
 
 
diff --git a/third_party/WebKit/Source/build/scripts/make_css_property_metadata.py b/third_party/WebKit/Source/build/scripts/make_css_property_metadata.py
index 80df8355a5d8..1fa4eba59cf0 100755
--- a/third_party/WebKit/Source/build/scripts/make_css_property_metadata.py
+++ b/third_party/WebKit/Source/build/scripts/make_css_property_metadata.py
@@ -24,11 +24,11 @@ class CSSPropertyMetadataWriter(css_properties.CSSProperties):
     def generate_css_property_metadata_cpp(self):
         return {
             'properties_including_aliases': self._properties_including_aliases,
-            'switches': [('is_descriptor', 'isDescriptor'),
-                         ('is_property', 'isProperty'),
-                         ('interpolable', 'isInterpolableProperty'),
-                         ('inherited', 'isInheritedProperty'),
-                         ('supports_percentage', 'propertySupportsPercentage'),
+            'switches': [('is_descriptor', 'IsDescriptor'),
+                         ('is_property', 'IsProperty'),
+                         ('interpolable', 'IsInterpolableProperty'),
+                         ('inherited', 'IsInheritedProperty'),
+                         ('supports_percentage', 'PropertySupportsPercentage'),
                         ],
             'first_enum_value': self._first_enum_value,
         }
diff --git a/third_party/WebKit/Source/build/scripts/make_css_property_names.py b/third_party/WebKit/Source/build/scripts/make_css_property_names.py
index b3e05b07a39d..949c1825d049 100755
--- a/third_party/WebKit/Source/build/scripts/make_css_property_names.py
+++ b/third_party/WebKit/Source/build/scripts/make_css_property_names.py
@@ -122,7 +122,7 @@ struct Property;
 %%define class-name %(class_name)sHash
 %%define lookup-function-name findPropertyImpl
 %%define hash-function-name property_hash_function
-%%define slot-name nameOffset
+%%define slot-name name_offset
 %%define word-array-name property_word_list
 %%enum
 %%%%
@@ -133,7 +133,7 @@ struct Property;
 #pragma clang diagnostic pop
 #endif
 
-const Property* findProperty(const char* str, unsigned int len) {
+const Property* FindProperty(const char* str, unsigned int len) {
   return %(class_name)sHash::findPropertyImpl(str, len);
 }
 
@@ -149,7 +149,7 @@ const AtomicString& getPropertyNameAtomicString(CSSPropertyID id) {
   static AtomicString* propertyStrings =
       new AtomicString[lastUnresolvedCSSProperty]; // Leaked.
   AtomicString& propertyString = propertyStrings[index];
-  if (propertyString.isNull()) {
+  if (propertyString.IsNull()) {
     propertyString = AtomicString(propertyNameStringsPool +
                      propertyNameStringsOffsets[index]);
   }
@@ -158,7 +158,7 @@ const AtomicString& getPropertyNameAtomicString(CSSPropertyID id) {
 
 String getPropertyNameString(CSSPropertyID id) {
   // We share the StringImpl with the AtomicStrings.
-  return getPropertyNameAtomicString(id).getString();
+  return getPropertyNameAtomicString(id).GetString();
 }
 
 String getJSPropertyName(CSSPropertyID id) {
@@ -166,7 +166,7 @@ String getJSPropertyName(CSSPropertyID id) {
   const char* cssPropertyName = getPropertyName(id);
   const char* propertyNamePointer = cssPropertyName;
   if (!propertyNamePointer)
-    return emptyString;
+    return g_empty_string;
 
   char* resultPointer = result;
   while (char character = *propertyNamePointer++) {
@@ -175,7 +175,7 @@ String getJSPropertyName(CSSPropertyID id) {
       if (!nextCharacter)
         break;
       character = (propertyNamePointer - 2 != cssPropertyName)
-                      ? toASCIIUpper(nextCharacter) : nextCharacter;
+                      ? ToASCIIUpper(nextCharacter) : nextCharacter;
     }
     *resultPointer++ = character;
   }
diff --git a/third_party/WebKit/Source/build/scripts/make_css_tokenizer_codepoints.py b/third_party/WebKit/Source/build/scripts/make_css_tokenizer_codepoints.py
index d7e81d50e012..ce9cb40bdb22 100755
--- a/third_party/WebKit/Source/build/scripts/make_css_tokenizer_codepoints.py
+++ b/third_party/WebKit/Source/build/scripts/make_css_tokenizer_codepoints.py
@@ -18,7 +18,7 @@ CPP_TEMPLATE = """
 
 // Auto-generated by {module_pyname}
 
-const CSSTokenizer::CodePoint CSSTokenizer::codePoints[{array_size}] = {{
+const CSSTokenizer::CodePoint CSSTokenizer::kCodePoints[{array_size}] = {{
 {token_lines}
 }};
 const unsigned codePointsNumber = {array_size};
@@ -26,30 +26,30 @@ const unsigned codePointsNumber = {array_size};
 
 
 def token_type(i):
-    codepoints = {'(': 'leftParenthesis',
-                  ')': 'rightParenthesis',
-                  '[': 'leftBracket',
-                  ']': 'rightBracket',
-                  '{': 'leftBrace',
-                  '}': 'rightBrace',
-                  '+': 'plusOrFullStop',
-                  '.': 'plusOrFullStop',
-                  '-': 'hyphenMinus',
-                  '*': 'asterisk',
-                  '<': 'lessThan',
-                  ',': 'comma',
-                  '/': 'solidus',
-                  '\\': 'reverseSolidus',
-                  ':': 'colon',
-                  ';': 'semiColon',
-                  '#': 'hash',
-                  '^': 'circumflexAccent',
-                  '$': 'dollarSign',
-                  '|': 'verticalLine',
-                  '~': 'tilde',
-                  '@': 'commercialAt',
-                  'u': 'letterU',
-                  'U': 'letterU',
+    codepoints = {'(': 'LeftParenthesis',
+                  ')': 'RightParenthesis',
+                  '[': 'LeftBracket',
+                  ']': 'RightBracket',
+                  '{': 'LeftBrace',
+                  '}': 'RightBrace',
+                  '+': 'PlusOrFullStop',
+                  '.': 'PlusOrFullStop',
+                  '-': 'HyphenMinus',
+                  '*': 'Asterisk',
+                  '<': 'LessThan',
+                  ',': 'Comma',
+                  '/': 'Solidus',
+                  '\\': 'ReverseSolidus',
+                  ':': 'Colon',
+                  ';': 'SemiColon',
+                  '#': 'Hash',
+                  '^': 'CircumflexAccent',
+                  '$': 'DollarSign',
+                  '|': 'VerticalLine',
+                  '~': 'Tilde',
+                  '@': 'CommercialAt',
+                  'u': 'LetterU',
+                  'U': 'LetterU',
                   }
     c = chr(i)
     if c in codepoints:
@@ -57,15 +57,15 @@ def token_type(i):
     whitespace = '\n\r\t\f '
     quotes = '"\''
     if c in whitespace:
-        return 'whiteSpace'
+        return 'WhiteSpace'
     if c.isdigit():
-        return 'asciiDigit'
+        return 'AsciiDigit'
     if c.isalpha() or c == '_':
-        return 'nameStart'
+        return 'NameStart'
     if c in quotes:
-        return 'stringStart'
+        return 'StringStart'
     if i == 0:
-        return 'endOfFile'
+        return 'EndOfFile'
 
 
 class MakeCSSTokenizerCodePointsWriter(in_generator.Writer):
diff --git a/third_party/WebKit/Source/build/scripts/make_css_value_keywords.py b/third_party/WebKit/Source/build/scripts/make_css_value_keywords.py
index 71c4efc6f4d8..96546ca5997a 100755
--- a/third_party/WebKit/Source/build/scripts/make_css_value_keywords.py
+++ b/third_party/WebKit/Source/build/scripts/make_css_value_keywords.py
@@ -77,7 +77,7 @@ struct Value;
 %%define class-name %(class_name)sHash
 %%define lookup-function-name findValueImpl
 %%define hash-function-name value_hash_function
-%%define slot-name nameOffset
+%%define slot-name name_offset
 %%define word-array-name value_word_list
 %%pic
 %%enum
@@ -89,7 +89,7 @@ struct Value;
 #pragma clang diagnostic pop
 #endif
 
-const Value* findValue(const char* str, unsigned int len) {
+const Value* FindValue(const char* str, unsigned int len) {
   return CSSValueKeywordsHash::findValueImpl(str, len);
 }
 
@@ -101,9 +101,9 @@ const char* getValueName(CSSValueID id) {
 bool isValueAllowedInMode(unsigned short id, CSSParserMode mode) {
   switch (id) {
     %(ua_sheet_mode_values_keywords)s
-      return isUASheetBehavior(mode);
+      return IsUASheetBehavior(mode);
     %(quirks_mode_or_ua_sheet_mode_values_keywords)s
-      return isUASheetBehavior(mode) || isQuirksModeBehavior(mode);
+      return IsUASheetBehavior(mode) || IsQuirksModeBehavior(mode);
     default:
       return true;
   }
diff --git a/third_party/WebKit/Source/build/scripts/make_instrumenting_probes.py b/third_party/WebKit/Source/build/scripts/make_instrumenting_probes.py
index 0b7105acdb14..d769096f5657 100644
--- a/third_party/WebKit/Source/build/scripts/make_instrumenting_probes.py
+++ b/third_party/WebKit/Source/build/scripts/make_instrumenting_probes.py
@@ -24,6 +24,7 @@ third_party_dir = os.path.normpath(os.path.join(module_path, os.pardir, os.pardi
 sys.path.insert(1, third_party_dir)
 import jinja2
 
+from name_utilities import method_name
 
 def _json5_loads(lines):
     # Use json5.loads when json5 is available. Currently we use simple
@@ -245,6 +246,7 @@ template_context = {
     "files": files,
     "agents": build_observers(),
     "config": config,
+    "method_name": method_name,
     "name": base_name,
     "input_file": os.path.basename(input_path)
 }
diff --git a/third_party/WebKit/Source/build/scripts/make_media_features.py b/third_party/WebKit/Source/build/scripts/make_media_features.py
index b1041248ebb3..22db17424d2a 100755
--- a/third_party/WebKit/Source/build/scripts/make_media_features.py
+++ b/third_party/WebKit/Source/build/scripts/make_media_features.py
@@ -19,6 +19,7 @@ class MakeMediaFeaturesWriter(json5_generator.Writer):
     filters = {
         'symbol': media_feature_symbol.getMediaFeatureSymbolWithSuffix(''),
         'to_macro_style': name_utilities.to_macro_style,
+        'upper_first_letter': name_utilities.upper_first_letter,
     }
 
     def __init__(self, json5_file_path):
diff --git a/third_party/WebKit/Source/build/scripts/make_style_builder.py b/third_party/WebKit/Source/build/scripts/make_style_builder.py
index 70cc8e98e3e8..f73c570bc698 100755
--- a/third_party/WebKit/Source/build/scripts/make_style_builder.py
+++ b/third_party/WebKit/Source/build/scripts/make_style_builder.py
@@ -57,16 +57,16 @@ class StyleBuilderWriter(css_properties.CSSProperties):
             name = property['name_for_methods']
             simple_type_name = str(property['type_name']).split('::')[-1]
             set_if_none(property, 'type_name', 'E' + name)
-            set_if_none(property, 'getter', lower_first(name) if simple_type_name != name else 'get' + name)
-            set_if_none(property, 'setter', 'set' + name)
+            set_if_none(property, 'getter', name if simple_type_name != name else 'Get' + name)
+            set_if_none(property, 'setter', 'Set' + name)
             set_if_none(property, 'inherited', False)
-            set_if_none(property, 'initial', 'initial' + name)
+            set_if_none(property, 'initial', 'Initial' + name)
             if property['custom_all']:
                 property['custom_initial'] = True
                 property['custom_inherit'] = True
                 property['custom_value'] = True
             if property['inherited']:
-                property['is_inherited_setter'] = 'set' + name + 'IsInherited'
+                property['is_inherited_setter'] = 'Set' + name + 'IsInherited'
             property['should_declare_functions'] = not property['use_handlers_for'] and not property['longhands'] \
                 and not property['direction_aware'] and not property['builder_skip'] \
                 and property['is_property']
diff --git a/third_party/WebKit/Source/build/scripts/name_utilities.py b/third_party/WebKit/Source/build/scripts/name_utilities.py
index cd4dad7997db..df4b8436ffa4 100644
--- a/third_party/WebKit/Source/build/scripts/name_utilities.py
+++ b/third_party/WebKit/Source/build/scripts/name_utilities.py
@@ -148,11 +148,12 @@ def enum_value_name(name):
 
 
 def class_member_name(name):
-    return 'm_' + lower_camel_case(name)
+    lower_case_words = [word.lower() for word in split_name(name)]
+    return "_".join(lower_case_words) + "_"
 
 
 def method_name(name):
-    return lower_camel_case(name)
+    return upper_camel_case(name)
 
 
 def join_name(*names):
diff --git a/third_party/WebKit/Source/build/scripts/templates/CSSOMKeywords.cpp.tmpl b/third_party/WebKit/Source/build/scripts/templates/CSSOMKeywords.cpp.tmpl
index 776272850292..f865a43e9902 100644
--- a/third_party/WebKit/Source/build/scripts/templates/CSSOMKeywords.cpp.tmpl
+++ b/third_party/WebKit/Source/build/scripts/templates/CSSOMKeywords.cpp.tmpl
@@ -23,7 +23,7 @@ KeywordTable createKeywordTable() {
     {% for keywordValueID in property.keywordIDs %}
     {{property.lower_camel_name}}Keywords.push_back({{keywordValueID}});
     {% endfor %}
-    table.set({{property_id}}, {{property.lower_camel_name}}Keywords);
+    table.Set({{property_id}}, {{property.lower_camel_name}}Keywords);
   }
   {% endfor %}
   return table;
@@ -36,9 +36,9 @@ KeywordTable& keywordTable() {
 
 } // namespace
 
-bool CSSOMKeywords::validKeywordForProperty(CSSPropertyID id,
+bool CSSOMKeywords::ValidKeywordForProperty(CSSPropertyID id,
                                             const CSSKeywordValue& keyword) {
-  CSSValueID valueID = keyword.keywordValueID();
+  CSSValueID valueID = keyword.KeywordValueID();
   if (valueID == CSSValueInvalid) {
     return false;
   }
@@ -49,12 +49,12 @@ bool CSSOMKeywords::validKeywordForProperty(CSSPropertyID id,
     return true;
   }
 
-  const KeywordTable::iterator tableIterator = keywordTable().find(id);
+  const KeywordTable::iterator tableIterator = keywordTable().Find(id);
   if (tableIterator == keywordTable().end()) {
     return false;
   }
 
-  return tableIterator->value.contains(valueID);
+  return tableIterator->value.Contains(valueID);
 }
 
 } // namespace blink
diff --git a/third_party/WebKit/Source/build/scripts/templates/CSSOMTypes.cpp.tmpl b/third_party/WebKit/Source/build/scripts/templates/CSSOMTypes.cpp.tmpl
index 33b93b0688df..7c90430ad536 100644
--- a/third_party/WebKit/Source/build/scripts/templates/CSSOMTypes.cpp.tmpl
+++ b/third_party/WebKit/Source/build/scripts/templates/CSSOMTypes.cpp.tmpl
@@ -12,35 +12,35 @@
 
 namespace blink {
 
-bool CSSOMTypes::propertyCanTake(CSSPropertyID id,
+bool CSSOMTypes::PropertyCanTake(CSSPropertyID id,
                                  const CSSStyleValue& styleValue) {
   // Shortcut special case.
-  if (styleValue.type() == CSSStyleValue::SimpleLengthType ||
-      styleValue.type() == CSSStyleValue::CalcLengthType) {
-    if (toCSSLengthValue(styleValue).containsPercent() &&
-        !CSSPropertyMetadata::propertySupportsPercentage(id)) {
+  if (styleValue.GetType() == CSSStyleValue::kSimpleLengthType ||
+      styleValue.GetType() == CSSStyleValue::kCalcLengthType) {
+    if (ToCSSLengthValue(styleValue).ContainsPercent() &&
+        !CSSPropertyMetadata::PropertySupportsPercentage(id)) {
       return false;
     }
-  } else if (styleValue.type() == CSSStyleValue::KeywordType) {
+  } else if (styleValue.GetType() == CSSStyleValue::kKeywordType) {
     // Keywords are also handled differently.
-    return CSSOMKeywords::validKeywordForProperty(
-        id, toCSSKeywordValue(styleValue));
-  } else if (styleValue.type() == CSSStyleValue::Unknown) {
+    return CSSOMKeywords::ValidKeywordForProperty(
+        id, ToCSSKeywordValue(styleValue));
+  } else if (styleValue.GetType() == CSSStyleValue::kUnknown) {
     // The check happens later in this case.
     return true;
   }
 
-  return CSSOMTypes::propertyCanTakeType(id, styleValue.type());
+  return CSSOMTypes::PropertyCanTakeType(id, styleValue.GetType());
 }
 
-bool CSSOMTypes::propertyCanTakeType(CSSPropertyID id,
+bool CSSOMTypes::PropertyCanTakeType(CSSPropertyID id,
                                      CSSStyleValue::StyleValueType type) {
   switch (id) {
     {% for property_id, property in properties.items() if property.typedom_types %}
     case {{property_id}}:
       return (
           {% for type in property.typedom_types %}
-          {{ "|| " if not loop.first }}type == CSSStyleValue::{{type}}Type
+          {{ "|| " if not loop.first }}type == CSSStyleValue::k{{type}}Type
           {% endfor %}
       );
     {% endfor %}
diff --git a/third_party/WebKit/Source/build/scripts/templates/CSSPrimitiveValueUnitTrie.cpp.tmpl b/third_party/WebKit/Source/build/scripts/templates/CSSPrimitiveValueUnitTrie.cpp.tmpl
index 108509aced5c..61c62cd85310 100644
--- a/third_party/WebKit/Source/build/scripts/templates/CSSPrimitiveValueUnitTrie.cpp.tmpl
+++ b/third_party/WebKit/Source/build/scripts/templates/CSSPrimitiveValueUnitTrie.cpp.tmpl
@@ -16,17 +16,17 @@ CSSPrimitiveValue::UnitType cssPrimitiveValueUnitFromTrie(
   DCHECK(length);
   {% macro trie_return_statement(unit_name) %}CSSPrimitiveValue::UnitType::{{unit_name}}{% endmacro %}
   {{ trie_length_switch(length_tries, trie_return_statement, True) | indent(4) }}
-  return CSSPrimitiveValue::UnitType::Unknown;
+  return CSSPrimitiveValue::UnitType::kUnknown;
 }
 
 } // namespace
 
-CSSPrimitiveValue::UnitType CSSPrimitiveValue::stringToUnitType(
+CSSPrimitiveValue::UnitType CSSPrimitiveValue::StringToUnitType(
     const LChar* characters8, unsigned length) {
   return cssPrimitiveValueUnitFromTrie(characters8, length);
 }
 
-CSSPrimitiveValue::UnitType CSSPrimitiveValue::stringToUnitType(
+CSSPrimitiveValue::UnitType CSSPrimitiveValue::StringToUnitType(
     const UChar* characters16, unsigned length) {
   return cssPrimitiveValueUnitFromTrie(characters16, length);
 }
diff --git a/third_party/WebKit/Source/build/scripts/templates/CSSPropertyDescriptor.cpp.tmpl b/third_party/WebKit/Source/build/scripts/templates/CSSPropertyDescriptor.cpp.tmpl
index ea16a173d3ba..b78f752ae39a 100644
--- a/third_party/WebKit/Source/build/scripts/templates/CSSPropertyDescriptor.cpp.tmpl
+++ b/third_party/WebKit/Source/build/scripts/templates/CSSPropertyDescriptor.cpp.tmpl
@@ -50,7 +50,7 @@ static size_t CSSDescriptorIndices[] = {
    {% endfor %}
 };
 
-const CSSPropertyDescriptor& CSSPropertyDescriptor::get(CSSPropertyID id) {
+const CSSPropertyDescriptor& CSSPropertyDescriptor::Get(CSSPropertyID id) {
       return cssPropertyDescriptors[CSSDescriptorIndices[id]];
 }
 
diff --git a/third_party/WebKit/Source/build/scripts/templates/CSSPropertyDescriptor.h.tmpl b/third_party/WebKit/Source/build/scripts/templates/CSSPropertyDescriptor.h.tmpl
index 6012ba22efae..33f5a674c2c6 100644
--- a/third_party/WebKit/Source/build/scripts/templates/CSSPropertyDescriptor.h.tmpl
+++ b/third_party/WebKit/Source/build/scripts/templates/CSSPropertyDescriptor.h.tmpl
@@ -19,7 +19,7 @@ struct CSSPropertyDescriptor {
   // Returns the corresponding CSSPropertyDescriptor for a given CSSPropertyID.
   // Use this function to access the API for a property. Returns a descriptor
   // with isValid set to false if no descriptor exists for this ID.
-  static const CSSPropertyDescriptor& get(CSSPropertyID);
+  static const CSSPropertyDescriptor& Get(CSSPropertyID);
 };
 
 }  // namespace blink
diff --git a/third_party/WebKit/Source/build/scripts/templates/CSSPropertyMetadata.cpp.tmpl b/third_party/WebKit/Source/build/scripts/templates/CSSPropertyMetadata.cpp.tmpl
index d834f5483d5e..219fbc6a1bbf 100644
--- a/third_party/WebKit/Source/build/scripts/templates/CSSPropertyMetadata.cpp.tmpl
+++ b/third_party/WebKit/Source/build/scripts/templates/CSSPropertyMetadata.cpp.tmpl
@@ -17,10 +17,10 @@ bool CSSPropertyMetadata::{{function_name}}(CSSPropertyID unresolvedProperty) {
     {% for property in properties_including_aliases if property[flag] %}
     case {{property.property_id}}:
     {% endfor %}
-    {% if function_name in ("isInheritedProperty", "isProperty") %}
+    {% if function_name in ("IsInheritedProperty", "IsProperty") %}
     case CSSPropertyVariable:
     {% endif %}
-    {% if function_name == "isProperty" %}
+    {% if function_name == "IsProperty" %}
     case CSSPropertyApplyAtRule:
     {% endif %}
       return true;
@@ -30,7 +30,7 @@ bool CSSPropertyMetadata::{{function_name}}(CSSPropertyID unresolvedProperty) {
 }
 {% endfor %}
 
-char CSSPropertyMetadata::repetitionSeparator(CSSPropertyID unresolvedProperty) {
+char CSSPropertyMetadata::RepetitionSeparator(CSSPropertyID unresolvedProperty) {
   switch (unresolvedProperty) {
   {% for property in properties_including_aliases if property.separator %}
   case {{property.property_id}}:
@@ -41,11 +41,11 @@ char CSSPropertyMetadata::repetitionSeparator(CSSPropertyID unresolvedProperty)
   }
 }
 
-bool CSSPropertyMetadata::propertyIsRepeated(CSSPropertyID unresolvedProperty) {
-  return repetitionSeparator(unresolvedProperty) != 0;
+bool CSSPropertyMetadata::PropertyIsRepeated(CSSPropertyID unresolvedProperty) {
+  return RepetitionSeparator(unresolvedProperty) != 0;
 }
 
-bool CSSPropertyMetadata::isEnabledProperty(CSSPropertyID unresolvedProperty) {
+bool CSSPropertyMetadata::IsEnabledProperty(CSSPropertyID unresolvedProperty) {
   CSSPropertyID property = resolveCSSPropertyID(unresolvedProperty);
   static std::bitset<numCSSProperties>* enabledProperties = nullptr;
   if (!enabledProperties) {
@@ -69,13 +69,13 @@ bool CSSPropertyMetadata::isEnabledProperty(CSSPropertyID unresolvedProperty) {
   return RuntimeEnabledFeatures::cssApplyAtRulesEnabled();
 }
 
-void CSSPropertyMetadata::filterEnabledCSSPropertiesIntoVector(
+void CSSPropertyMetadata::FilterEnabledCSSPropertiesIntoVector(
     const CSSPropertyID* properties,
     size_t propertyCount,
     Vector<CSSPropertyID>& outVector) {
   for (unsigned i = 0; i < propertyCount; i++) {
     CSSPropertyID property = properties[i];
-    if (isEnabledProperty(property))
+    if (IsEnabledProperty(property))
       outVector.push_back(property);
   }
 }
diff --git a/third_party/WebKit/Source/build/scripts/templates/ComputedStyleBase.cpp.tmpl b/third_party/WebKit/Source/build/scripts/templates/ComputedStyleBase.cpp.tmpl
index 4c8ec2878b49..16f0ab40d9eb 100644
--- a/third_party/WebKit/Source/build/scripts/templates/ComputedStyleBase.cpp.tmpl
+++ b/third_party/WebKit/Source/build/scripts/templates/ComputedStyleBase.cpp.tmpl
@@ -17,21 +17,21 @@ struct SameSizeAsComputedStyleBase {
 // ensure that the buckets are placed so that each takes up at most 1 word.
 ASSERT_SIZE(ComputedStyleBase, SameSizeAsComputedStyleBase);
 
-void ComputedStyleBase::inheritFrom(const ComputedStyleBase& inheritParent,
+void ComputedStyleBase::InheritFrom(const ComputedStyleBase& inheritParent,
                                     IsAtShadowBoundary isAtShadowBoundary) {
   {% for field in fields if field.is_inherited %}
   {{field.name}} = inheritParent.{{field.name}};
   {% endfor %}
 }
 
-void ComputedStyleBase::copyNonInheritedFromCached(
+void ComputedStyleBase::CopyNonInheritedFromCached(
     const ComputedStyleBase& other) {
   {% for field in fields if (field.is_property and not field.is_inherited) or field.is_inherited_flag %}
   {{field.name}} = other.{{field.name}};
   {% endfor %}
 }
 
-void ComputedStyleBase::propagateIndependentInheritedProperties(
+void ComputedStyleBase::PropagateIndependentInheritedProperties(
     const ComputedStyleBase& parentStyle) {
   {% for field in fields if field.is_property and field.is_independent %}
   if ({{field.is_inherited_method_name}}())
diff --git a/third_party/WebKit/Source/build/scripts/templates/ComputedStyleBase.h.tmpl b/third_party/WebKit/Source/build/scripts/templates/ComputedStyleBase.h.tmpl
index 5325ec38c198..03a48012e77d 100644
--- a/third_party/WebKit/Source/build/scripts/templates/ComputedStyleBase.h.tmpl
+++ b/third_party/WebKit/Source/build/scripts/templates/ComputedStyleBase.h.tmpl
@@ -33,7 +33,7 @@ namespace blink {
 // in ComputedStyle.h.
 class CORE_EXPORT ComputedStyleBase {
  public:
-  inline bool independentInheritedEqual(const ComputedStyleBase& o) const {
+  inline bool IndependentInheritedEqual(const ComputedStyleBase& o) const {
     return (
     {% for field in fields if field.is_inherited and field.is_independent %}
         {{field.name}} == o.{{field.name}}{{print_if(not loop.last, ' &&')}}
@@ -41,7 +41,7 @@ class CORE_EXPORT ComputedStyleBase {
     );
   }
 
-  inline bool nonIndependentInheritedEqual(const ComputedStyleBase& o) const {
+  inline bool NonIndependentInheritedEqual(const ComputedStyleBase& o) const {
     return (
     {% for field in fields if field.is_inherited and not field.is_independent %}
         {{field.name}} == o.{{field.name}}{{print_if(not loop.last, ' &&')}}
@@ -49,11 +49,11 @@ class CORE_EXPORT ComputedStyleBase {
     );
   }
 
-  inline bool inheritedEqual(const ComputedStyleBase& o) const {
-    return independentInheritedEqual(o) && nonIndependentInheritedEqual(o);
+  inline bool InheritedEqual(const ComputedStyleBase& o) const {
+    return IndependentInheritedEqual(o) && NonIndependentInheritedEqual(o);
   }
 
-  inline bool nonInheritedEqual(const ComputedStyleBase& o) const {
+  inline bool NonInheritedEqual(const ComputedStyleBase& o) const {
     return (
     {% for field in fields if field.is_property and not field.is_inherited %}
         {{field.name}} == o.{{field.name}}{{print_if(not loop.last, ' &&')}}
@@ -62,17 +62,17 @@ class CORE_EXPORT ComputedStyleBase {
   }
 
   enum IsAtShadowBoundary {
-    AtShadowBoundary,
-    NotAtShadowBoundary,
+    kAtShadowBoundary,
+    kNotAtShadowBoundary,
   };
-  void inheritFrom(const ComputedStyleBase& inheritParent,
-                   IsAtShadowBoundary isAtShadowBoundary = NotAtShadowBoundary);
+  void InheritFrom(const ComputedStyleBase& inheritParent,
+                   IsAtShadowBoundary isAtShadowBoundary = kNotAtShadowBoundary);
 
-  void copyNonInheritedFromCached(const ComputedStyleBase& other);
+  void CopyNonInheritedFromCached(const ComputedStyleBase& other);
 
   // Copies the values of any independent inherited properties from the parent
   // style that are marked as inherited by this style.
-  void propagateIndependentInheritedProperties(
+  void PropagateIndependentInheritedProperties(
       const ComputedStyleBase& parentStyle);
 
   // Fields.
diff --git a/third_party/WebKit/Source/build/scripts/templates/ElementFactory.cpp.tmpl b/third_party/WebKit/Source/build/scripts/templates/ElementFactory.cpp.tmpl
index 280201db8ac5..4dfd11502eb9 100644
--- a/third_party/WebKit/Source/build/scripts/templates/ElementFactory.cpp.tmpl
+++ b/third_party/WebKit/Source/build/scripts/templates/ElementFactory.cpp.tmpl
@@ -38,12 +38,12 @@ static {{namespace}}Element* {{tag|symbol}}Constructor(
     CreateElementFlags flags) {
   {% if tag.runtimeEnabled %}
   if (!RuntimeEnabledFeatures::{{tag.runtimeEnabled}}Enabled())
-    return {{fallback_interface}}::create({{tag|symbol}}Tag, document);
+    return {{fallback_interface}}::Create({{tag|symbol}}Tag, document);
   {% endif %}
-  return {{tag.interface}}::create(
+  return {{tag.interface}}::Create(
       {%- if tag.multipleTagNames %}{{tag|symbol}}Tag, {% endif -%}
       document
-      {%- if tag.constructorNeedsCreatedByParser %}, flags & CreatedByParser{% endif -%}
+      {%- if tag.constructorNeedsCreatedByParser %}, flags & kCreatedByParser{% endif -%}
   );
 }
 {% endfor %}
@@ -64,7 +64,7 @@ static void create{{namespace}}FunctionMap() {
   {% endfor %}
   };
   for (size_t i = 0; i < WTF_ARRAY_LENGTH(data); i++)
-    g_constructors->set(data[i].tag.localName(), data[i].func);
+    g_constructors->Set(data[i].tag.LocalName(), data[i].func);
 }
 
 {{namespace}}Element* {{namespace}}ElementFactory::create{{namespace}}Element(
@@ -82,23 +82,23 @@ static void create{{namespace}}FunctionMap() {
   // TODO(dominicc): When the HTML parser can pass an error
   // reporting ExceptionState, and "v0" custom elements have been
   // removed, consolidate custom element creation into one place.
-  if (flags != CreatedByCreateElement && CustomElement::shouldCreateCustomElement(localName)) {
-    QualifiedName tagName(nullAtom, localName, HTMLNames::xhtmlNamespaceURI);
-    if (flags & AsynchronousCustomElements)
-      return CustomElement::createCustomElementAsync(document, tagName);
-    return CustomElement::createCustomElementSync(document, tagName);
+  if (flags != kCreatedByCreateElement && CustomElement::ShouldCreateCustomElement(localName)) {
+    QualifiedName tagName(g_null_atom, localName, HTMLNames::xhtmlNamespaceURI);
+    if (flags & kAsynchronousCustomElements)
+      return CustomElement::CreateCustomElementAsync(document, tagName);
+    return CustomElement::CreateCustomElementSync(document, tagName);
   }
   {% endif %}
 
-  if (document.registrationContext() &&
-      V0CustomElement::isValidName(localName)) {
-    Element* element = document.registrationContext()->createCustomTagElement(
-        document, QualifiedName(nullAtom, localName, {{namespace_prefix}}NamespaceURI));
-    SECURITY_DCHECK(element->is{{namespace}}Element());
-    return to{{namespace}}Element(element);
+  if (document.RegistrationContext() &&
+      V0CustomElement::IsValidName(localName)) {
+    Element* element = document.RegistrationContext()->CreateCustomTagElement(
+        document, QualifiedName(g_null_atom, localName, {{namespace_prefix}}NamespaceURI));
+    SECURITY_DCHECK(element->Is{{namespace}}Element());
+    return To{{namespace}}Element(element);
   }
 
-  return {{fallback_interface}}::create(QualifiedName(nullAtom, localName, {{namespace_prefix}}NamespaceURI), document);
+  return {{fallback_interface}}::Create(QualifiedName(g_null_atom, localName, {{namespace_prefix}}NamespaceURI), document);
 }
 
 } // namespace blink
diff --git a/third_party/WebKit/Source/build/scripts/templates/ElementFactory.h.tmpl b/third_party/WebKit/Source/build/scripts/templates/ElementFactory.h.tmpl
index e684bc32724f..8bd30a00d1e8 100644
--- a/third_party/WebKit/Source/build/scripts/templates/ElementFactory.h.tmpl
+++ b/third_party/WebKit/Source/build/scripts/templates/ElementFactory.h.tmpl
@@ -22,7 +22,7 @@ class {{namespace}}ElementFactory {
   static {{namespace}}Element* create{{namespace}}Element(
       const AtomicString& localName,
       Document&,
-      CreateElementFlags flags = CreatedByParser);
+      CreateElementFlags flags = kCreatedByParser);
 };
 
 } // namespace blink
diff --git a/third_party/WebKit/Source/build/scripts/templates/ElementLookupTrie.cpp.tmpl b/third_party/WebKit/Source/build/scripts/templates/ElementLookupTrie.cpp.tmpl
index 4d6828a42b74..3bc573e57226 100644
--- a/third_party/WebKit/Source/build/scripts/templates/ElementLookupTrie.cpp.tmpl
+++ b/third_party/WebKit/Source/build/scripts/templates/ElementLookupTrie.cpp.tmpl
@@ -14,7 +14,7 @@ using namespace {{namespace}}Names;
 StringImpl* lookup{{namespace}}Tag(const UChar* data, unsigned length) {
   DCHECK(data);
   DCHECK(length);
-  {% macro trie_return_statement(tag) %}{{tag}}Tag.localName().impl(){% endmacro %}
+  {% macro trie_return_statement(tag) %}{{tag}}Tag.LocalName().Impl(){% endmacro %}
   {{ trie_length_switch(length_tries, trie_return_statement, false) | indent(4) }}
   return nullptr;
 }
diff --git a/third_party/WebKit/Source/build/scripts/templates/ElementTypeHelpers.cpp.tmpl b/third_party/WebKit/Source/build/scripts/templates/ElementTypeHelpers.cpp.tmpl
index fafe78021108..4afbeca8ad77 100644
--- a/third_party/WebKit/Source/build/scripts/templates/ElementTypeHelpers.cpp.tmpl
+++ b/third_party/WebKit/Source/build/scripts/templates/ElementTypeHelpers.cpp.tmpl
@@ -17,13 +17,13 @@ void createHTMLTypeMap() {
   DCHECK(!html_type_map);
   html_type_map = new HTMLTypeMap;
   {% for tag in tags|sort %}
-  html_type_map->set(AtomicString("{{tag.name}}"), HTMLElementType::k{{tag.interface}});
+  html_type_map->Set(AtomicString("{{tag.name}}"), HTMLElementType::k{{tag.interface}});
   {% endfor %}
 }
 
 HTMLElementType htmlElementTypeForTag(const AtomicString& tagName) {
   if (!html_type_map) createHTMLTypeMap();
-  if (html_type_map->contains(tagName)) {
+  if (html_type_map->Contains(tagName)) {
     {% for tag in tags|sort %}
     {% if tag.runtimeEnabled %}
     if (tagName == "{{tag.name}}") {
diff --git a/third_party/WebKit/Source/build/scripts/templates/ElementTypeHelpers.h.tmpl b/third_party/WebKit/Source/build/scripts/templates/ElementTypeHelpers.h.tmpl
index 35ca29d97c3c..4ea2e9657a03 100644
--- a/third_party/WebKit/Source/build/scripts/templates/ElementTypeHelpers.h.tmpl
+++ b/third_party/WebKit/Source/build/scripts/templates/ElementTypeHelpers.h.tmpl
@@ -21,23 +21,23 @@ inline bool is{{tag.interface}}(const {{namespace}}Element& element) {
   if (!RuntimeEnabledFeatures::{{tag.runtimeEnabled}}Enabled())
     return false;
   {% endif %}
-  return element.hasTagName({{namespace}}Names::{{tag|symbol}}Tag);
+  return element.HasTagName({{namespace}}Names::{{tag|symbol}}Tag);
 }
 inline bool is{{tag.interface}}(const {{namespace}}Element* element) {
   return element && is{{tag.interface}}(*element);
 }
 inline bool is{{tag.interface}}(const Node& node) {
-  return node.is{{namespace}}Element() && is{{tag.interface}}(to{{namespace}}Element(node));
+  return node.Is{{namespace}}Element() && is{{tag.interface}}(To{{namespace}}Element(node));
 }
 inline bool is{{tag.interface}}(const Node* node) {
   return node && is{{tag.interface}}(*node);
 }
 template <>
-inline bool isElementOfType<const {{tag.interface}}>(const Node& node) {
+inline bool IsElementOfType<const {{tag.interface}}>(const Node& node) {
   return is{{tag.interface}}(node);
 }
 template <>
-inline bool isElementOfType<const {{tag.interface}}>(const {{namespace}}Element& element) {
+inline bool IsElementOfType<const {{tag.interface}}>(const {{namespace}}Element& element) {
   return is{{tag.interface}}(element);
 }
 
@@ -47,8 +47,8 @@ inline bool isElementOfType<const {{tag.interface}}>(const {{namespace}}Element&
 // unsafe due to multiple inheritence.
 
 {% for tag in tags|sort if not tag.multipleTagNames and not tag.noTypeHelpers %}
-#define to{{tag.interface}}(x) blink::toElement<blink::{{tag.interface}}>(x)
-#define to{{tag.interface}}OrDie(x) blink::toElementOrDie<blink::{{tag.interface}}>(x)
+#define to{{tag.interface}}(x) blink::ToElement<blink::{{tag.interface}}>(x)
+#define to{{tag.interface}}OrDie(x) blink::ToElementOrDie<blink::{{tag.interface}}>(x)
 {% endfor %}
 
 {% if namespace == "HTML" %}
diff --git a/third_party/WebKit/Source/build/scripts/templates/EventFactory.cpp.tmpl b/third_party/WebKit/Source/build/scripts/templates/EventFactory.cpp.tmpl
index b5fa84794be1..b552329352a7 100644
--- a/third_party/WebKit/Source/build/scripts/templates/EventFactory.cpp.tmpl
+++ b/third_party/WebKit/Source/build/scripts/templates/EventFactory.cpp.tmpl
@@ -13,17 +13,17 @@
 
 namespace blink {
 
-{{namespace}}* {{namespace}}{{suffix}}Factory::create(ExecutionContext* executionContext, const String& type) {
+{{namespace}}* {{namespace}}{{suffix}}Factory::Create(ExecutionContext* executionContext, const String& type) {
   {% for event in events if event|script_name|create_event_whitelist or event|script_name|create_event_measure_whitelist %}
   {% if event|script_name|create_event_whitelist or event|script_name|create_event_measure_whitelist %}
-  if (equalIgnoringCase(type, "{{event|script_name}}"){% if event.RuntimeEnabled %} && RuntimeEnabledFeatures::{{event.RuntimeEnabled|lower_first}}(){% endif %}) {
+  if (EqualIgnoringCase(type, "{{event|script_name}}"){% if event.RuntimeEnabled %} && RuntimeEnabledFeatures::{{event.RuntimeEnabled|lower_first}}(){% endif %}) {
   {% else %}
   if (type == "{{event|script_name}}"{% if event.RuntimeEnabled %} && RuntimeEnabledFeatures::{{event.RuntimeEnabled|lower_first}}(){% endif %}) {
   {% endif %}
     {% if not event|script_name|create_event_whitelist %}
-    UseCounter::count(executionContext, UseCounter::{{event|script_name|measure_name}});
+    UseCounter::Count(executionContext, UseCounter::k{{event|script_name|measure_name}});
     {% endif %}
-    return {{event|cpp_name}}::create();
+    return {{event|cpp_name}}::Create();
   }
   {% endfor %}
   return nullptr;
diff --git a/third_party/WebKit/Source/build/scripts/templates/InstrumentingProbesImpl.cpp.tmpl b/third_party/WebKit/Source/build/scripts/templates/InstrumentingProbesImpl.cpp.tmpl
index 4db548ba0847..6dd319b62f24 100644
--- a/third_party/WebKit/Source/build/scripts/templates/InstrumentingProbesImpl.cpp.tmpl
+++ b/third_party/WebKit/Source/build/scripts/templates/InstrumentingProbesImpl.cpp.tmpl
@@ -28,7 +28,7 @@ void {{sink_class}}::add{{class_name}}({{class_name}}* agent) {
 
 void {{sink_class}}::remove{{class_name}}({{class_name}}* agent) {
   m_{{getter_name}}s.erase(agent);
-  m_has{{class_name}}s = !m_{{getter_name}}s.isEmpty();
+  m_has{{class_name}}s = !m_{{getter_name}}s.IsEmpty();
 }
 
 {% endfor -%}
@@ -37,7 +37,7 @@ DEFINE_TRACE({{sink_class}})
 {
 {% for agent in agents %}
 {% set getter_name = agent | agent_name_to_class | to_lower_case %}
-  visitor->trace(m_{{getter_name}}s);
+  visitor->Trace(m_{{getter_name}}s);
 {% endfor %}
 }
 
@@ -50,8 +50,8 @@ namespace probe {
 {%- endmacro %}
 
 {% macro probe_body(probe, common_name) %}
-{% set agent_probe_name = common_name or probe.name %}
-  {{sink_class}}* sink = to{{sink_class}}({{probe.params[0].name}});
+{% set agent_probe_name = method_name(common_name or probe.name) %}
+  {{sink_class}}* sink = To{{sink_class}}({{probe.params[0].name}});
   if (!sink)
     return;
 {% for param in probe.params %}
@@ -77,11 +77,11 @@ namespace probe {
 {%- if not loop.last %},
 {% endif %}
 {% endfor %} {
-{% call probe_body(probe, "will") %}*this{% endcall %}
+{% call probe_body(probe, "Will") %}*this{% endcall %}
 }
 
 {{probe.name}}::~{{probe.name}}() {
-{% call probe_body(probe, "did") %}*this{% endcall %}
+{% call probe_body(probe, "Did") %}*this{% endcall %}
 }
 
 {% else -%}
diff --git a/third_party/WebKit/Source/build/scripts/templates/InternalSettingsGenerated.cpp.tmpl b/third_party/WebKit/Source/build/scripts/templates/InternalSettingsGenerated.cpp.tmpl
index 5eb67dfdd737..66cdd9a0314d 100644
--- a/third_party/WebKit/Source/build/scripts/templates/InternalSettingsGenerated.cpp.tmpl
+++ b/third_party/WebKit/Source/build/scripts/templates/InternalSettingsGenerated.cpp.tmpl
@@ -11,7 +11,7 @@ namespace blink {
 InternalSettingsGenerated::InternalSettingsGenerated(Page* page)
     : m_page(page)
     {% for setting in settings if setting.type|to_idl_type %}
-    , m_{{setting.name}}(page->settings().get{{setting.name|upper_first}}())
+    , m_{{setting.name}}(page->GetSettings().Get{{setting.name|upper_first}}())
     {% endfor %}
 {
 }
@@ -20,18 +20,18 @@ InternalSettingsGenerated::~InternalSettingsGenerated() {}
 
 void InternalSettingsGenerated::resetToConsistentState() {
   {% for setting in settings if setting.type|to_idl_type %}
-  m_page->settings().set{{setting.name|upper_first}}(m_{{setting.name}});
+  m_page->GetSettings().Set{{setting.name|upper_first}}(m_{{setting.name}});
   {% endfor %}
 }
 {% for setting in settings if setting.type|to_idl_type %}
 
 void InternalSettingsGenerated::set{{setting.name|upper_first}}({{setting.type|to_passing_type}} {{setting.name}}) {
-  m_page->settings().set{{setting.name|upper_first}}({{setting.name}});
+  m_page->GetSettings().Set{{setting.name|upper_first}}({{setting.name}});
 }
 {% endfor %}
 
 DEFINE_TRACE(InternalSettingsGenerated) {
-  visitor->trace(m_page);
+  visitor->Trace(m_page);
 }
 
 } // namespace blink
diff --git a/third_party/WebKit/Source/build/scripts/templates/MakeNames.cpp.tmpl b/third_party/WebKit/Source/build/scripts/templates/MakeNames.cpp.tmpl
index 3621be2e6045..01f860bcebc2 100644
--- a/third_party/WebKit/Source/build/scripts/templates/MakeNames.cpp.tmpl
+++ b/third_party/WebKit/Source/build/scripts/templates/MakeNames.cpp.tmpl
@@ -35,7 +35,7 @@ void init{{suffix}}() {
   };
 
   for (size_t i = 0; i < WTF_ARRAY_LENGTH(kNames); i++) {
-    StringImpl* stringImpl = StringImpl::createStatic(kNames[i].name, kNames[i].length, kNames[i].hash);
+    StringImpl* stringImpl = StringImpl::CreateStatic(kNames[i].name, kNames[i].length, kNames[i].hash);
     void* address = reinterpret_cast<AtomicString*>(&{{suffix}}NamesStorage) + i;
     new (address) AtomicString(stringImpl);
   }
diff --git a/third_party/WebKit/Source/build/scripts/templates/MakeQualifiedNames.cpp.tmpl b/third_party/WebKit/Source/build/scripts/templates/MakeQualifiedNames.cpp.tmpl
index 69f37ea04db7..25f9ba9f46e4 100644
--- a/third_party/WebKit/Source/build/scripts/templates/MakeQualifiedNames.cpp.tmpl
+++ b/third_party/WebKit/Source/build/scripts/templates/MakeQualifiedNames.cpp.tmpl
@@ -25,7 +25,7 @@ const {{namespace}}QualifiedName& {{tag|symbol}}Tag = reinterpret_cast<{{namespa
 
 
 std::unique_ptr<const {{namespace}}QualifiedName*[]> get{{namespace}}Tags() {
-  std::unique_ptr<const {{namespace}}QualifiedName*[]> tags = wrapArrayUnique(new const {{namespace}}QualifiedName*[{{namespace}}TagsCount]);
+  std::unique_ptr<const {{namespace}}QualifiedName*[]> tags = WrapArrayUnique(new const {{namespace}}QualifiedName*[{{namespace}}TagsCount]);
   for (size_t i = 0; i < {{namespace}}TagsCount; i++)
     tags[i] = reinterpret_cast<{{namespace}}QualifiedName*>(&{{suffix}}TagStorage) + i;
   return tags;
@@ -42,7 +42,7 @@ const QualifiedName& {{attr|symbol}}Attr = reinterpret_cast<QualifiedName*>(&{{s
 
 {% if namespace != 'HTML' %}
 std::unique_ptr<const QualifiedName*[]> get{{namespace}}Attrs() {
-  std::unique_ptr<const QualifiedName*[]> attrs = wrapArrayUnique(new const QualifiedName*[{{namespace}}AttrsCount]);
+  std::unique_ptr<const QualifiedName*[]> attrs = WrapArrayUnique(new const QualifiedName*[{{namespace}}AttrsCount]);
   for (size_t i = 0; i < {{namespace}}AttrsCount; i++)
     attrs[i] = reinterpret_cast<QualifiedName*>(&{{suffix}}AttrStorage) + i;
   return attrs;
@@ -77,11 +77,11 @@ void init() {
   {% endif %}
   size_t attr_i = 0;
   for (size_t i = 0; i < WTF_ARRAY_LENGTH(kNames); i++) {
-    StringImpl* stringImpl = StringImpl::createStatic(kNames[i].name, kNames[i].length, kNames[i].hash);
+    StringImpl* stringImpl = StringImpl::CreateStatic(kNames[i].name, kNames[i].length, kNames[i].hash);
     {% if tags %}
     if (kNames[i].isTag) {
       void* address = reinterpret_cast<{{namespace}}QualifiedName*>(&{{suffix}}TagStorage) + tag_i;
-      QualifiedName::createStatic(address, stringImpl, {{namespace_prefix}}NS);
+      QualifiedName::CreateStatic(address, stringImpl, {{namespace_prefix}}NS);
       tag_i++;
     }
 
@@ -90,9 +90,9 @@ void init() {
     {% endif %}
     void* address = reinterpret_cast<QualifiedName*>(&{{suffix}}AttrStorage) + attr_i;
     {% if use_namespace_for_attrs %}
-    QualifiedName::createStatic(address, stringImpl, {{namespace_prefix}}NS);
+    QualifiedName::CreateStatic(address, stringImpl, {{namespace_prefix}}NS);
     {% else %}
-    QualifiedName::createStatic(address, stringImpl);
+    QualifiedName::CreateStatic(address, stringImpl);
     {% endif %}
     attr_i++;
   }
diff --git a/third_party/WebKit/Source/build/scripts/templates/MediaFeatures.h.tmpl b/third_party/WebKit/Source/build/scripts/templates/MediaFeatures.h.tmpl
index d4a56ab0eb1f..e357f3b1c269 100644
--- a/third_party/WebKit/Source/build/scripts/templates/MediaFeatures.h.tmpl
+++ b/third_party/WebKit/Source/build/scripts/templates/MediaFeatures.h.tmpl
@@ -6,7 +6,9 @@
 
 #define CSS_MEDIAQUERY_NAMES_FOR_EACH_MEDIAFEATURE(macro) \
     {% for entry in entries %}
-    macro({{entry|symbol}}){% if not loop.last %} \
+    {% set constant_prefix = entry | symbol %}
+    {% set method_prefix = constant_prefix | upper_first_letter %}
+    macro({{constant_prefix}}, {{method_prefix}}){% if not loop.last %} \
     {% endif %}
     {% endfor %}
 
diff --git a/third_party/WebKit/Source/build/scripts/templates/OriginTrials.cpp.tmpl b/third_party/WebKit/Source/build/scripts/templates/OriginTrials.cpp.tmpl
index 5d81ac5a16a7..4b222bdf05eb 100644
--- a/third_party/WebKit/Source/build/scripts/templates/OriginTrials.cpp.tmpl
+++ b/third_party/WebKit/Source/build/scripts/templates/OriginTrials.cpp.tmpl
@@ -22,9 +22,9 @@ bool OriginTrials::{{feature.first_lowered_name}}Enabled(ExecutionContext* execu
 {%- endfor %}
 {% endif %}
 
-  OriginTrialContext* context =OriginTrialContext::from(executionContext,
-      OriginTrialContext::DontCreateIfNotExists);
-  return context && context->isTrialEnabled("{{feature.origin_trial_feature_name}}");
+  OriginTrialContext* context =OriginTrialContext::From(executionContext,
+      OriginTrialContext::kDontCreateIfNotExists);
+  return context && context->IsTrialEnabled("{{feature.origin_trial_feature_name}}");
 {% if feature.origin_trial_os %}
 #else
   return false;
diff --git a/third_party/WebKit/Source/build/scripts/templates/SettingsMacros.h.tmpl b/third_party/WebKit/Source/build/scripts/templates/SettingsMacros.h.tmpl
index c21f1b65b446..18e5f9cca31a 100644
--- a/third_party/WebKit/Source/build/scripts/templates/SettingsMacros.h.tmpl
+++ b/third_party/WebKit/Source/build/scripts/templates/SettingsMacros.h.tmpl
@@ -6,8 +6,8 @@
 
 #define SETTINGS_GETTERS_AND_SETTERS \
     {% for setting in settings %}
-    {{setting.type|to_passing_type}} get{{setting.name|upper_first}}() const { return m_{{setting.name}}; } \
-    void set{{setting.name|upper_first}}({{setting.type|to_passing_type}} {{setting.name}}); \
+    {{setting.type|to_passing_type}} Get{{setting.name|upper_first}}() const { return m_{{setting.name}}; } \
+    void Set{{setting.name|upper_first}}({{setting.type|to_passing_type}} {{setting.name}}); \
     {% endfor %}
     void setFromStrings(const String& name, const String& value);
 // End of SETTINGS_GETTERS_AND_SETTERS.
@@ -32,31 +32,31 @@
 
 #define SETTINGS_SETTER_BODIES \
 {% for setting in settings %}
-void Settings::set{{setting.name|upper_first}}({{setting.type|to_passing_type}} {{setting.name}}) { \
+void Settings::Set{{setting.name|upper_first}}({{setting.type|to_passing_type}} {{setting.name}}) { \
   if (m_{{setting.name}} == {{setting.name}}) \
     return; \
   m_{{setting.name}} = {{setting.name}}; \
   {% if setting.invalidate %}
-  invalidate(SettingsDelegate::{{setting.invalidate}}Change); \
+  Invalidate(SettingsDelegate::k{{setting.invalidate}}Change); \
   {% endif  %}
 } \
 {% endfor %}
 void Settings::setFromStrings(const String& name, const String& value) { \
   {% for setting in settings %}
   if (name == "{{setting.name}}") { \
-    set{{setting.name|upper_first}}( \
+    Set{{setting.name|upper_first}}( \
       {% if setting.type == 'String' %}
       value \
       {% elif setting.type == 'bool' %}
-      value.isEmpty() || value == "true" \
+      value.IsEmpty() || value == "true" \
       {% elif setting.type == 'int' %}
-      value.toInt() \
+      value.ToInt() \
       {% elif setting.type == 'float' %}
-      value.toFloat() \
+      value.ToFloat() \
       {% elif setting.type == 'double' %}
-      value.toDouble() \
+      value.ToDouble() \
       {% else %}
-      static_cast<{{setting.type}}>(value.toInt()) \
+      static_cast<{{setting.type}}>(value.ToInt()) \
       {% endif %}
     ); \
     return; \
diff --git a/third_party/WebKit/Source/build/scripts/templates/StyleBuilder.cpp.tmpl b/third_party/WebKit/Source/build/scripts/templates/StyleBuilder.cpp.tmpl
index e439323a69db..f615e4d4e51c 100644
--- a/third_party/WebKit/Source/build/scripts/templates/StyleBuilder.cpp.tmpl
+++ b/third_party/WebKit/Source/build/scripts/templates/StyleBuilder.cpp.tmpl
@@ -12,7 +12,7 @@
 
 namespace blink {
 
-void StyleBuilder::applyProperty(CSSPropertyID property,
+void StyleBuilder::ApplyProperty(CSSPropertyID property,
                                  StyleResolverState& state,
                                  const CSSValue& value,
                                  bool isInitial,
@@ -40,9 +40,9 @@ void StyleBuilder::applyProperty(CSSPropertyID property,
     case {{property_id}}:
     {% endfor %}
     {
-      CSSPropertyID resolvedProperty = CSSProperty::resolveDirectionAwareProperty(property, state.style()->direction(), state.style()->getWritingMode());
+      CSSPropertyID resolvedProperty = CSSProperty::ResolveDirectionAwareProperty(property, state.Style()->Direction(), state.Style()->GetWritingMode());
       ASSERT(resolvedProperty != property);
-      applyProperty(resolvedProperty, state, value);
+      ApplyProperty(resolvedProperty, state, value);
       return;
     }
     {% for property_id, property in properties.items() if property.builder_skip %}
diff --git a/third_party/WebKit/Source/build/scripts/templates/StyleBuilderFunctions.cpp.tmpl b/third_party/WebKit/Source/build/scripts/templates/StyleBuilderFunctions.cpp.tmpl
index 1f7243f64ce0..4e81b0f414f9 100644
--- a/third_party/WebKit/Source/build/scripts/templates/StyleBuilderFunctions.cpp.tmpl
+++ b/third_party/WebKit/Source/build/scripts/templates/StyleBuilderFunctions.cpp.tmpl
@@ -29,11 +29,11 @@ void StyleBuilderFunctions::applyValue{{property_id}}(StyleResolverState& state,
 {%- endmacro %}
 {% macro set_value(property) %}
 {% if property.svg %}
-state.style()->accessSVGStyle().{{property.setter}}
+state.Style()->AccessSVGStyle().{{property.setter}}
 {%- elif property.font %}
-state.fontBuilder().{{property.setter}}
+state.GetFontBuilder().{{property.setter}}
 {%- else %}
-state.style()->{{property.setter}}
+state.Style()->{{property.setter}}
 {%- endif %}
 {% endmacro %}
 {% macro convert_and_set_value(property) %}
@@ -41,13 +41,13 @@ state.style()->{{property.setter}}
 {{set_value(property)}}(StyleBuilderConverter::{{property.converter}}(state, value));
 {# TODO(sashab): Remove this list from this file. #}
 {% elif property.type_name in ['short', 'unsigned short', 'int', 'unsigned int', 'unsigned', 'float', 'LineClampValue'] %}
-{{set_value(property)}}(toCSSPrimitiveValue(value).convertTo<{{property.type_name}}>());
+{{set_value(property)}}(ToCSSPrimitiveValue(value).ConvertTo<{{property.type_name}}>());
 {%- else %}
-{{set_value(property)}}(toCSSIdentifierValue(value).convertTo<{{property.type_name}}>());
+{{set_value(property)}}(ToCSSIdentifierValue(value).ConvertTo<{{property.type_name}}>());
 {%- endif %}
 {% endmacro %}
 {% macro set_is_inherited(property) %}
-state.style()->{{property.is_inherited_setter}}
+state.Style()->{{property.is_inherited_setter}}
 {% endmacro %}
 
 namespace blink {
@@ -72,11 +72,11 @@ namespace blink {
 {% if not property.custom_inherit %}
 {{declare_inherit_function(property_id)}} {
   {% if property.svg %}
-  {{set_value(property)}}(state.parentStyle()->svgStyle().{{property.getter}}());
+  {{set_value(property)}}(state.ParentStyle()->SvgStyle().{{property.getter}}());
   {% elif property.font %}
-  {{set_value(property)}}(state.parentFontDescription().{{property.getter}}());
+  {{set_value(property)}}(state.ParentFontDescription().{{property.getter}}());
   {% else %}
-  {{set_value(property)}}(state.parentStyle()->{{property.getter}}());
+  {{set_value(property)}}(state.ParentStyle()->{{property.getter}}());
   {% endif %}
   {% if property.independent %}
   {{set_is_inherited(property)}}(true);
@@ -96,26 +96,26 @@ namespace blink {
 {% endfor %}
 
 {% macro apply_animation(property_id, attribute, animation) %}
-{% set vector = attribute|lower_first + "List()" %}
+{% set vector = attribute + "List()" %}
 {{declare_initial_function(property_id)}} {
-  CSS{{animation}}Data& data = state.style()->access{{animation}}s();
-  data.{{vector}}.clear();
-  data.{{vector}}.push_back(CSS{{animation}}Data::initial{{attribute}}());
+  CSS{{animation}}Data& data = state.Style()->Access{{animation}}s();
+  data.{{vector}}.Clear();
+  data.{{vector}}.push_back(CSS{{animation}}Data::Initial{{attribute}}());
 }
 
 {{declare_inherit_function(property_id)}} {
-  const CSS{{animation}}Data* parentData = state.parentStyle()->{{animation|lower}}s();
+  const CSS{{animation}}Data* parentData = state.ParentStyle()->{{animation}}s();
   if (!parentData)
     applyInitial{{property_id}}(state);
   else
-    state.style()->access{{animation}}s().{{vector}} = parentData->{{vector}};
+    state.Style()->Access{{animation}}s().{{vector}} = parentData->{{vector}};
 }
 
 {{declare_value_function(property_id)}} {
-  CSS{{animation}}Data& data = state.style()->access{{animation}}s();
-  data.{{vector}}.clear();
-  for (auto& listValue : toCSSValueList(value))
-    data.{{vector}}.push_back(CSSToStyleMap::mapAnimation{{attribute}}(*listValue));
+  CSS{{animation}}Data& data = state.Style()->Access{{animation}}s();
+  data.{{vector}}.Clear();
+  for (auto& listValue : ToCSSValueList(value))
+    data.{{vector}}.push_back(CSSToStyleMap::MapAnimation{{attribute}}(*listValue));
 }
 {% endmacro %}
 {{apply_animation('CSSPropertyAnimationDelay', 'Delay', 'Animation')}}
@@ -133,130 +133,130 @@ namespace blink {
 
 {% macro apply_auto(property_id, auto_getter=none, auto_setter=none, auto_identity='CSSValueAuto') %}
 {% set property = properties[property_id] %}
-{% set auto_getter = auto_getter or 'hasAuto' + property.name_for_methods %}
-{% set auto_setter = auto_setter or 'setHasAuto' + property.name_for_methods %}
+{% set auto_getter = auto_getter or 'HasAuto' + property.name_for_methods %}
+{% set auto_setter = auto_setter or 'SetHasAuto' + property.name_for_methods %}
 {{declare_initial_function(property_id)}} {
-  state.style()->{{auto_setter}}();
+  state.Style()->{{auto_setter}}();
 }
 
 {{declare_inherit_function(property_id)}} {
-  if (state.parentStyle()->{{auto_getter}}())
-    state.style()->{{auto_setter}}();
+  if (state.ParentStyle()->{{auto_getter}}())
+    state.Style()->{{auto_setter}}();
   else
-    {{set_value(property)}}(state.parentStyle()->{{property.getter}}());
+    {{set_value(property)}}(state.ParentStyle()->{{property.getter}}());
 }
 
 {{declare_value_function(property_id)}} {
-  if (value.isIdentifierValue() && toCSSIdentifierValue(value).getValueID() == {{auto_identity}})
-    state.style()->{{auto_setter}}();
+  if (value.IsIdentifierValue() && ToCSSIdentifierValue(value).GetValueID() == {{auto_identity}})
+    state.Style()->{{auto_setter}}();
   else
     {{convert_and_set_value(property)}}
 }
 {% endmacro %}
 {{apply_auto('CSSPropertyClip')}}
 {{apply_auto('CSSPropertyColumnCount')}}
-{{apply_auto('CSSPropertyColumnGap', auto_getter='hasNormalColumnGap', auto_setter='setHasNormalColumnGap', auto_identity='CSSValueNormal')}}
+{{apply_auto('CSSPropertyColumnGap', auto_getter='HasNormalColumnGap', auto_setter='SetHasNormalColumnGap', auto_identity='CSSValueNormal')}}
 {{apply_auto('CSSPropertyColumnWidth')}}
 {{apply_auto('CSSPropertyZIndex')}}
 
 static bool lengthMatchesAllSides(const LengthBox& lengthBox,
                                   const Length& length) {
-  return (lengthBox.left() == length &&
-      lengthBox.right() == length &&
-      lengthBox.top() == length &&
-      lengthBox.bottom() == length);
+  return (lengthBox.Left() == length &&
+      lengthBox.Right() == length &&
+      lengthBox.Top() == length &&
+      lengthBox.Bottom() == length);
 }
 
 static bool borderImageLengthMatchesAllSides(
     const BorderImageLengthBox& borderImageLengthBox,
     const BorderImageLength& borderImageLength) {
-  return (borderImageLengthBox.left() == borderImageLength &&
-      borderImageLengthBox.right() == borderImageLength &&
-      borderImageLengthBox.top() == borderImageLength &&
-      borderImageLengthBox.bottom() == borderImageLength);
+  return (borderImageLengthBox.Left() == borderImageLength &&
+      borderImageLengthBox.Right() == borderImageLength &&
+      borderImageLengthBox.Top() == borderImageLength &&
+      borderImageLengthBox.Bottom() == borderImageLength);
 }
 
 {% macro apply_border_image_modifier(property_id, modifier_type) %}
 {% set is_mask_box = 'MaskBox' in property_id %}
-{% set getter = 'maskBoxImage' if is_mask_box else 'borderImage' %}
-{% set setter = 'setMaskBoxImage' if is_mask_box else 'setBorderImage' %}
+{% set getter = 'MaskBoxImage' if is_mask_box else 'BorderImage' %}
+{% set setter = 'SetMaskBoxImage' if is_mask_box else 'SetBorderImage' %}
 {{ declare_initial_function(property_id) }} {
-  const NinePieceImage& currentImage = state.style()->{{getter}}();
+  const NinePieceImage& currentImage = state.Style()->{{getter}}();
   {# Check for equality in case we can bail out before creating a new NinePieceImage. #}
   {% if modifier_type == 'Outset' %}
-  if (borderImageLengthMatchesAllSides(currentImage.outset(),
-                                       BorderImageLength(Length(0, Fixed))))
+  if (borderImageLengthMatchesAllSides(currentImage.Outset(),
+                                       BorderImageLength(Length(0, kFixed))))
     return;
   {% elif modifier_type == 'Repeat' %}
-  if (currentImage.horizontalRule() == StretchImageRule &&
-      currentImage.verticalRule() == StretchImageRule)
+  if (currentImage.HorizontalRule() == kStretchImageRule &&
+      currentImage.VerticalRule() == kStretchImageRule)
     return;
   {% elif modifier_type == 'Slice' and is_mask_box %}
   // Masks have a different initial value for slices. Preserve the value of 0
   // for backwards compatibility.
-  if (currentImage.fill() == true &&
-      lengthMatchesAllSides(currentImage.imageSlices(), Length(0, Fixed)))
+  if (currentImage.Fill() == true &&
+      lengthMatchesAllSides(currentImage.ImageSlices(), Length(0, kFixed)))
     return;
   {% elif modifier_type == 'Slice' and not is_mask_box %}
-  if (currentImage.fill() == false &&
-      lengthMatchesAllSides(currentImage.imageSlices(), Length(100, Percent)))
+  if (currentImage.Fill() == false &&
+      lengthMatchesAllSides(currentImage.ImageSlices(), Length(100, kPercent)))
     return;
   {% elif modifier_type == 'Width' and is_mask_box %}
   // Masks have a different initial value for widths. Preserve the value of
   // 'auto' for backwards compatibility.
-  if (borderImageLengthMatchesAllSides(currentImage.borderSlices(),
-                                       BorderImageLength(Length(Auto))))
+  if (borderImageLengthMatchesAllSides(currentImage.BorderSlices(),
+                                       BorderImageLength(Length(kAuto))))
     return;
   {% elif modifier_type == 'Width' and not is_mask_box %}
-  if (borderImageLengthMatchesAllSides(currentImage.borderSlices(),
+  if (borderImageLengthMatchesAllSides(currentImage.BorderSlices(),
                                        BorderImageLength(1.0)))
     return;
   {% endif %}
 
   NinePieceImage image(currentImage);
   {% if modifier_type == 'Outset' %}
-  image.setOutset(Length(0, Fixed));
+  image.SetOutset(Length(0, kFixed));
   {% elif modifier_type == 'Repeat' %}
-  image.setHorizontalRule(StretchImageRule);
-  image.setVerticalRule(StretchImageRule);
+  image.SetHorizontalRule(kStretchImageRule);
+  image.SetVerticalRule(kStretchImageRule);
   {% elif modifier_type == 'Slice' and is_mask_box %}
-  image.setImageSlices(LengthBox({{ (['Length(0, Fixed)']*4) | join(', ') }}));
-  image.setFill(true);
+  image.SetImageSlices(LengthBox({{ (['Length(0, kFixed)']*4) | join(', ') }}));
+  image.SetFill(true);
   {% elif modifier_type == 'Slice' and not is_mask_box %}
-  image.setImageSlices(LengthBox({{ (['Length(100, Percent)']*4) | join(', ') }}));
-  image.setFill(false);
+  image.SetImageSlices(LengthBox({{ (['Length(100, kPercent)']*4) | join(', ') }}));
+  image.SetFill(false);
   {% elif modifier_type == 'Width' %}
-  image.setBorderSlices({{ 'Length(Auto)' if is_mask_box else '1.0' }});
+  image.SetBorderSlices({{ 'Length(kAuto)' if is_mask_box else '1.0' }});
   {% endif %}
-  state.style()->{{setter}}(image);
+  state.Style()->{{setter}}(image);
 }
 
 {{declare_inherit_function(property_id)}} {
-  NinePieceImage image(state.style()->{{getter}}());
+  NinePieceImage image(state.Style()->{{getter}}());
   {% if modifier_type == 'Outset' %}
-  image.copyOutsetFrom(state.parentStyle()->{{getter}}());
+  image.CopyOutsetFrom(state.ParentStyle()->{{getter}}());
   {% elif modifier_type == 'Repeat' %}
-  image.copyRepeatFrom(state.parentStyle()->{{getter}}());
+  image.CopyRepeatFrom(state.ParentStyle()->{{getter}}());
   {% elif modifier_type == 'Slice' %}
-  image.copyImageSlicesFrom(state.parentStyle()->{{getter}}());
+  image.CopyImageSlicesFrom(state.ParentStyle()->{{getter}}());
   {% elif modifier_type == 'Width' %}
-  image.copyBorderSlicesFrom(state.parentStyle()->{{getter}}());
+  image.CopyBorderSlicesFrom(state.ParentStyle()->{{getter}}());
   {% endif %}
-  state.style()->{{setter}}(image);
+  state.Style()->{{setter}}(image);
 }
 
 {{declare_value_function(property_id)}} {
-  NinePieceImage image(state.style()->{{getter}}());
+  NinePieceImage image(state.Style()->{{getter}}());
   {% if modifier_type == 'Outset' %}
-  image.setOutset(CSSToStyleMap::mapNinePieceImageQuad(state, value));
+  image.SetOutset(CSSToStyleMap::MapNinePieceImageQuad(state, value));
   {% elif modifier_type == 'Repeat' %}
-  CSSToStyleMap::mapNinePieceImageRepeat(state, value, image);
+  CSSToStyleMap::MapNinePieceImageRepeat(state, value, image);
   {% elif modifier_type == 'Slice' %}
-  CSSToStyleMap::mapNinePieceImageSlice(state, value, image);
+  CSSToStyleMap::MapNinePieceImageSlice(state, value, image);
   {% elif modifier_type == 'Width' %}
-  image.setBorderSlices(CSSToStyleMap::mapNinePieceImageQuad(state, value));
+  image.SetBorderSlices(CSSToStyleMap::MapNinePieceImageQuad(state, value));
   {% endif %}
-  state.style()->{{setter}}(image);
+  state.Style()->{{setter}}(image);
 }
 {% endmacro %}
 {{apply_border_image_modifier('CSSPropertyBorderImageOutset', 'Outset')}}
@@ -271,44 +271,44 @@ static bool borderImageLengthMatchesAllSides(
 {% macro apply_value_border_image_source(property_id) %}
 {{declare_value_function(property_id)}} {
   {% set property = properties[property_id] %}
-  {{set_value(property)}}(state.styleImage({{property_id}}, value));
+  {{set_value(property)}}(state.GetStyleImage({{property_id}}, value));
 }
 {% endmacro %}
 {{apply_value_border_image_source('CSSPropertyBorderImageSource')}}
 {{apply_value_border_image_source('CSSPropertyWebkitMaskBoxImageSource')}}
 
-{% macro apply_color(property_id, initial_color='StyleColor::currentColor') %}
+{% macro apply_color(property_id, initial_color='StyleColor::CurrentColor') %}
 {% set property = properties[property_id] %}
-{% set visited_link_setter = 'setVisitedLink' + property.name_for_methods %}
+{% set visited_link_setter = 'SetVisitedLink' + property.name_for_methods %}
 {{declare_initial_function(property_id)}} {
   StyleColor color = {{initial_color}}();
-  if (state.applyPropertyToRegularStyle())
+  if (state.ApplyPropertyToRegularStyle())
     {{set_value(property)}}(color);
-  if (state.applyPropertyToVisitedLinkStyle())
-    state.style()->{{visited_link_setter}}(color);
+  if (state.ApplyPropertyToVisitedLinkStyle())
+    state.Style()->{{visited_link_setter}}(color);
 }
 
 {{declare_inherit_function(property_id)}} {
   // Visited link style can never explicitly inherit from parent visited link
   // style so no separate getters are needed.
-  StyleColor color = state.parentStyle()->{{property.getter}}();
-  if (state.applyPropertyToRegularStyle())
+  StyleColor color = state.ParentStyle()->{{property.getter}}();
+  if (state.ApplyPropertyToRegularStyle())
     {{set_value(property)}}(color);
-  if (state.applyPropertyToVisitedLinkStyle())
-    state.style()->{{visited_link_setter}}(color);
+  if (state.ApplyPropertyToVisitedLinkStyle())
+    state.Style()->{{visited_link_setter}}(color);
 }
 
 {{declare_value_function(property_id)}}
 {
-  if (state.applyPropertyToRegularStyle())
-    {{set_value(property)}}(StyleBuilderConverter::convertStyleColor(state, value));
-  if (state.applyPropertyToVisitedLinkStyle()) {
-    state.style()->{{visited_link_setter}}(
-        StyleBuilderConverter::convertStyleColor(state, value, true));
+  if (state.ApplyPropertyToRegularStyle())
+    {{set_value(property)}}(StyleBuilderConverter::ConvertStyleColor(state, value));
+  if (state.ApplyPropertyToVisitedLinkStyle()) {
+    state.Style()->{{visited_link_setter}}(
+        StyleBuilderConverter::ConvertStyleColor(state, value, true));
   }
 }
 {% endmacro %}
-{{apply_color('CSSPropertyBackgroundColor', initial_color='ComputedStyle::initialBackgroundColor') }}
+{{apply_color('CSSPropertyBackgroundColor', initial_color='ComputedStyle::InitialBackgroundColor') }}
 {{apply_color('CSSPropertyBorderBottomColor')}}
 {{apply_color('CSSPropertyBorderLeftColor')}}
 {{apply_color('CSSPropertyBorderRightColor')}}
@@ -323,144 +323,145 @@ static bool borderImageLengthMatchesAllSides(
 {% macro apply_counter(property_id, action) %}
 {% set property = properties[property_id] %}
 {{declare_initial_function(property_id)}} {
-  state.style()->clear{{action}}Directives();
+  state.Style()->Clear{{action}}Directives();
 }
 
 {{declare_inherit_function(property_id)}} {
-  const CounterDirectiveMap* parentMap = state.parentStyle()->counterDirectives();
+  const CounterDirectiveMap* parentMap = state.ParentStyle()->GetCounterDirectives();
   if (!parentMap)
     return;
 
-  CounterDirectiveMap& map = state.style()->accessCounterDirectives();
-  DCHECK(!parentMap->isEmpty());
+  CounterDirectiveMap& map = state.Style()->AccessCounterDirectives();
+  DCHECK(!parentMap->IsEmpty());
 
   typedef CounterDirectiveMap::const_iterator Iterator;
   Iterator end = parentMap->end();
   for (Iterator it = parentMap->begin(); it != end; ++it) {
-    CounterDirectives& directives = map.insert(it->key, CounterDirectives()).storedValue->value;
-    directives.inherit{{action}}(it->value);
+    CounterDirectives& directives = map.insert(it->key, CounterDirectives()).stored_value->value;
+    directives.Inherit{{action}}(it->value);
   }
 }
 
 {{declare_value_function(property_id)}} {
-  state.style()->clear{{action}}Directives();
+  state.Style()->Clear{{action}}Directives();
 
-  if (!value.isValueList()) {
-    DCHECK(value.isIdentifierValue());
-    DCHECK_EQ(toCSSIdentifierValue(value).getValueID(), CSSValueNone);
+  if (!value.IsValueList()) {
+    DCHECK(value.IsIdentifierValue());
+    DCHECK_EQ(ToCSSIdentifierValue(value).GetValueID(), CSSValueNone);
     return;
   }
 
-  CounterDirectiveMap& map = state.style()->accessCounterDirectives();
+  CounterDirectiveMap& map = state.Style()->AccessCounterDirectives();
 
-  const CSSValueList& list = toCSSValueList(value);
+  const CSSValueList& list = ToCSSValueList(value);
 
   for (size_t i = 0; i < list.length(); ++i) {
-    const CSSValuePair& pair = toCSSValuePair(list.item(i));
-    AtomicString identifier(toCSSCustomIdentValue(pair.first()).value());
-    int value = toCSSPrimitiveValue(pair.second()).getIntValue();
+    const CSSValuePair& pair = ToCSSValuePair(list.Item(i));
+    AtomicString identifier(ToCSSCustomIdentValue(pair.First()).Value());
+    int value = ToCSSPrimitiveValue(pair.Second()).GetIntValue();
     CounterDirectives& directives =
-        map.insert(identifier, CounterDirectives()).storedValue->value;
+        map.insert(identifier, CounterDirectives()).stored_value->value;
     {% if action == 'Reset' %}
-    directives.setResetValue(value);
+    directives.SetResetValue(value);
     {% else %}
-    directives.addIncrementValue(value);
+    directives.AddIncrementValue(value);
     {% endif %}
   }
-  DCHECK(!map.isEmpty());
+  DCHECK(!map.IsEmpty());
 }
 {% endmacro %}
 {{apply_counter('CSSPropertyCounterIncrement', 'Increment')}}
 {{apply_counter('CSSPropertyCounterReset', 'Reset')}}
 
-{% macro apply_fill_layer(property_id, fill_type) %}
+{% macro apply_fill_layer(property_id, fill_type, fill_type_getter = None) %}
 {% set layer_type = 'Background' if 'Background' in property_id else 'Mask' %}
-{% set fill_layer_type = layer_type + 'FillLayer' %}
-{% set access_layers = 'access' + layer_type + 'Layers' %}
-{% set map_fill = 'mapFill' + fill_type %}
+{% set fill_layer_type = 'k' + layer_type + 'FillLayer' %}
+{% set access_layers = 'Access' + layer_type + 'Layers' %}
+{% set map_fill = 'MapFill' + fill_type %}
+{% set fill_type_getter = fill_type_getter or fill_type %}
 {{declare_initial_function(property_id)}} {
-  FillLayer* currChild = &state.style()->{{access_layers}}();
-  currChild->set{{fill_type}}(FillLayer::initialFill{{fill_type}}({{fill_layer_type}}));
-  for (currChild = currChild->next(); currChild; currChild = currChild->next())
-    currChild->clear{{fill_type}}();
+FillLayer* currChild = &state.Style()->{{access_layers}}();
+currChild->Set{{fill_type}}(FillLayer::InitialFill{{fill_type}}({{fill_layer_type}}));
+for (currChild = currChild->Next(); currChild; currChild = currChild->Next())
+  currChild->Clear{{fill_type}}();
 }
 
 {{declare_inherit_function(property_id)}} {
-  FillLayer* currChild = &state.style()->{{access_layers}}();
-  FillLayer* prevChild = 0;
-  const FillLayer* currParent = &state.parentStyle()->{{layer_type|lower}}Layers();
-  while (currParent && currParent->is{{fill_type}}Set()) {
+FillLayer* currChild = &state.Style()->{{access_layers}}();
+FillLayer* prevChild = 0;
+const FillLayer* currParent = &state.ParentStyle()->{{layer_type}}Layers();
+while (currParent && currParent->Is{{fill_type}}Set()) {
     if (!currChild)
-      currChild = prevChild->ensureNext();
-    currChild->set{{fill_type}}(currParent->{{fill_type|lower_first}}());
+      currChild = prevChild->EnsureNext();
+    currChild->Set{{fill_type}}(currParent->{{fill_type_getter}}());
     prevChild = currChild;
-    currChild = prevChild->next();
-    currParent = currParent->next();
+    currChild = prevChild->Next();
+    currParent = currParent->Next();
   }
 
   while (currChild) {
     // Reset any remaining layers to not have the property set.
-    currChild->clear{{fill_type}}();
-    currChild = currChild->next();
+    currChild->Clear{{fill_type}}();
+    currChild = currChild->Next();
   }
 }
 
 {{declare_value_function(property_id)}} {
-  FillLayer* currChild = &state.style()->{{access_layers}}();
+  FillLayer* currChild = &state.Style()->{{access_layers}}();
   FillLayer* prevChild = 0;
-  if (value.isValueList() && !value.isImageSetValue()) {
+  if (value.IsValueList() && !value.IsImageSetValue()) {
     // Walk each value and put it into a layer, creating new layers as needed.
-    const CSSValueList& valueList = toCSSValueList(value);
+    const CSSValueList& valueList = ToCSSValueList(value);
     for (unsigned int i = 0; i < valueList.length(); i++) {
       if (!currChild)
-        currChild = prevChild->ensureNext();
-      CSSToStyleMap::{{map_fill}}(state, currChild, valueList.item(i));
+        currChild = prevChild->EnsureNext();
+      CSSToStyleMap::{{map_fill}}(state, currChild, valueList.Item(i));
       prevChild = currChild;
-      currChild = currChild->next();
+      currChild = currChild->Next();
     }
   } else {
     CSSToStyleMap::{{map_fill}}(state, currChild, value);
-    currChild = currChild->next();
+    currChild = currChild->Next();
   }
   while (currChild) {
     // Reset all remaining layers to not have the property set.
-    currChild->clear{{fill_type}}();
-    currChild = currChild->next();
+    currChild->Clear{{fill_type}}();
+    currChild = currChild->Next();
   }
 }
 {% endmacro %}
 {{apply_fill_layer('CSSPropertyBackgroundAttachment', 'Attachment')}}
 {{apply_fill_layer('CSSPropertyBackgroundBlendMode', 'BlendMode')}}
 {{apply_fill_layer('CSSPropertyBackgroundClip', 'Clip')}}
-{{apply_fill_layer('CSSPropertyBackgroundImage', 'Image')}}
+{{apply_fill_layer('CSSPropertyBackgroundImage', 'Image', 'GetImage')}}
 {{apply_fill_layer('CSSPropertyBackgroundOrigin', 'Origin')}}
 {{apply_fill_layer('CSSPropertyBackgroundPositionX', 'XPosition')}}
 {{apply_fill_layer('CSSPropertyBackgroundPositionY', 'YPosition')}}
 {{apply_fill_layer('CSSPropertyBackgroundRepeatX', 'RepeatX')}}
 {{apply_fill_layer('CSSPropertyBackgroundRepeatY', 'RepeatY')}}
-{{apply_fill_layer('CSSPropertyBackgroundSize', 'Size')}}
+{{apply_fill_layer('CSSPropertyBackgroundSize', 'Size', 'size')}}
 {{apply_fill_layer('CSSPropertyMaskSourceType', 'MaskSourceType')}}
 {{apply_fill_layer('CSSPropertyWebkitMaskClip', 'Clip')}}
 {{apply_fill_layer('CSSPropertyWebkitMaskComposite', 'Composite')}}
-{{apply_fill_layer('CSSPropertyWebkitMaskImage', 'Image')}}
+{{apply_fill_layer('CSSPropertyWebkitMaskImage', 'Image', 'GetImage')}}
 {{apply_fill_layer('CSSPropertyWebkitMaskOrigin', 'Origin')}}
 {{apply_fill_layer('CSSPropertyWebkitMaskPositionX', 'XPosition')}}
 {{apply_fill_layer('CSSPropertyWebkitMaskPositionY', 'YPosition')}}
 {{apply_fill_layer('CSSPropertyWebkitMaskRepeatX', 'RepeatX')}}
 {{apply_fill_layer('CSSPropertyWebkitMaskRepeatY', 'RepeatY')}}
-{{apply_fill_layer('CSSPropertyWebkitMaskSize', 'Size')}}
+{{apply_fill_layer('CSSPropertyWebkitMaskSize', 'Size', 'size')}}
 
 {% macro apply_grid_template(property_id, type) %}
 {{declare_initial_function(property_id)}} {
-  state.style()->setGridTemplate{{type}}s(ComputedStyle::initialGridTemplate{{type}}s());
-  state.style()->setNamedGrid{{type}}Lines(ComputedStyle::initialNamedGrid{{type}}Lines());
-  state.style()->setOrderedNamedGrid{{type}}Lines(ComputedStyle::initialOrderedNamedGrid{{type}}Lines());
+  state.Style()->SetGridTemplate{{type}}s(ComputedStyle::InitialGridTemplate{{type}}s());
+  state.Style()->SetNamedGrid{{type}}Lines(ComputedStyle::InitialNamedGrid{{type}}Lines());
+  state.Style()->SetOrderedNamedGrid{{type}}Lines(ComputedStyle::InitialOrderedNamedGrid{{type}}Lines());
 }
 
 {{declare_inherit_function(property_id)}} {
-  state.style()->setGridTemplate{{type}}s(state.parentStyle()->gridTemplate{{type}}s());
-  state.style()->setNamedGrid{{type}}Lines(state.parentStyle()->namedGrid{{type}}Lines());
-  state.style()->setOrderedNamedGrid{{type}}Lines(state.parentStyle()->orderedNamedGrid{{type}}Lines());
+  state.Style()->SetGridTemplate{{type}}s(state.ParentStyle()->GridTemplate{{type}}s());
+  state.Style()->SetNamedGrid{{type}}Lines(state.ParentStyle()->NamedGrid{{type}}Lines());
+  state.Style()->SetOrderedNamedGrid{{type}}Lines(state.ParentStyle()->OrderedNamedGrid{{type}}Lines());
 }
 
 {{declare_value_function(property_id)}} {
@@ -470,29 +471,29 @@ static bool borderImageLengthMatchesAllSides(
   OrderedNamedGridLines orderedNamedGridLines;
   NamedGridLinesMap autoRepeatNamedGridLines;
   OrderedNamedGridLines autoRepeatOrderedNamedGridLines;
-  AutoRepeatType autoRepeatType = ComputedStyle::initialGridAutoRepeatType();
+  AutoRepeatType autoRepeatType = ComputedStyle::InitialGridAutoRepeatType();
   size_t autoRepeatInsertionPoint =
-      ComputedStyle::initialGridAutoRepeatInsertionPoint();
-  StyleBuilderConverter::convertGridTrackList(
+      ComputedStyle::InitialGridAutoRepeatInsertionPoint();
+  StyleBuilderConverter::ConvertGridTrackList(
       value, trackSizes, namedGridLines, orderedNamedGridLines,
       autoRepeatTrackSizes, autoRepeatNamedGridLines,
       autoRepeatOrderedNamedGridLines, autoRepeatInsertionPoint,
       autoRepeatType, state);
-  const NamedGridAreaMap& namedGridAreas = state.style()->namedGridArea();
-  if (!namedGridAreas.isEmpty()) {
-    StyleBuilderConverter::createImplicitNamedGridLinesFromGridArea(
-        namedGridAreas, namedGridLines, For{{type}}s);
+  const NamedGridAreaMap& namedGridAreas = state.Style()->NamedGridArea();
+  if (!namedGridAreas.IsEmpty()) {
+    StyleBuilderConverter::CreateImplicitNamedGridLinesFromGridArea(
+        namedGridAreas, namedGridLines, kFor{{type}}s);
   }
-  state.style()->setGridTemplate{{type}}s(trackSizes);
-  state.style()->setNamedGrid{{type}}Lines(namedGridLines);
-  state.style()->setOrderedNamedGrid{{type}}Lines(orderedNamedGridLines);
-  state.style()->setGridAutoRepeat{{type}}s(autoRepeatTrackSizes);
-  state.style()->setGridAutoRepeat{{type}}sInsertionPoint(
+  state.Style()->SetGridTemplate{{type}}s(trackSizes);
+  state.Style()->SetNamedGrid{{type}}Lines(namedGridLines);
+  state.Style()->SetOrderedNamedGrid{{type}}Lines(orderedNamedGridLines);
+  state.Style()->SetGridAutoRepeat{{type}}s(autoRepeatTrackSizes);
+  state.Style()->SetGridAutoRepeat{{type}}sInsertionPoint(
       autoRepeatInsertionPoint);
-  state.style()->setAutoRepeatNamedGrid{{type}}Lines(autoRepeatNamedGridLines);
-  state.style()->setAutoRepeatOrderedNamedGrid{{type}}Lines(
+  state.Style()->SetAutoRepeatNamedGrid{{type}}Lines(autoRepeatNamedGridLines);
+  state.Style()->SetAutoRepeatOrderedNamedGrid{{type}}Lines(
       autoRepeatOrderedNamedGridLines);
-  state.style()->setGridAutoRepeat{{type}}sType(autoRepeatType);
+  state.Style()->SetGridAutoRepeat{{type}}sType(autoRepeatType);
 }
 {% endmacro %}
 {{apply_grid_template('CSSPropertyGridTemplateColumns', 'Column')}}
@@ -502,54 +503,54 @@ static bool borderImageLengthMatchesAllSides(
 {% set property = properties[property_id] %}
 {{declare_initial_function(property_id)}} {
   {{set_value(property)}}(
-      SVGComputedStyle::initial{{paint_type}}Type(),
-      SVGComputedStyle::initial{{paint_type}}Color(),
-      SVGComputedStyle::initial{{paint_type}}Uri(),
-      state.applyPropertyToRegularStyle(),
-      state.applyPropertyToVisitedLinkStyle());
+      SVGComputedStyle::Initial{{paint_type}}Type(),
+      SVGComputedStyle::Initial{{paint_type}}Color(),
+      SVGComputedStyle::Initial{{paint_type}}Uri(),
+      state.ApplyPropertyToRegularStyle(),
+      state.ApplyPropertyToVisitedLinkStyle());
 }
 
 {{declare_inherit_function(property_id)}} {
-  const SVGComputedStyle& svgParentStyle = state.parentStyle()->svgStyle();
+  const SVGComputedStyle& svgParentStyle = state.ParentStyle()->SvgStyle();
   {{set_value(property)}}(
-      svgParentStyle.{{paint_type|lower_first}}Type(),
-      svgParentStyle.{{paint_type|lower_first}}Color(),
-      svgParentStyle.{{paint_type|lower_first}}Uri(),
-      state.applyPropertyToRegularStyle(),
-      state.applyPropertyToVisitedLinkStyle());
+      svgParentStyle.{{paint_type}}Type(),
+      svgParentStyle.{{paint_type}}Color(),
+      svgParentStyle.{{paint_type}}Uri(),
+      state.ApplyPropertyToRegularStyle(),
+      state.ApplyPropertyToVisitedLinkStyle());
 }
 
 {{declare_value_function(property_id)}} {
   const CSSValue* localValue = &value;
   String url;
-  if (value.isValueList()) {
-    const CSSValueList& list = toCSSValueList(value);
+  if (value.IsValueList()) {
+    const CSSValueList& list = ToCSSValueList(value);
     DCHECK_EQ(list.length(), 2U);
-    url = toCSSURIValue(list.item(0)).value();
-    localValue = &list.item(1);
+    url = ToCSSURIValue(list.Item(0)).Value();
+    localValue = &list.Item(1);
   }
 
   Color color;
   SVGPaintType paintType = SVG_PAINTTYPE_RGBCOLOR;
-  if (localValue->isURIValue()) {
+  if (localValue->IsURIValue()) {
     paintType = SVG_PAINTTYPE_URI;
-    url = toCSSURIValue(localValue)->value();
-  } else if (localValue->isIdentifierValue() &&
-             toCSSIdentifierValue(localValue)->getValueID() == CSSValueNone) {
-    paintType = url.isEmpty() ? SVG_PAINTTYPE_NONE : SVG_PAINTTYPE_URI_NONE;
-  } else if (localValue->isIdentifierValue() &&
-             toCSSIdentifierValue(localValue)->getValueID() == CSSValueCurrentcolor) {
-    color = state.style()->color();
-    paintType = url.isEmpty() ? SVG_PAINTTYPE_CURRENTCOLOR
+    url = ToCSSURIValue(localValue)->Value();
+  } else if (localValue->IsIdentifierValue() &&
+             ToCSSIdentifierValue(localValue)->GetValueID() == CSSValueNone) {
+    paintType = url.IsEmpty() ? SVG_PAINTTYPE_NONE : SVG_PAINTTYPE_URI_NONE;
+  } else if (localValue->IsIdentifierValue() &&
+             ToCSSIdentifierValue(localValue)->GetValueID() == CSSValueCurrentcolor) {
+    color = state.Style()->GetColor();
+    paintType = url.IsEmpty() ? SVG_PAINTTYPE_CURRENTCOLOR
     	                      : SVG_PAINTTYPE_URI_CURRENTCOLOR;
   } else {
-    color = StyleBuilderConverter::convertColor(state, *localValue);
-    paintType = url.isEmpty() ? SVG_PAINTTYPE_RGBCOLOR
+    color = StyleBuilderConverter::ConvertColor(state, *localValue);
+    paintType = url.IsEmpty() ? SVG_PAINTTYPE_RGBCOLOR
     	                      : SVG_PAINTTYPE_URI_RGBCOLOR;
   }
   {{set_value(property)}}(paintType, color, url,
-      state.applyPropertyToRegularStyle(),
-      state.applyPropertyToVisitedLinkStyle());
+      state.ApplyPropertyToRegularStyle(),
+      state.ApplyPropertyToVisitedLinkStyle());
 }
 {% endmacro %}
 {{apply_svg_paint('CSSPropertyFill', 'FillPaint')}}
diff --git a/third_party/WebKit/Source/build/scripts/templates/StylePropertyShorthand.cpp.tmpl b/third_party/WebKit/Source/build/scripts/templates/StylePropertyShorthand.cpp.tmpl
index effe6d2129ac..c470d935b256 100644
--- a/third_party/WebKit/Source/build/scripts/templates/StylePropertyShorthand.cpp.tmpl
+++ b/third_party/WebKit/Source/build/scripts/templates/StylePropertyShorthand.cpp.tmpl
@@ -63,7 +63,7 @@ void getMatchingShorthandsForLonghand(
   {% for longhand_id, shorthands in longhands_dictionary.items() %}
     case {{longhand_id}}: {
       {% for shorthand in shorthands %}
-      result->uncheckedAppend({{shorthand.lower_camel_name}}Shorthand());
+      result->UncheckedAppend({{shorthand.lower_camel_name}}Shorthand());
       {% endfor %}
       break;
     }
diff --git a/third_party/WebKit/Source/build/scripts/templates/macros.tmpl b/third_party/WebKit/Source/build/scripts/templates/macros.tmpl
index d8617410ef2a..0a0496d0efbe 100644
--- a/third_party/WebKit/Source/build/scripts/templates/macros.tmpl
+++ b/third_party/WebKit/Source/build/scripts/templates/macros.tmpl
@@ -14,7 +14,7 @@
 if (
     {%- for c in name -%}
         {%- if lowercase_data -%}
-    {{ " && " if not loop.first }}toASCIILower(data[{{index + loop.index0}}]) == '{{c}}'
+    {{ " && " if not loop.first }}ToASCIILower(data[{{index + loop.index0}}]) == '{{c}}'
         {%- else -%}
     {{ " && " if not loop.first }}data[{{index + loop.index0}}] == '{{c}}'
         {%- endif -%}
@@ -33,7 +33,7 @@ return {{ return_macro(value) }};
 {{ trie_leaf(index, trie, return_macro, lowercase_data) -}}
 {% else %}
     {% if lowercase_data %}
-switch (toASCIILower(data[{{index}}])) {
+switch (ToASCIILower(data[{{index}}])) {
     {% else %}
 switch (data[{{index}}]) {
     {% endif %}
diff --git a/third_party/WebKit/Source/core/css/CSSGradientValue.cpp b/third_party/WebKit/Source/core/css/CSSGradientValue.cpp
index b0c102c45cc8..d0f55e844c09 100644
--- a/third_party/WebKit/Source/core/css/CSSGradientValue.cpp
+++ b/third_party/WebKit/Source/core/css/CSSGradientValue.cpp
@@ -112,7 +112,7 @@ PassRefPtr<Image> CSSGradientValue::GetImage(const LayoutObject& layout_object,
 
     // Need to look up our size.  Create a string of width*height to use as a
     // hash key.
-    Image* result = GetImage(&layout_object, size);
+    Image* result = this->CSSImageGeneratorValue::GetImage(&layout_object, size);
     if (result)
       return result;
   }
diff --git a/third_party/WebKit/Source/core/css/CSSPrimitiveValueUnits.json5 b/third_party/WebKit/Source/core/css/CSSPrimitiveValueUnits.json5
index a83d9399b3a2..63babdd2798d 100644
--- a/third_party/WebKit/Source/core/css/CSSPrimitiveValueUnits.json5
+++ b/third_party/WebKit/Source/core/css/CSSPrimitiveValueUnits.json5
@@ -8,111 +8,111 @@
   data: [
     {
       name: "em",
-      unit_type: "Ems",
+      unit_type: "kEms",
     },
     {
       name: "ex",
-      unit_type: "Exs",
+      unit_type: "kExs",
     },
     {
       name: "px",
-      unit_type: "Pixels",
+      unit_type: "kPixels",
     },
     {
       name: "cm",
-      unit_type: "Centimeters",
+      unit_type: "kCentimeters",
     },
     {
       name: "mm",
-      unit_type: "Millimeters",
+      unit_type: "kMillimeters",
     },
     {
       name: "in",
-      unit_type: "Inches",
+      unit_type: "kInches",
     },
     {
       name: "pt",
-      unit_type: "Points",
+      unit_type: "kPoints",
     },
     {
       name: "pc",
-      unit_type: "Picas",
+      unit_type: "kPicas",
     },
     {
       name: "deg",
-      unit_type: "Degrees",
+      unit_type: "kDegrees",
     },
     {
       name: "rad",
-      unit_type: "Radians",
+      unit_type: "kRadians",
     },
     {
       name: "grad",
-      unit_type: "Gradians",
+      unit_type: "kGradians",
     },
     {
       name: "ms",
-      unit_type: "Milliseconds",
+      unit_type: "kMilliseconds",
     },
     {
       name: "s",
-      unit_type: "Seconds",
+      unit_type: "kSeconds",
     },
     {
       name: "hz",
-      unit_type: "Hertz",
+      unit_type: "kHertz",
     },
     {
       name: "khz",
-      unit_type: "Kilohertz",
+      unit_type: "kKilohertz",
     },
     {
       name: "dpi",
-      unit_type: "DotsPerInch",
+      unit_type: "kDotsPerInch",
     },
     {
       name: "dpcm",
-      unit_type: "DotsPerCentimeter",
+      unit_type: "kDotsPerCentimeter",
     },
     {
       name: "dppx",
-      unit_type: "DotsPerPixel",
+      unit_type: "kDotsPerPixel",
     },
     {
       name: "vw",
-      unit_type: "ViewportWidth",
+      unit_type: "kViewportWidth",
     },
     {
       name: "vh",
-      unit_type: "ViewportHeight",
+      unit_type: "kViewportHeight",
     },
     {
       name: "vmin",
-      unit_type: "ViewportMin",
+      unit_type: "kViewportMin",
     },
     {
       name: "vmax",
-      unit_type: "ViewportMax",
+      unit_type: "kViewportMax",
     },
     {
       name: "rem",
-      unit_type: "Rems",
+      unit_type: "kRems",
     },
     {
       name: "fr",
-      unit_type: "Fraction",
+      unit_type: "kFraction",
     },
     {
       name: "turn",
-      unit_type: "Turns",
+      unit_type: "kTurns",
     },
     {
       name: "ch",
-      unit_type: "Chs",
+      unit_type: "kChs",
     },
     {
       name: "__qem",
-      unit_type: "QuirkyEms",
+      unit_type: "kQuirkyEms",
     },
   ],
 }
diff --git a/third_party/WebKit/Source/core/css/CSSProperties.json5 b/third_party/WebKit/Source/core/css/CSSProperties.json5
index 8f5725cdb950..77e1a944f3d6 100644
--- a/third_party/WebKit/Source/core/css/CSSProperties.json5
+++ b/third_party/WebKit/Source/core/css/CSSProperties.json5
@@ -200,7 +200,7 @@
     type_name: {
     },
 
-    // - converter: "convertRadius"
+    // - converter: "ConvertRadius"
     // The StyleBuilder will call the specified function on StyleBuilderConverter
     // to convert a CSSValue to an appropriate platform value
     converter: {
@@ -353,7 +353,7 @@
       name: "font-family",
       api_class: true,
       api_methods: ["parseSingleValue"],
-      converter: "convertFontFamily",
+      converter: "ConvertFontFamily",
       is_descriptor: true,
       font: true,
       inherited: true,
@@ -373,9 +373,9 @@
       name: "font-size",
       api_class: true,
       api_methods: ["parseSingleValue"],
-      converter: "convertFontSize",
+      converter: "ConvertFontSize",
       font: true,
-      getter: "getSize",
+      getter: "GetSize",
       inherited: true,
       interpolable: true,
       name_for_methods: "Size",
@@ -385,7 +385,7 @@
       name: "font-size-adjust",
       api_class: true,
       api_methods: ["parseSingleValue"],
-      converter: "convertFontSizeAdjust",
+      converter: "ConvertFontSizeAdjust",
       font: true,
       inherited: true,
       interpolable: true,
@@ -415,7 +415,7 @@
       name: "font-variant-ligatures",
       api_class: true,
       api_methods: ["parseSingleValue"],
-      converter: "convertFontVariantLigatures",
+      converter: "ConvertFontVariantLigatures",
       font: true,
       inherited: true,
       name_for_methods: "VariantLigatures",
@@ -426,7 +426,7 @@
       name: "font-variant-caps",
       api_class: true,
       api_methods: ["parseSingleValue"],
-      converter: "convertFontVariantCaps",
+      converter: "ConvertFontVariantCaps",
       font: true,
       inherited: true,
       name_for_methods: "VariantCaps",
@@ -436,7 +436,7 @@
       name: "font-variant-numeric",
       api_class: true,
       api_methods: ["parseSingleValue"],
-      converter: "convertFontVariantNumeric",
+      converter: "ConvertFontVariantNumeric",
       font: true,
       inherited: true,
       name_for_methods: "VariantNumeric",
@@ -444,7 +444,7 @@
     },
     {
       name: "font-weight",
-      converter: "convertFontWeight",
+      converter: "ConvertFontWeight",
       is_descriptor: true,
       font: true,
       inherited: true,
@@ -455,7 +455,7 @@
     },
     {
       name: "font-feature-settings",
-      converter: "convertFontFeatureSettings",
+      converter: "ConvertFontFeatureSettings",
       is_descriptor: true,
       font: true,
       inherited: true,
@@ -466,7 +466,7 @@
       name: "font-variation-settings",
       api_class: true,
       api_methods: ["parseSingleValue"],
-      converter: "convertFontVariationSettings",
+      converter: "ConvertFontVariationSettings",
       font: true,
       inherited: true,
       name_for_methods: "VariationSettings",
@@ -539,15 +539,15 @@
       name: "align-content",
       api_methods: ["parseSingleValue"],
       api_class: "CSSPropertyAPIAlignOrJustifyContent",
-      converter: "convertContentAlignmentData",
-      initial: "initialContentAlignment",
+      converter: "ConvertContentAlignmentData",
+      initial: "InitialContentAlignment",
     },
     {
       name: "align-items",
       api_class: true,
       api_methods: ["parseSingleValue"],
-      converter: "convertSelfOrDefaultAlignmentData",
-      initial: "initialDefaultAlignment",
+      converter: "ConvertSelfOrDefaultAlignmentData",
+      initial: "InitialDefaultAlignment",
     },
     {
       name: "alignment-baseline",
@@ -557,13 +557,13 @@
       api_class: "CSSPropertyAPIAlignOrJustifySelf",
       api_methods: ["parseSingleValue"],
       name: "align-self",
-      converter: "convertSelfOrDefaultAlignmentData",
-      initial: "initialSelfAlignment",
+      converter: "ConvertSelfOrDefaultAlignmentData",
+      initial: "InitialSelfAlignment",
     },
     {
       name: "backdrop-filter",
       api_class: "CSSPropertyAPIFilter",
-      converter: "convertFilterOperations",
+      converter: "ConvertFilterOperations",
       interpolable: true,
       runtime_flag: "CSSBackdropFilter",
     },
@@ -637,21 +637,21 @@
       name: "border-bottom-left-radius",
       api_class: "CSSPropertyAPIBorderRadius",
       api_methods: ["parseSingleValue"],
-      converter: "convertRadius",
-      initial: "initialBorderRadius",
+      converter: "ConvertRadius",
+      initial: "InitialBorderRadius",
       interpolable: true,
     },
     {
       name: "border-bottom-right-radius",
       api_class: "CSSPropertyAPIBorderRadius",
       api_methods: ["parseSingleValue"],
-      converter: "convertRadius",
-      initial: "initialBorderRadius",
+      converter: "ConvertRadius",
+      initial: "InitialBorderRadius",
       interpolable: true,
     },
     {
       name: "border-bottom-style",
-      initial: "initialBorderStyle",
+      initial: "InitialBorderStyle",
       type_name: "EBorderStyle",
       keywords: ["none"],
       typedom_types: ["Image"],
@@ -659,8 +659,8 @@
     {
       name: "border-bottom-width",
       api_class: "CSSPropertyAPIBorderWidth",
-      converter: "convertLineWidth<float>",
-      initial: "initialBorderWidth",
+      converter: "ConvertLineWidth<float>",
+      initial: "InitialBorderWidth",
       interpolable: true,
       keywords: ["thin", "medium", "thick"],
       typedom_types: ["Length"],
@@ -712,7 +712,7 @@
     },
     {
       name: "border-left-style",
-      initial: "initialBorderStyle",
+      initial: "InitialBorderStyle",
       type_name: "EBorderStyle",
       keywords: ["none"],
       typedom_types: ["Image"],
@@ -720,8 +720,8 @@
     {
       name: "border-left-width",
       api_class: "CSSPropertyAPIBorderWidth",
-      converter: "convertLineWidth<float>",
-      initial: "initialBorderWidth",
+      converter: "ConvertLineWidth<float>",
+      initial: "InitialBorderWidth",
       interpolable: true,
       keywords: ["thin", "medium", "thick"],
       typedom_types: ["Length"],
@@ -733,7 +733,7 @@
     },
     {
       name: "border-right-style",
-      initial: "initialBorderStyle",
+      initial: "InitialBorderStyle",
       type_name: "EBorderStyle",
       keywords: ["none"],
       typedom_types: ["Image"],
@@ -741,8 +741,8 @@
     {
       name: "border-right-width",
       api_class: "CSSPropertyAPIBorderWidth",
-      converter: "convertLineWidth<float>",
-      initial: "initialBorderWidth",
+      converter: "ConvertLineWidth<float>",
+      initial: "InitialBorderWidth",
       interpolable: true,
       keywords: ["thin", "medium", "thick"],
       typedom_types: ["Length"],
@@ -756,21 +756,21 @@
       name: "border-top-left-radius",
       api_class: "CSSPropertyAPIBorderRadius",
       api_methods: ["parseSingleValue"],
-      converter: "convertRadius",
-      initial: "initialBorderRadius",
+      converter: "ConvertRadius",
+      initial: "InitialBorderRadius",
       interpolable: true,
     },
     {
       name: "border-top-right-radius",
       api_class: "CSSPropertyAPIBorderRadius",
       api_methods: ["parseSingleValue"],
-      converter: "convertRadius",
-      initial: "initialBorderRadius",
+      converter: "ConvertRadius",
+      initial: "InitialBorderRadius",
       interpolable: true,
     },
     {
       name: "border-top-style",
-      initial: "initialBorderStyle",
+      initial: "InitialBorderStyle",
       type_name: "EBorderStyle",
       keywords: ["none"],
       typedom_types: ["Image"],
@@ -778,8 +778,8 @@
     {
       name: "border-top-width",
       api_class: "CSSPropertyAPIBorderWidth",
-      converter: "convertLineWidth<float>",
-      initial: "initialBorderWidth",
+      converter: "ConvertLineWidth<float>",
+      initial: "InitialBorderWidth",
       interpolable: true,
       keywords: ["thin", "medium", "thick"],
       supports_percentage: true,
@@ -789,8 +789,8 @@
       name: "bottom",
       api_class: "CSSPropertyAPIMargin",
       api_methods: ["parseSingleValue"],
-      converter: "convertLengthOrAuto",
-      initial: "initialOffset",
+      converter: "ConvertLengthOrAuto",
+      initial: "InitialOffset",
       interpolable: true,
       keywords: ["auto"],
       supports_percentage: true,
@@ -798,7 +798,7 @@
     },
     {
       name: "box-shadow",
-      converter: "convertShadowList",
+      converter: "ConvertShadowList",
       interpolable: true,
     },
     "box-sizing",
@@ -862,7 +862,7 @@
       name: "clip",
       api_class: true,
       api_methods: ["parseSingleValue"],
-      converter: "convertClip",
+      converter: "ConvertClip",
       custom_all: true,
       interpolable: true,
     },
@@ -870,7 +870,7 @@
       name: "clip-path",
       api_class: true,
       api_methods: ["parseSingleValue"],
-      converter: "convertClipPath",
+      converter: "ConvertClipPath",
       interpolable: true,
     },
     {
@@ -903,7 +903,7 @@
       name: "contain",
       api_class: true,
       api_methods: ["parseSingleValue"],
-      converter: "convertFlags<Containment>",
+      converter: "ConvertFlags<Containment>",
       runtime_flag: "CSSContainment",
     },
     {
@@ -945,20 +945,20 @@
     {
       name: "cx",
       api_class: "CSSPropertyAPIStrokeOrLength",
-      converter: "convertLength",
+      converter: "ConvertLength",
       interpolable: true,
       svg: true,
     },
     {
       name: "cy",
       api_class: "CSSPropertyAPIStrokeOrLength",
-      converter: "convertLength",
+      converter: "ConvertLength",
       interpolable: true,
       svg: true,
     },
     {
       name: "d",
-      converter: "convertPathOrNone",
+      converter: "ConvertPathOrNone",
       interpolable: true,
       svg: true,
     },
@@ -993,14 +993,14 @@
       custom_all: true,
       inherited: true,
       interpolable: true,
-      setter: "setFillPaint",
+      setter: "SetFillPaint",
       svg: true,
     },
     {
       name: "fill-opacity",
       api_class: "CSSPropertyAPIOpacity",
       api_methods: ["parseSingleValue"],
-      converter: "convertNumberOrPercentage",
+      converter: "ConvertNumberOrPercentage",
       inherited: true,
       interpolable: true,
       svg: true,
@@ -1014,14 +1014,14 @@
     {
       name: "filter",
       api_class: "CSSPropertyAPIFilter",
-      converter: "convertFilterOperations",
+      converter: "ConvertFilterOperations",
       interpolable: true,
     },
     {
       name: "flex-basis",
       api_class: true,
       api_methods: ["parseSingleValue"],
-      converter: "convertLengthOrAuto",
+      converter: "ConvertLengthOrAuto",
       interpolable: true,
     },
     "flex-direction",
@@ -1050,7 +1050,7 @@
       name: "flood-color",
       api_class: "CSSPropertyAPIColor",
       api_methods: ["parseSingleValue"],
-      converter: "convertColor",
+      converter: "ConvertColor",
       interpolable: true,
       svg: true,
     },
@@ -1058,62 +1058,62 @@
       name: "flood-opacity",
       api_class: "CSSPropertyAPIOpacity",
       api_methods: ["parseSingleValue"],
-      converter: "convertNumberOrPercentage",
+      converter: "ConvertNumberOrPercentage",
       interpolable: true,
       svg: true,
     },
     {
       name: "grid-auto-columns",
       api_class: "CSSPropertyAPIGridAutoLine",
-      converter: "convertGridTrackSizeList",
+      converter: "ConvertGridTrackSizeList",
       runtime_flag: "CSSGridLayout",
     },
     {
       name: "grid-auto-flow",
       api_class: true,
       api_methods: ["parseSingleValue"],
-      converter: "convertGridAutoFlow",
+      converter: "ConvertGridAutoFlow",
       runtime_flag: "CSSGridLayout",
       type_name: "GridAutoFlow",
     },
     {
       name: "grid-auto-rows",
       api_class: "CSSPropertyAPIGridAutoLine",
-      converter: "convertGridTrackSizeList",
+      converter: "ConvertGridTrackSizeList",
       runtime_flag: "CSSGridLayout",
     },
     {
       name: "grid-column-end",
-      converter: "convertGridPosition",
+      converter: "ConvertGridPosition",
       runtime_flag: "CSSGridLayout",
       api_class: "CSSPropertyAPIGridLine",
     },
     {
       name: "grid-column-gap",
-      converter: "convertLength",
+      converter: "ConvertLength",
       runtime_flag: "CSSGridLayout",
     },
     {
       name: "grid-column-start",
       api_class: "CSSPropertyAPIGridLine",
-      converter: "convertGridPosition",
+      converter: "ConvertGridPosition",
       runtime_flag: "CSSGridLayout",
     },
     {
       name: "grid-row-end",
       api_class: "CSSPropertyAPIGridLine",
-      converter: "convertGridPosition",
+      converter: "ConvertGridPosition",
       runtime_flag: "CSSGridLayout",
     },
     {
       name: "grid-row-gap",
-      converter: "convertLength",
+      converter: "ConvertLength",
       runtime_flag: "CSSGridLayout",
     },
     {
       name: "grid-row-start",
       api_class: "CSSPropertyAPIGridLine",
-      converter: "convertGridPosition",
+      converter: "ConvertGridPosition",
       runtime_flag: "CSSGridLayout",
     },
     {
@@ -1137,9 +1137,9 @@
     {
       name: "height",
       api_class: "CSSPropertyAPIWidthOrHeight",
-      converter: "convertLengthSizing",
+      converter: "ConvertLengthSizing",
       is_descriptor: true,
-      initial: "initialSize",
+      initial: "InitialSize",
       interpolable: true,
       keywords: ["auto", "fit-content", "min-content", "max-content"],
       supports_percentage: true,
@@ -1159,7 +1159,7 @@
       name: "image-orientation",
       api_class: true,
       api_methods: ["parseSingleValue"],
-      converter: "convertImageOrientation",
+      converter: "ConvertImageOrientation",
       inherited: true,
       name_for_methods: "RespectImageOrientation",
       runtime_flag: "ImageOrientation",
@@ -1169,31 +1169,31 @@
       name: "justify-content",
       api_class: "CSSPropertyAPIAlignOrJustifyContent",
       api_methods: ["parseSingleValue"],
-      converter: "convertContentAlignmentData",
-      initial: "initialContentAlignment",
+      converter: "ConvertContentAlignmentData",
+      initial: "InitialContentAlignment",
     },
     {
       name: "justify-items",
       api_class: true,
       api_methods: ["parseSingleValue"],
-      converter: "convertSelfOrDefaultAlignmentData",
-      initial: "initialSelfAlignment",
+      converter: "ConvertSelfOrDefaultAlignmentData",
+      initial: "InitialSelfAlignment",
       runtime_flag: "CSSGridLayout",
     },
     {
       name: "justify-self",
       api_class: "CSSPropertyAPIAlignOrJustifySelf",
       api_methods: ["parseSingleValue"],
-      converter: "convertSelfOrDefaultAlignmentData",
-      initial: "initialSelfAlignment",
+      converter: "ConvertSelfOrDefaultAlignmentData",
+      initial: "InitialSelfAlignment",
       runtime_flag: "CSSGridLayout",
     },
     {
       name: "left",
       api_class: "CSSPropertyAPIMargin",
       api_methods: ["parseSingleValue"],
-      converter: "convertLengthOrAuto",
-      initial: "initialOffset",
+      converter: "ConvertLengthOrAuto",
+      initial: "InitialOffset",
       interpolable: true,
       keywords: ["auto"],
       supports_percentage: true,
@@ -1203,16 +1203,16 @@
       name: "letter-spacing",
       api_class: "CSSPropertyAPILetterAndWordSpacing",
       api_methods: ["parseSingleValue"],
-      converter: "convertSpacing",
+      converter: "ConvertSpacing",
       inherited: true,
-      initial: "initialLetterWordSpacing",
+      initial: "InitialLetterWordSpacing",
       interpolable: true,
     },
     {
       name: "lighting-color",
       api_class: "CSSPropertyAPIColor",
       api_methods: ["parseSingleValue"],
-      converter: "convertColor",
+      converter: "ConvertColor",
       interpolable: true,
       svg: true,
     },
@@ -1220,8 +1220,8 @@
       name: "line-height",
       api_class: true,
       api_methods: ["parseSingleValue"],
-      converter: "convertLineHeight",
-      getter: "specifiedLineHeight",
+      converter: "ConvertLineHeight",
+      getter: "SpecifiedLineHeight",
       inherited: true,
       interpolable: true,
     },
@@ -1229,7 +1229,7 @@
       name: "line-height-step",
       api_class: true,
       api_methods: ["parseSingleValue"],
-      converter: "convertComputedLength<uint8_t>",
+      converter: "ConvertComputedLength<uint8_t>",
       inherited: true,
       runtime_flag: "CSSSnapSize",
     },
@@ -1263,38 +1263,38 @@
       name: "margin-bottom",
       api_class: "CSSPropertyAPIMargin",
       api_methods: ["parseSingleValue"],
-      converter: "convertQuirkyLength",
-      initial: "initialMargin",
+      converter: "ConvertQuirkyLength",
+      initial: "InitialMargin",
       interpolable: true,
     },
     {
       name: "margin-left",
       api_class: "CSSPropertyAPIMargin",
       api_methods: ["parseSingleValue"],
-      converter: "convertQuirkyLength",
-      initial: "initialMargin",
+      converter: "ConvertQuirkyLength",
+      initial: "InitialMargin",
       interpolable: true,
     },
     {
       name: "margin-right",
       api_class: "CSSPropertyAPIMargin",
       api_methods: ["parseSingleValue"],
-      converter: "convertQuirkyLength",
-      initial: "initialMargin",
+      converter: "ConvertQuirkyLength",
+      initial: "InitialMargin",
       interpolable: true,
     },
     {
       name: "margin-top",
       api_class: "CSSPropertyAPIMargin",
       api_methods: ["parseSingleValue"],
-      converter: "convertQuirkyLength",
-      initial: "initialMargin",
+      converter: "ConvertQuirkyLength",
+      initial: "InitialMargin",
       interpolable: true,
     },
     {
       name: "marker-end",
       api_class: "CSSPropertyAPIMarker",
-      converter: "convertFragmentIdentifier",
+      converter: "ConvertFragmentIdentifier",
       inherited: true,
       name_for_methods: "MarkerEndResource",
       svg: true,
@@ -1302,7 +1302,7 @@
     {
       name: "marker-mid",
       api_class: "CSSPropertyAPIMarker",
-      converter: "convertFragmentIdentifier",
+      converter: "ConvertFragmentIdentifier",
       inherited: true,
       name_for_methods: "MarkerMidResource",
       svg: true,
@@ -1310,7 +1310,7 @@
     {
       name: "marker-start",
       api_class: "CSSPropertyAPIMarker",
-      converter: "convertFragmentIdentifier",
+      converter: "ConvertFragmentIdentifier",
       inherited: true,
       name_for_methods: "MarkerStartResource",
       svg: true,
@@ -1318,7 +1318,7 @@
     {
       name: "mask",
       api_class: "CSSPropertyAPIMarker",
-      converter: "convertFragmentIdentifier",
+      converter: "ConvertFragmentIdentifier",
       name_for_methods: "MaskerResource",
       svg: true,
     },
@@ -1333,32 +1333,32 @@
     },
     {
       name: "max-height",
-      converter: "convertLengthMaxSizing",
+      converter: "ConvertLengthMaxSizing",
       is_descriptor: true,
-      initial: "initialMaxSize",
+      initial: "InitialMaxSize",
       interpolable: true,
     },
     {
       name: "max-width",
-      converter: "convertLengthMaxSizing",
+      converter: "ConvertLengthMaxSizing",
       is_descriptor: true,
-      initial: "initialMaxSize",
+      initial: "InitialMaxSize",
       interpolable: true,
     },
     {
       name: "min-height",
       api_class: "CSSPropertyAPIWidthOrHeight",
-      converter: "convertLengthSizing",
+      converter: "ConvertLengthSizing",
       is_descriptor: true,
-      initial: "initialMinSize",
+      initial: "InitialMinSize",
       interpolable: true,
     },
     {
       name: "min-width",
       api_class: "CSSPropertyAPIWidthOrHeight",
-      converter: "convertLengthSizing",
+      converter: "ConvertLengthSizing",
       is_descriptor: true,
-      initial: "initialMinSize",
+      initial: "InitialMinSize",
       interpolable: true,
     },
     {
@@ -1384,46 +1384,46 @@
     },
     {
       name: "object-position",
-      converter: "convertPosition",
+      converter: "ConvertPosition",
       interpolable: true,
     },
     {
       name: "offset-anchor",
       api_class: true,
       api_methods: ["parseSingleValue"],
-      converter: "convertPositionOrAuto",
+      converter: "ConvertPositionOrAuto",
       interpolable: true,
       runtime_flag: "CSSOffsetPositionAnchor",
     },
     {
       name: "offset-distance",
       api_class: true,
-      converter: "convertLength",
+      converter: "ConvertLength",
       interpolable: true,
     },
     {
       name: "offset-path",
-      converter: "convertPathOrNone",
+      converter: "ConvertPathOrNone",
     },
     {
       name: "offset-position",
       api_class: true,
       api_methods: ["parseSingleValue"],
-      converter: "convertPositionOrAuto",
+      converter: "ConvertPositionOrAuto",
       interpolable: true,
       runtime_flag: "CSSOffsetPositionAnchor",
     },
     {
       name: "offset-rotate",
       api_class: "CSSPropertyAPIOffsetRotate",
-      converter: "convertOffsetRotate",
+      converter: "ConvertOffsetRotate",
       interpolable: true,
       runtime_flag: "CSSOffsetRotate",
     },
     {
       name: "offset-rotation",
       api_class: "CSSPropertyAPIOffsetRotate",
-      converter: "convertOffsetRotate",
+      converter: "ConvertOffsetRotate",
       interpolable: true,
       runtime_flag: "CSSOffsetRotation",
     },
@@ -1460,7 +1460,7 @@
       name: "outline-offset",
       api_class: true,
       api_methods: ["parseSingleValue"],
-      converter: "convertComputedLength<int>",
+      converter: "ConvertComputedLength<int>",
       interpolable: true,
     },
     {
@@ -1471,7 +1471,7 @@
       name: "outline-width",
       api_class: true,
       api_methods: ["parseSingleValue"],
-      converter: "convertLineWidth<unsigned short>",
+      converter: "ConvertLineWidth<unsigned short>",
       interpolable: true,
     },
     {
@@ -1510,51 +1510,51 @@
       name: "padding-bottom",
       api_class: "CSSPropertyAPIPadding",
       api_methods: ["parseSingleValue"],
-      converter: "convertLength",
-      initial: "initialPadding",
+      converter: "ConvertLength",
+      initial: "InitialPadding",
       interpolable: true,
     },
     {
       name: "padding-left",
       api_class: "CSSPropertyAPIPadding",
       api_methods: ["parseSingleValue"],
-      converter: "convertLength",
-      initial: "initialPadding",
+      converter: "ConvertLength",
+      initial: "InitialPadding",
       interpolable: true,
     },
     {
       name: "padding-right",
       api_class: "CSSPropertyAPIPadding",
       api_methods: ["parseSingleValue"],
-      converter: "convertLength",
-      initial: "initialPadding",
+      converter: "ConvertLength",
+      initial: "InitialPadding",
       interpolable: true,
     },
     {
       name: "padding-top",
       api_class: "CSSPropertyAPIPadding",
       api_methods: ["parseSingleValue"],
-      converter: "convertLength",
-      initial: "initialPadding",
+      converter: "ConvertLength",
+      initial: "InitialPadding",
       interpolable: true,
     },
     {
       name: "paint-order",
       api_class: true,
       api_methods: ["parseSingleValue"],
-      converter: "convertPaintOrder",
+      converter: "ConvertPaintOrder",
       inherited: true,
       svg: true,
     },
     {
       name: "perspective",
       api_class: "CSSPropertyAPIPerspective",
-      converter: "convertPerspective",
+      converter: "ConvertPerspective",
       interpolable: true,
     },
     {
       name: "perspective-origin",
-      converter: "convertPosition",
+      converter: "ConvertPosition",
       interpolable: true,
     },
     {
@@ -1572,6 +1572,7 @@
       custom_inherit: true,
       default_value: "static",
       field_template: "keyword",
+      getter: "GetPosition",
       keywords: [
         "static", "relative", "absolute", "fixed", "sticky",
       ],
@@ -1580,7 +1581,7 @@
       name: "quotes",
       api_class: true,
       api_methods: ["parseSingleValue"],
-      converter: "convertQuotes",
+      converter: "ConvertQuotes",
       inherited: true,
     },
     {
@@ -1591,8 +1592,8 @@
       name: "right",
       api_class: "CSSPropertyAPIMargin",
       api_methods: ["parseSingleValue"],
-      converter: "convertLengthOrAuto",
-      initial: "initialOffset",
+      converter: "ConvertLengthOrAuto",
+      initial: "InitialOffset",
       interpolable: true,
       keywords: ["auto"],
       supports_percentage: true,
@@ -1601,7 +1602,7 @@
     {
       name: "r",
       api_class: "CSSPropertyAPIStrokeOrLength",
-      converter: "convertLength",
+      converter: "ConvertLength",
       interpolable: true,
       svg: true,
     },
@@ -1609,7 +1610,7 @@
       name: "rx",
       api_class: "CSSPropertyAPIRadius",
       api_methods: ["parseSingleValue"],
-      converter: "convertLengthOrAuto",
+      converter: "ConvertLengthOrAuto",
       interpolable: true,
       svg: true,
     },
@@ -1617,7 +1618,7 @@
       name: "ry",
       api_class: "CSSPropertyAPIRadius",
       api_methods: ["parseSingleValue"],
-      converter: "convertLengthOrAuto",
+      converter: "ConvertLengthOrAuto",
       interpolable: true,
       svg: true,
     },
@@ -1633,24 +1634,24 @@
     },
     {
       name: "scroll-snap-points-x",
-      converter: "convertSnapPoints",
+      converter: "ConvertSnapPoints",
       runtime_flag: "CSSScrollSnapPoints",
     },
     {
       name: "scroll-snap-points-y",
-      converter: "convertSnapPoints",
+      converter: "ConvertSnapPoints",
       runtime_flag: "CSSScrollSnapPoints",
     },
     {
       name: "scroll-snap-destination",
-      converter: "convertPosition",
+      converter: "ConvertPosition",
       runtime_flag: "CSSScrollSnapPoints",
     },
     {
       name: "scroll-snap-coordinate",
       api_class: true,
       api_methods: ["parseSingleValue"],
-      converter: "convertSnapCoordinates",
+      converter: "ConvertSnapCoordinates",
       runtime_flag: "CSSScrollSnapPoints",
     },
     {
@@ -1664,14 +1665,14 @@
       name: "shape-margin",
       api_class: true,
       api_methods: ["parseSingleValue"],
-      converter: "convertLength",
+      converter: "ConvertLength",
       interpolable: true,
     },
     {
       name: "shape-outside",
       api_class: true,
       api_methods: ["parseSingleValue"],
-      converter: "convertShapeValue",
+      converter: "ConvertShapeValue",
       interpolable: true,
       typedom_types: ["Image"],
     },
@@ -1694,7 +1695,7 @@
       name: "stop-color",
       api_class: "CSSPropertyAPIColor",
       api_methods: ["parseSingleValue"],
-      converter: "convertColor",
+      converter: "ConvertColor",
       interpolable: true,
       svg: true,
     },
@@ -1702,7 +1703,7 @@
       name: "stop-opacity",
       api_class: "CSSPropertyAPIOpacity",
       api_methods: ["parseSingleValue"],
-      converter: "convertNumberOrPercentage",
+      converter: "ConvertNumberOrPercentage",
       interpolable: true,
       svg: true,
     },
@@ -1713,14 +1714,14 @@
       custom_all: true,
       inherited: true,
       interpolable: true,
-      setter: "setStrokePaint",
+      setter: "SetStrokePaint",
       svg: true,
     },
     {
       name: "stroke-dasharray",
       api_class: true,
       api_methods: ["parseSingleValue"],
-      converter: "convertStrokeDasharray",
+      converter: "ConvertStrokeDasharray",
       inherited: true,
       interpolable: true,
       name_for_methods: "StrokeDashArray",
@@ -1729,7 +1730,7 @@
     {
       name: "stroke-dashoffset",
       api_class: "CSSPropertyAPIStrokeOrLength",
-      converter: "convertLength",
+      converter: "ConvertLength",
       inherited: true,
       interpolable: true,
       name_for_methods: "StrokeDashOffset",
@@ -1763,7 +1764,7 @@
       name: "stroke-opacity",
       api_class: "CSSPropertyAPIOpacity",
       api_methods: ["parseSingleValue"],
-      converter: "convertNumberOrPercentage",
+      converter: "ConvertNumberOrPercentage",
       inherited: true,
       interpolable: true,
       svg: true,
@@ -1771,7 +1772,7 @@
     {
       name: "stroke-width",
       api_class: "CSSPropertyAPIStrokeOrLength",
-      converter: "convertUnzoomedLength",
+      converter: "ConvertUnzoomedLength",
       inherited: true,
       interpolable: true,
       svg: true,
@@ -1788,7 +1789,7 @@
       name: "tab-size",
       api_class: true,
       api_methods: ["parseSingleValue"],
-      converter: "convertLengthOrTabSpaces",
+      converter: "ConvertLengthOrTabSpaces",
       inherited: true,
       type_name: "TabSize",
     },
@@ -1799,6 +1800,7 @@
       inherited: true,
       default_value: "start",
       field_template: "keyword",
+      getter: "GetTextAlign",
       keywords: [
         "left", "right", "center", "justify", "webkitLeft", "webkitRight", "webkitCenter", "start", "end",
       ],
@@ -1837,7 +1839,7 @@
     {
       name: "text-decoration-line",
       api_class: "CSSPropertyAPITextDecorationLine",
-      converter: "convertFlags<TextDecoration>",
+      converter: "ConvertFlags<TextDecoration>",
       name_for_methods: "TextDecoration",
       runtime_flag: "CSS3TextDecorations",
       type_name: "TextDecoration",
@@ -1846,7 +1848,7 @@
       name: "text-decoration-skip",
       api_class: true,
       api_methods: ["parseSingleValue"],
-      converter: "convertFlags<TextDecorationSkip>",
+      converter: "ConvertFlags<TextDecorationSkip>",
       inherited: true,
       runtime_flag: "CSS3TextDecorations",
       type_name: "TextDecorationSkip",
@@ -1877,7 +1879,7 @@
     {
       name: "text-shadow",
       api_class: "CSSPropertyAPIShadow",
-      converter: "convertShadowList",
+      converter: "ConvertShadowList",
       inherited: true,
       interpolable: true,
     },
@@ -1885,7 +1887,7 @@
       name: "text-size-adjust",
       api_class: true,
       api_methods: ["parseSingleValue"],
-      converter: "convertTextSizeAdjust",
+      converter: "ConvertTextSizeAdjust",
       inherited: true,
       type_name: "TextSizeAdjust",
     },
@@ -1909,8 +1911,8 @@
       name: "top",
       api_class: "CSSPropertyAPIMargin",
       api_methods: ["parseSingleValue"],
-      converter: "convertLengthOrAuto",
-      initial: "initialOffset",
+      converter: "ConvertLengthOrAuto",
+      initial: "InitialOffset",
       interpolable: true,
       keywords: ["auto"],
       supports_percentage: true,
@@ -1920,12 +1922,12 @@
       name: "touch-action",
       api_class: true,
       api_methods: ["parseSingleValue"],
-      converter: "convertFlags<TouchAction>",
+      converter: "ConvertFlags<TouchAction>",
       type_name: "TouchAction",
     },
     {
       name: "transform",
-      converter: "convertTransformOperations",
+      converter: "ConvertTransformOperations",
       interpolable: true,
       keywords: ["none"],
       typedom_types: ["Transform"],
@@ -1941,7 +1943,8 @@
       name: "transform-origin",
       api_class: true,
       api_methods: ["parseSingleValue"],
-      converter: "convertTransformOrigin",
+      converter: "ConvertTransformOrigin",
+      getter: "GetTransformOrigin",
       interpolable: true,
     },
     {
@@ -1952,7 +1955,7 @@
       name: "translate",
       api_class: true,
       api_methods: ["parseSingleValue"],
-      converter: "convertTranslate",
+      converter: "ConvertTranslate",
       interpolable: true,
       runtime_flag: "CSSIndependentTransformProperties",
     },
@@ -1960,7 +1963,7 @@
       name: "rotate",
       api_class: true,
       api_methods: ["parseSingleValue"],
-      converter: "convertRotate",
+      converter: "ConvertRotate",
       interpolable: true,
       runtime_flag: "CSSIndependentTransformProperties",
     },
@@ -1968,7 +1971,7 @@
       name: "scale",
       api_class: true,
       api_methods: ["parseSingleValue"],
-      converter: "convertScale",
+      converter: "ConvertScale",
       interpolable: true,
       runtime_flag: "CSSIndependentTransformProperties",
     },
@@ -2006,14 +2009,14 @@
     {
       name: "x",
       api_class: "CSSPropertyAPIStrokeOrLength",
-      converter: "convertLength",
+      converter: "ConvertLength",
       interpolable: true,
       svg: true,
     },
     {
       name: "y",
       api_class: "CSSPropertyAPIStrokeOrLength",
-      converter: "convertLength",
+      converter: "ConvertLength",
       interpolable: true,
       svg: true,
     },
@@ -2037,7 +2040,7 @@
       name: "-webkit-border-horizontal-spacing",
       api_class: "CSSPropertyAPIWebkitBorderSpacing",
       api_methods: ["parseSingleValue"],
-      converter: "convertComputedLength<short>",
+      converter: "ConvertComputedLength<short>",
       inherited: true,
       interpolable: true,
       name_for_methods: "HorizontalBorderSpacing",
@@ -2046,13 +2049,13 @@
       name: "-webkit-border-image",
       api_class: true,
       custom_value: true,
-      initial: "initialNinePieceImage",
+      initial: "InitialNinePieceImage",
     },
     {
       name: "-webkit-border-vertical-spacing",
       api_class: "CSSPropertyAPIWebkitBorderSpacing",
       api_methods: ["parseSingleValue"],
-      converter: "convertComputedLength<short>",
+      converter: "ConvertComputedLength<short>",
       inherited: true,
       interpolable: true,
       name_for_methods: "VerticalBorderSpacing",
@@ -2092,7 +2095,7 @@
     "-webkit-box-pack",
     {
       name: "-webkit-box-reflect",
-      converter: "convertBoxReflect",
+      converter: "ConvertBoxReflect",
     },
     {
       name: "column-count",
@@ -2106,7 +2109,7 @@
       name: "column-gap",
       api_class: true,
       api_methods: ["parseSingleValue"],
-      converter: "convertComputedLength<float>",
+      converter: "ConvertComputedLength<float>",
       custom_all: true,
       interpolable: true,
     },
@@ -2119,14 +2122,14 @@
     },
     {
       name: "column-rule-style",
-      initial: "initialBorderStyle",
+      initial: "InitialBorderStyle",
       type_name: "EBorderStyle",
     },
     {
       name: "column-rule-width",
       api_class: true,
       api_methods: ["parseSingleValue"],
-      converter: "convertLineWidth<unsigned short>",
+      converter: "ConvertLineWidth<unsigned short>",
       interpolable: true,
     },
     {
@@ -2139,7 +2142,7 @@
       name: "column-width",
       api_class: true,
       api_methods: ["parseSingleValue"],
-      converter: "convertComputedLength<float>",
+      converter: "ConvertComputedLength<float>",
       custom_all: true,
       interpolable: true,
     },
@@ -2147,12 +2150,12 @@
       name: "-webkit-highlight",
       api_class: true,
       api_methods: ["parseSingleValue"],
-      converter: "convertString<CSSValueNone>",
+      converter: "ConvertString<CSSValueNone>",
       inherited: true,
     },
     {
       name: "-webkit-hyphenate-character",
-      converter: "convertString<CSSValueAuto>",
+      converter: "ConvertString<CSSValueAuto>",
       inherited: true,
       name_for_methods: "HyphenationString",
     },
@@ -2260,13 +2263,13 @@
     {
       name: "-webkit-perspective-origin-x",
       api_class: "CSSPropertyAPIWebkitOriginX",
-      converter: "convertLength",
+      converter: "ConvertLength",
       interpolable: true,
     },
     {
       name: "-webkit-perspective-origin-y",
       api_class: "CSSPropertyAPIWebkitOriginY",
-      converter: "convertLength",
+      converter: "ConvertLength",
       interpolable: true,
     },
     {
@@ -2281,11 +2284,11 @@
       name: "-webkit-rtl-ordering",
       independent: true,
       inherited: true,
-      initial: "initialRtlOrdering",
+      initial: "InitialRtlOrdering",
       default_value: "logical",
       field_template: "keyword",
       keywords: ["logical", "visual"],
-      setter: "setRtlOrdering",
+      setter: "SetRtlOrdering",
       type_name: "EOrder",
     },
     {
@@ -2297,7 +2300,7 @@
       name: "-webkit-tap-highlight-color",
       api_class: "CSSPropertyAPIColor",
       api_methods: ["parseSingleValue"],
-      converter: "convertColor",
+      converter: "ConvertColor",
       inherited: true,
     },
     {
@@ -2348,26 +2351,26 @@
       name: "-webkit-text-stroke-width",
       api_class: true,
       api_methods: ["parseSingleValue"],
-      converter: "convertTextStrokeWidth",
+      converter: "ConvertTextStrokeWidth",
       inherited: true,
     },
     {
       name: "-webkit-transform-origin-x",
       api_class: "CSSPropertyAPIWebkitOriginX",
-      converter: "convertLength",
+      converter: "ConvertLength",
       interpolable: true,
     },
     {
       name: "-webkit-transform-origin-y",
       api_class: "CSSPropertyAPIWebkitOriginY",
-      converter: "convertLength",
+      converter: "ConvertLength",
       interpolable: true,
     },
     {
       name: "-webkit-transform-origin-z",
       api_class: true,
       api_methods: ["parseSingleValue"],
-      converter: "convertComputedLength<float>",
+      converter: "ConvertComputedLength<float>",
       interpolable: true,
     },
     "-webkit-user-drag",
@@ -2398,9 +2401,9 @@
     {
       name: "width",
       api_class: "CSSPropertyAPIWidthOrHeight",
-      converter: "convertLengthSizing",
+      converter: "ConvertLengthSizing",
       is_descriptor: true,
-      initial: "initialSize",
+      initial: "InitialSize",
       interpolable: true,
       keywords: ["auto", "fit-content", "min-content", "max-content"],
       supports_percentage: true,
@@ -2420,9 +2423,9 @@
       name: "word-spacing",
       api_class: "CSSPropertyAPILetterAndWordSpacing",
       api_methods: ["parseSingleValue"],
-      converter: "convertSpacing",
+      converter: "ConvertSpacing",
       inherited: true,
-      initial: "initialLetterWordSpacing",
+      initial: "InitialLetterWordSpacing",
       interpolable: true,
     },
     // UAs must treat 'word-wrap' as an alternate name for the 'overflow-wrap' property. So using the same handlers.
diff --git a/third_party/WebKit/Source/core/css/CSSRuleList.h b/third_party/WebKit/Source/core/css/CSSRuleList.h
index a9c7859610c4..12dc32810cc7 100644
--- a/third_party/WebKit/Source/core/css/CSSRuleList.h
+++ b/third_party/WebKit/Source/core/css/CSSRuleList.h
@@ -89,7 +89,7 @@ class LiveCSSRuleList final : public CSSRuleList {
   unsigned length() const override { return rule_->length(); }
   CSSRule* item(unsigned index) const override { return rule_->Item(index); }
   CSSStyleSheet* GetStyleSheet() const override {
-    return rule_->ParentStyleSheet();
+    return rule_->parentStyleSheet();
   }
 
   Member<Rule> rule_;
diff --git a/third_party/WebKit/Source/core/css/CSSValue.h b/third_party/WebKit/Source/core/css/CSSValue.h
index 930809772e42..14f7acc953c5 100644
--- a/third_party/WebKit/Source/core/css/CSSValue.h
+++ b/third_party/WebKit/Source/core/css/CSSValue.h
@@ -43,7 +43,7 @@ class CORE_EXPORT CSSValue : public GarbageCollectedFinalized<CSSValue> {
     const char* type_name = "blink::CSSValue";
     return ThreadHeap::AllocateOnArenaIndex(
         state, size,
-        is_eager ? BlinkGC::kEagerSweepArenaIndex : BlinkGC::CSSValueArenaIndex,
+        is_eager ? BlinkGC::kEagerSweepArenaIndex : BlinkGC::kCSSValueArenaIndex,
         GCInfoTrait<CSSValue>::Index(), type_name);
   }
 
diff --git a/third_party/WebKit/Source/core/css/ElementRuleCollector.cpp b/third_party/WebKit/Source/core/css/ElementRuleCollector.cpp
index b2e864e935f5..00f1a5e10b6d 100644
--- a/third_party/WebKit/Source/core/css/ElementRuleCollector.cpp
+++ b/third_party/WebKit/Source/core/css/ElementRuleCollector.cpp
@@ -257,7 +257,7 @@ CSSRule* ElementRuleCollector::FindStyleRule(CSSRuleCollection* css_rules,
     return nullptr;
   CSSRule* result = 0;
   for (unsigned i = 0; i < css_rules->length() && !result; ++i) {
-    CSSRule* css_rule = css_rules->Item(i);
+    CSSRule* css_rule = css_rules->item(i);
     CSSRule::Type css_rule_type = css_rule->type();
     if (css_rule_type == CSSRule::kStyleRule) {
       CSSStyleRule* css_style_rule = ToCSSStyleRule(css_rule);
diff --git a/third_party/WebKit/Source/core/css/FontFaceSet.cpp b/third_party/WebKit/Source/core/css/FontFaceSet.cpp
index 23ba22269edb..8b250f82c7e7 100644
--- a/third_party/WebKit/Source/core/css/FontFaceSet.cpp
+++ b/third_party/WebKit/Source/core/css/FontFaceSet.cpp
@@ -254,7 +254,7 @@ ScriptPromise FontFaceSet::ready(ScriptState* script_state) {
   return ready_->Promise(script_state->World());
 }
 
-FontFaceSet* FontFaceSet::AddForBinding(ScriptState*,
+FontFaceSet* FontFaceSet::addForBinding(ScriptState*,
                                         FontFace* font_face,
                                         ExceptionState&) {
   DCHECK(font_face);
@@ -273,7 +273,7 @@ FontFaceSet* FontFaceSet::AddForBinding(ScriptState*,
   return this;
 }
 
-void FontFaceSet::ClearForBinding(ScriptState*, ExceptionState&) {
+void FontFaceSet::clearForBinding(ScriptState*, ExceptionState&) {
   if (!InActiveDocumentContext() || non_css_connected_faces_.IsEmpty())
     return;
   CSSFontSelector* font_selector = GetDocument()->GetStyleEngine().FontSelector();
@@ -287,7 +287,7 @@ void FontFaceSet::ClearForBinding(ScriptState*, ExceptionState&) {
   font_selector->FontFaceInvalidated();
 }
 
-bool FontFaceSet::DeleteForBinding(ScriptState*,
+bool FontFaceSet::deleteForBinding(ScriptState*,
                                    FontFace* font_face,
                                    ExceptionState&) {
   DCHECK(font_face);
@@ -307,7 +307,7 @@ bool FontFaceSet::DeleteForBinding(ScriptState*,
   return false;
 }
 
-bool FontFaceSet::HasForBinding(ScriptState*,
+bool FontFaceSet::hasForBinding(ScriptState*,
                                 FontFace* font_face,
                                 ExceptionState&) const {
   DCHECK(font_face);
diff --git a/third_party/WebKit/Source/core/css/FontFaceSet.h b/third_party/WebKit/Source/core/css/FontFaceSet.h
index f2a136766d1b..f995527d6d45 100644
--- a/third_party/WebKit/Source/core/css/FontFaceSet.h
+++ b/third_party/WebKit/Source/core/css/FontFaceSet.h
@@ -74,10 +74,10 @@ class CORE_EXPORT FontFaceSet final : public EventTargetWithInlineData,
   ScriptPromise load(ScriptState*, const String& font, const String& text);
   ScriptPromise ready(ScriptState*);
 
-  FontFaceSet* AddForBinding(ScriptState*, FontFace*, ExceptionState&);
-  void ClearForBinding(ScriptState*, ExceptionState&);
-  bool DeleteForBinding(ScriptState*, FontFace*, ExceptionState&);
-  bool HasForBinding(ScriptState*, FontFace*, ExceptionState&) const;
+  FontFaceSet* addForBinding(ScriptState*, FontFace*, ExceptionState&);
+  void clearForBinding(ScriptState*, ExceptionState&);
+  bool deleteForBinding(ScriptState*, FontFace*, ExceptionState&);
+  bool hasForBinding(ScriptState*, FontFace*, ExceptionState&) const;
 
   size_t size() const;
   AtomicString status() const;
diff --git a/third_party/WebKit/Source/core/css/MediaQueryEvaluator.cpp b/third_party/WebKit/Source/core/css/MediaQueryEvaluator.cpp
index 78c7d5dfc70c..b51d722a7c5f 100644
--- a/third_party/WebKit/Source/core/css/MediaQueryEvaluator.cpp
+++ b/third_party/WebKit/Source/core/css/MediaQueryEvaluator.cpp
@@ -798,8 +798,9 @@ static bool ColorGamutMediaFeatureEval(const MediaQueryExpValue& value,
 void MediaQueryEvaluator::Init() {
   // Create the table.
   g_function_map = new FunctionMap;
-#define ADD_TO_FUNCTIONMAP(name) \
-  g_function_map->Set(name##MediaFeature.Impl(), name##MediaFeatureEval);
+#define ADD_TO_FUNCTIONMAP(constantPrefix, methodPrefix)   \
+  g_function_map->Set(constantPrefix##MediaFeature.Impl(), \
+                      methodPrefix##MediaFeatureEval);
   CSS_MEDIAQUERY_NAMES_FOR_EACH_MEDIAFEATURE(ADD_TO_FUNCTIONMAP);
 #undef ADD_TO_FUNCTIONMAP
 }
diff --git a/third_party/WebKit/Source/core/css/StylePropertySet.cpp b/third_party/WebKit/Source/core/css/StylePropertySet.cpp
index 68b0b997ea86..e48e537120db 100644
--- a/third_party/WebKit/Source/core/css/StylePropertySet.cpp
+++ b/third_party/WebKit/Source/core/css/StylePropertySet.cpp
@@ -136,9 +136,9 @@ int ImmutableStylePropertySet::FindPropertyIndex(T property) const {
 
   return -1;
 }
-template CORE_EXPORT int ImmutableStylePropertySet::findPropertyIndex(
+template CORE_EXPORT int ImmutableStylePropertySet::FindPropertyIndex(
     CSSPropertyID) const;
-template CORE_EXPORT int ImmutableStylePropertySet::findPropertyIndex(
+template CORE_EXPORT int ImmutableStylePropertySet::FindPropertyIndex(
     AtomicString) const;
 
 DEFINE_TRACE_AFTER_DISPATCH(ImmutableStylePropertySet) {
@@ -178,9 +178,9 @@ String StylePropertySet::GetPropertyValue(T property) const {
   return SerializeShorthand(*this, property);
 }
 template CORE_EXPORT String
-    StylePropertySet::getPropertyValue<CSSPropertyID>(CSSPropertyID) const;
+    StylePropertySet::GetPropertyValue<CSSPropertyID>(CSSPropertyID) const;
 template CORE_EXPORT String
-    StylePropertySet::getPropertyValue<AtomicString>(AtomicString) const;
+    StylePropertySet::GetPropertyValue<AtomicString>(AtomicString) const;
 
 template <typename T>
 const CSSValue* StylePropertySet::GetPropertyCSSValue(T property) const {
@@ -190,9 +190,9 @@ const CSSValue* StylePropertySet::GetPropertyCSSValue(T property) const {
   return &PropertyAt(found_property_index).Value();
 }
 template CORE_EXPORT const CSSValue*
-    StylePropertySet::getPropertyCSSValue<CSSPropertyID>(CSSPropertyID) const;
+    StylePropertySet::GetPropertyCSSValue<CSSPropertyID>(CSSPropertyID) const;
 template CORE_EXPORT const CSSValue*
-    StylePropertySet::getPropertyCSSValue<AtomicString>(AtomicString) const;
+    StylePropertySet::GetPropertyCSSValue<AtomicString>(AtomicString) const;
 
 DEFINE_TRACE(StylePropertySet) {
   if (is_mutable_)
@@ -247,9 +247,9 @@ bool MutableStylePropertySet::RemoveProperty(T property, String* return_text) {
   int found_property_index = FindPropertyIndex(property);
   return RemovePropertyAtIndex(found_property_index, return_text);
 }
-template CORE_EXPORT bool MutableStylePropertySet::removeProperty(CSSPropertyID,
+template CORE_EXPORT bool MutableStylePropertySet::RemoveProperty(CSSPropertyID,
                                                                   String*);
-template CORE_EXPORT bool MutableStylePropertySet::removeProperty(AtomicString,
+template CORE_EXPORT bool MutableStylePropertySet::RemoveProperty(AtomicString,
                                                                   String*);
 
 template <typename T>
@@ -259,9 +259,9 @@ bool StylePropertySet::PropertyIsImportant(T property) const {
     return PropertyAt(found_property_index).IsImportant();
   return ShorthandIsImportant(property);
 }
-template bool StylePropertySet::propertyIsImportant<CSSPropertyID>(
+template bool StylePropertySet::PropertyIsImportant<CSSPropertyID>(
     CSSPropertyID) const;
-template bool StylePropertySet::propertyIsImportant<AtomicString>(
+template bool StylePropertySet::PropertyIsImportant<AtomicString>(
     AtomicString) const;
 
 bool StylePropertySet::ShorthandIsImportant(CSSPropertyID property_id) const {
@@ -574,9 +574,9 @@ int MutableStylePropertySet::FindPropertyIndex(T property) const {
 
   return (it == end) ? -1 : it - begin;
 }
-template CORE_EXPORT int MutableStylePropertySet::findPropertyIndex(
+template CORE_EXPORT int MutableStylePropertySet::FindPropertyIndex(
     CSSPropertyID) const;
-template CORE_EXPORT int MutableStylePropertySet::findPropertyIndex(
+template CORE_EXPORT int MutableStylePropertySet::FindPropertyIndex(
     AtomicString) const;
 
 DEFINE_TRACE_AFTER_DISPATCH(MutableStylePropertySet) {
diff --git a/third_party/WebKit/Source/core/css/parser/CSSPropertyParser.cpp b/third_party/WebKit/Source/core/css/parser/CSSPropertyParser.cpp
index c6b1b7192695..5115f6fe8985 100644
--- a/third_party/WebKit/Source/core/css/parser/CSSPropertyParser.cpp
+++ b/third_party/WebKit/Source/core/css/parser/CSSPropertyParser.cpp
@@ -1834,7 +1834,7 @@ const CSSValue* CSSPropertyParser::ParseSingleValue(
   // other properties, those properties will be taken out of the switch
   // statement.
   const CSSPropertyDescriptor& css_property_desc =
-      CSSPropertyDescriptor::get(property);
+      CSSPropertyDescriptor::Get(property);
   if (css_property_desc.parseSingleValue) {
     DCHECK(context_);
     return css_property_desc.parseSingleValue(range_, *context_);
@@ -3366,7 +3366,7 @@ bool CSSPropertyParser::ParseShorthand(CSSPropertyID unresolved_property,
   // other properties, those properties will be taken out of the switch
   // statement.
   const CSSPropertyDescriptor& css_property_desc =
-      CSSPropertyDescriptor::get(property);
+      CSSPropertyDescriptor::Get(property);
   if (css_property_desc.parseShorthand)
     return css_property_desc.parseShorthand(important, range_, context_);
 
diff --git a/third_party/WebKit/Source/core/css/parser/CSSTokenizer.cpp b/third_party/WebKit/Source/core/css/parser/CSSTokenizer.cpp
index bdcc92e9b951..b4549c73b1f2 100644
--- a/third_party/WebKit/Source/core/css/parser/CSSTokenizer.cpp
+++ b/third_party/WebKit/Source/core/css/parser/CSSTokenizer.cpp
@@ -210,7 +210,7 @@ CSSParserToken CSSTokenizer::SemiColon(UChar cc) {
   return CSSParserToken(kSemicolonToken);
 }
 
-CSSParserToken CSSTokenizer::GetHash(UChar cc) {
+CSSParserToken CSSTokenizer::Hash(UChar cc) {
   UChar next_char = input_.PeekWithoutReplacement(0);
   if (IsNameCodePoint(next_char) ||
       TwoCharsAreValidEscape(next_char, input_.PeekWithoutReplacement(1))) {
@@ -338,12 +338,12 @@ CSSParserToken CSSTokenizer::ConsumeNumber() {
     sign = kMinusSign;
   }
 
-  number_length = input_.SkipWhilePredicate<isASCIIDigit>(number_length);
+  number_length = input_.SkipWhilePredicate<IsASCIIDigit>(number_length);
   next = input_.PeekWithoutReplacement(number_length);
   if (next == '.' &&
       IsASCIIDigit(input_.PeekWithoutReplacement(number_length + 1))) {
     type = kNumberValueType;
-    number_length = input_.SkipWhilePredicate<isASCIIDigit>(number_length + 2);
+    number_length = input_.SkipWhilePredicate<IsASCIIDigit>(number_length + 2);
     next = input_.PeekWithoutReplacement(number_length);
   }
 
@@ -351,11 +351,11 @@ CSSParserToken CSSTokenizer::ConsumeNumber() {
     next = input_.PeekWithoutReplacement(number_length + 1);
     if (IsASCIIDigit(next)) {
       type = kNumberValueType;
-      number_length = input_.SkipWhilePredicate<isASCIIDigit>(number_length + 1);
+      number_length = input_.SkipWhilePredicate<IsASCIIDigit>(number_length + 1);
     } else if ((next == '+' || next == '-') &&
                IsASCIIDigit(input_.PeekWithoutReplacement(number_length + 2))) {
       type = kNumberValueType;
-      number_length = input_.SkipWhilePredicate<isASCIIDigit>(number_length + 3);
+      number_length = input_.SkipWhilePredicate<IsASCIIDigit>(number_length + 3);
     }
   }
 
diff --git a/third_party/WebKit/Source/core/css/parser/CSSTokenizer.h b/third_party/WebKit/Source/core/css/parser/CSSTokenizer.h
index b5d5f8789aab..32da368e0007 100644
--- a/third_party/WebKit/Source/core/css/parser/CSSTokenizer.h
+++ b/third_party/WebKit/Source/core/css/parser/CSSTokenizer.h
@@ -82,7 +82,7 @@ class CORE_EXPORT CSSTokenizer {
   CSSParserToken Solidus(UChar);
   CSSParserToken Colon(UChar);
   CSSParserToken SemiColon(UChar);
-  CSSParserToken GetHash(UChar);
+  CSSParserToken Hash(UChar);
   CSSParserToken CircumflexAccent(UChar);
   CSSParserToken DollarSign(UChar);
   CSSParserToken VerticalLine(UChar);
diff --git a/third_party/WebKit/Source/core/css/parser/CSSTokenizerTest.cpp b/third_party/WebKit/Source/core/css/parser/CSSTokenizerTest.cpp
index 46df1978e07f..2de2e4f5d22c 100644
--- a/third_party/WebKit/Source/core/css/parser/CSSTokenizerTest.cpp
+++ b/third_party/WebKit/Source/core/css/parser/CSSTokenizerTest.cpp
@@ -141,22 +141,22 @@ DEFINE_TOKEN(Whitespace, (kWhitespaceToken))
 DEFINE_TOKEN(Colon, (kColonToken));
 DEFINE_TOKEN(Semicolon, (kSemicolonToken));
 DEFINE_TOKEN(Comma, (kCommaToken));
-DEFINE_TOKEN(Include_match, (kIncludeMatchToken));
-DEFINE_TOKEN(Dash_match, (kDashMatchToken));
-DEFINE_TOKEN(Prefix_match, (kPrefixMatchToken));
-DEFINE_TOKEN(Suffix_match, (kSuffixMatchToken));
-DEFINE_TOKEN(Substring_match, (kSubstringMatchToken));
+DEFINE_TOKEN(IncludeMatch, (kIncludeMatchToken));
+DEFINE_TOKEN(DashMatch, (kDashMatchToken));
+DEFINE_TOKEN(PrefixMatch, (kPrefixMatchToken));
+DEFINE_TOKEN(SuffixMatch, (kSuffixMatchToken));
+DEFINE_TOKEN(SubstringMatch, (kSubstringMatchToken));
 DEFINE_TOKEN(Column, (kColumnToken));
 DEFINE_TOKEN(Cdo, (kCDOToken));
 DEFINE_TOKEN(Cdc, (kCDCToken));
-DEFINE_TOKEN(Left_parenthesis, (kLeftParenthesisToken));
-DEFINE_TOKEN(Right_parenthesis, (kRightParenthesisToken));
-DEFINE_TOKEN(Left_bracket, (kLeftBracketToken));
-DEFINE_TOKEN(Right_bracket, (kRightBracketToken));
-DEFINE_TOKEN(Left_brace, (kLeftBraceToken));
-DEFINE_TOKEN(Right_brace, (kRightBraceToken));
-DEFINE_TOKEN(Bad_string, (kBadStringToken));
-DEFINE_TOKEN(Bad_url, (kBadUrlToken));
+DEFINE_TOKEN(LeftParenthesis, (kLeftParenthesisToken));
+DEFINE_TOKEN(RightParenthesis, (kRightParenthesisToken));
+DEFINE_TOKEN(LeftBracket, (kLeftBracketToken));
+DEFINE_TOKEN(RightBracket, (kRightBracketToken));
+DEFINE_TOKEN(LeftBrace, (kLeftBraceToken));
+DEFINE_TOKEN(RightBrace, (kRightBraceToken));
+DEFINE_TOKEN(BadString, (kBadStringToken));
+DEFINE_TOKEN(BadUrl, (kBadUrlToken));
 
 String FromUChar32(UChar32 c) {
   StringBuilder input;
diff --git a/third_party/WebKit/Source/core/dom/ElementTraversal.h b/third_party/WebKit/Source/core/dom/ElementTraversal.h
index 4da55073b7c9..4c425226b24b 100644
--- a/third_party/WebKit/Source/core/dom/ElementTraversal.h
+++ b/third_party/WebKit/Source/core/dom/ElementTraversal.h
@@ -281,7 +281,7 @@ template <class ElementType>
 template <class NodeType>
 inline ElementType* Traversal<ElementType>::FirstChildTemplate(
     NodeType& current) {
-  Node* node = current.FirstChild();
+  Node* node = current.firstChild();
   while (node && !IsElementOfType<const ElementType>(*node))
     node = node->nextSibling();
   return ToElement<ElementType>(node);
@@ -319,7 +319,7 @@ template <class ElementType>
 template <class NodeType>
 inline ElementType* Traversal<ElementType>::LastChildTemplate(
     NodeType& current) {
-  Node* node = current.LastChild();
+  Node* node = current.lastChild();
   while (node && !IsElementOfType<const ElementType>(*node))
     node = node->previousSibling();
   return ToElement<ElementType>(node);
@@ -340,7 +340,7 @@ template <class ElementType>
 template <class NodeType>
 inline ElementType* Traversal<ElementType>::FirstWithinTemplate(
     NodeType& current) {
-  Node* node = current.FirstChild();
+  Node* node = current.firstChild();
   while (node && !IsElementOfType<const ElementType>(*node))
     node = NodeTraversal::Next(*node, &current);
   return ToElement<ElementType>(node);
diff --git a/third_party/WebKit/Source/core/dom/Node.h b/third_party/WebKit/Source/core/dom/Node.h
index 161d5afde984..6ef44061ca60 100644
--- a/third_party/WebKit/Source/core/dom/Node.h
+++ b/third_party/WebKit/Source/core/dom/Node.h
@@ -167,7 +167,7 @@ class CORE_EXPORT Node : public EventTarget {
     const char* type_name = "blink::Node";
     return ThreadHeap::AllocateOnArenaIndex(
         state, size,
-        is_eager ? BlinkGC::kEagerSweepArenaIndex : BlinkGC::NodeArenaIndex,
+        is_eager ? BlinkGC::kEagerSweepArenaIndex : BlinkGC::kNodeArenaIndex,
         GCInfoTrait<EventTarget>::Index(), type_name);
   }
 
diff --git a/third_party/WebKit/Source/core/dom/NodeTraversal.h b/third_party/WebKit/Source/core/dom/NodeTraversal.h
index 1097a4c5228f..e7c6314bc54d 100644
--- a/third_party/WebKit/Source/core/dom/NodeTraversal.h
+++ b/third_party/WebKit/Source/core/dom/NodeTraversal.h
@@ -349,22 +349,22 @@ NodeTraversal::StartsAfter(const Node& start) {
 
 template <class NodeType>
 inline Node* NodeTraversal::TraverseNextTemplate(NodeType& current) {
-  if (current.HasChildren())
-    return current.FirstChild();
-  if (current.NextSibling())
-    return current.NextSibling();
+  if (current.hasChildren())
+    return current.firstChild();
+  if (current.nextSibling())
+    return current.nextSibling();
   return NextAncestorSibling(current);
 }
 
 template <class NodeType>
 inline Node* NodeTraversal::TraverseNextTemplate(NodeType& current,
                                                  const Node* stay_within) {
-  if (current.HasChildren())
-    return current.FirstChild();
+  if (current.hasChildren())
+    return current.firstChild();
   if (current == stay_within)
     return 0;
-  if (current.NextSibling())
-    return current.NextSibling();
+  if (current.nextSibling())
+    return current.nextSibling();
   return NextAncestorSibling(current, stay_within);
 }
 
@@ -392,7 +392,7 @@ inline Node& NodeTraversal::HighestAncestorOrSelf(Node& current) {
 
 template <class NodeType>
 inline Node* NodeTraversal::ChildAtTemplate(NodeType& parent, unsigned index) {
-  Node* child = parent.FirstChild();
+  Node* child = parent.firstChild();
   while (child && index--)
     child = child->nextSibling();
   return child;
diff --git a/third_party/WebKit/Source/core/editing/EditingCommandTest.cpp b/third_party/WebKit/Source/core/editing/EditingCommandTest.cpp
index afcae11323e1..f9a42305f223 100644
--- a/third_party/WebKit/Source/core/editing/EditingCommandTest.cpp
+++ b/third_party/WebKit/Source/core/editing/EditingCommandTest.cpp
@@ -19,7 +19,7 @@ struct CommandNameEntry {
 };
 
 const CommandNameEntry kCommandNameEntries[] = {
-#define V(name) {#name, WebEditingCommandType::name},
+#define V(name) {#name, WebEditingCommandType::k##name},
     FOR_EACH_BLINK_EDITING_COMMAND_NAME(V)
 #undef V
 };
diff --git a/third_party/WebKit/Source/core/editing/commands/EditorCommand.cpp b/third_party/WebKit/Source/core/editing/commands/EditorCommand.cpp
index 3d664fbdbb5a..ba61fa7dee19 100644
--- a/third_party/WebKit/Source/core/editing/commands/EditorCommand.cpp
+++ b/third_party/WebKit/Source/core/editing/commands/EditorCommand.cpp
@@ -88,7 +88,7 @@ struct CommandNameEntry {
 };
 
 const CommandNameEntry kCommandNameEntries[] = {
-#define V(name) {#name, WebEditingCommandType::name},
+#define V(name) {#name, WebEditingCommandType::k##name},
     FOR_EACH_BLINK_EDITING_COMMAND_NAME(V)
 #undef V
 };
diff --git a/third_party/WebKit/Source/core/editing/commands/EditorCommandNames.h b/third_party/WebKit/Source/core/editing/commands/EditorCommandNames.h
index 2b99df14310a..312b4c9c34c9 100644
--- a/third_party/WebKit/Source/core/editing/commands/EditorCommandNames.h
+++ b/third_party/WebKit/Source/core/editing/commands/EditorCommandNames.h
@@ -9,146 +9,148 @@ namespace blink {
 
 // Must be ordered in a case-folding manner for binary search. Covered by unit
 // tests in EditingCommandTest.cpp (not able to use static_assert)
+  /* DO NOT SUBMIT - conflict resolution helper:
+   * Important to have AlignCenter instead of kAlignCenter below. */
 #define FOR_EACH_BLINK_EDITING_COMMAND_NAME(V)    \
-  V(kAlignCenter)                                  \
-  V(kAlignJustified)                               \
-  V(kAlignLeft)                                    \
-  V(kAlignRight)                                   \
-  V(kBackColor)                                    \
-  V(kBackwardDelete)                               \
-  V(kBold)                                         \
-  V(kCopy)                                         \
-  V(kCreateLink)                                   \
-  V(kCut)                                          \
-  V(kDefaultParagraphSeparator)                    \
-  V(kDelete)                                       \
-  V(kDeleteBackward)                               \
-  V(kDeleteBackwardByDecomposingPreviousCharacter) \
-  V(kDeleteForward)                                \
-  V(kDeleteToBeginningOfLine)                      \
-  V(kDeleteToBeginningOfParagraph)                 \
-  V(kDeleteToEndOfLine)                            \
-  V(kDeleteToEndOfParagraph)                       \
-  V(kDeleteToMark)                                 \
-  V(kDeleteWordBackward)                           \
-  V(kDeleteWordForward)                            \
-  V(kFindString)                                   \
-  V(kFontName)                                     \
-  V(kFontSize)                                     \
-  V(kFontSizeDelta)                                \
-  V(kForeColor)                                    \
-  V(kFormatBlock)                                  \
-  V(kForwardDelete)                                \
-  V(kHiliteColor)                                  \
-  V(kIgnoreSpelling)                               \
-  V(kIndent)                                       \
-  V(kInsertBacktab)                                \
-  V(kInsertHorizontalRule)                         \
-  V(kInsertHTML)                                   \
-  V(kInsertImage)                                  \
-  V(kInsertLineBreak)                              \
-  V(kInsertNewline)                                \
-  V(kInsertNewlineInQuotedContent)                 \
-  V(kInsertOrderedList)                            \
-  V(kInsertParagraph)                              \
-  V(kInsertTab)                                    \
-  V(kInsertText)                                   \
-  V(kInsertUnorderedList)                          \
-  V(kItalic)                                       \
-  V(kJustifyCenter)                                \
-  V(kJustifyFull)                                  \
-  V(kJustifyLeft)                                  \
-  V(kJustifyNone)                                  \
-  V(kJustifyRight)                                 \
-  V(kMakeTextWritingDirectionLeftToRight)          \
-  V(kMakeTextWritingDirectionNatural)              \
-  V(kMakeTextWritingDirectionRightToLeft)          \
-  V(kMoveBackward)                                 \
-  V(kMoveBackwardAndModifySelection)               \
-  V(kMoveDown)                                     \
-  V(kMoveDownAndModifySelection)                   \
-  V(kMoveForward)                                  \
-  V(kMoveForwardAndModifySelection)                \
-  V(kMoveLeft)                                     \
-  V(kMoveLeftAndModifySelection)                   \
-  V(kMovePageDown)                                 \
-  V(kMovePageDownAndModifySelection)               \
-  V(kMovePageUp)                                   \
-  V(kMovePageUpAndModifySelection)                 \
-  V(kMoveParagraphBackward)                        \
-  V(kMoveParagraphBackwardAndModifySelection)      \
-  V(kMoveParagraphForward)                         \
-  V(kMoveParagraphForwardAndModifySelection)       \
-  V(kMoveRight)                                    \
-  V(kMoveRightAndModifySelection)                  \
-  V(kMoveToBeginningOfDocument)                    \
-  V(kMoveToBeginningOfDocumentAndModifySelection)  \
-  V(kMoveToBeginningOfLine)                        \
-  V(kMoveToBeginningOfLineAndModifySelection)      \
-  V(kMoveToBeginningOfParagraph)                   \
-  V(kMoveToBeginningOfParagraphAndModifySelection) \
-  V(kMoveToBeginningOfSentence)                    \
-  V(kMoveToBeginningOfSentenceAndModifySelection)  \
-  V(kMoveToEndOfDocument)                          \
-  V(kMoveToEndOfDocumentAndModifySelection)        \
-  V(kMoveToEndOfLine)                              \
-  V(kMoveToEndOfLineAndModifySelection)            \
-  V(kMoveToEndOfParagraph)                         \
-  V(kMoveToEndOfParagraphAndModifySelection)       \
-  V(kMoveToEndOfSentence)                          \
-  V(kMoveToEndOfSentenceAndModifySelection)        \
-  V(kMoveToLeftEndOfLine)                          \
-  V(kMoveToLeftEndOfLineAndModifySelection)        \
-  V(kMoveToRightEndOfLine)                         \
-  V(kMoveToRightEndOfLineAndModifySelection)       \
-  V(kMoveUp)                                       \
-  V(kMoveUpAndModifySelection)                     \
-  V(kMoveWordBackward)                             \
-  V(kMoveWordBackwardAndModifySelection)           \
-  V(kMoveWordForward)                              \
-  V(kMoveWordForwardAndModifySelection)            \
-  V(kMoveWordLeft)                                 \
-  V(kMoveWordLeftAndModifySelection)               \
-  V(kMoveWordRight)                                \
-  V(kMoveWordRightAndModifySelection)              \
-  V(kOutdent)                                      \
-  V(kOverWrite)                                    \
-  V(kPaste)                                        \
-  V(kPasteAndMatchStyle)                           \
-  V(kPasteGlobalSelection)                         \
-  V(kPrint)                                        \
-  V(kRedo)                                         \
-  V(kRemoveFormat)                                 \
-  V(kScrollLineDown)                               \
-  V(kScrollLineUp)                                 \
-  V(kScrollPageBackward)                           \
-  V(kScrollPageForward)                            \
-  V(kScrollToBeginningOfDocument)                  \
-  V(kScrollToEndOfDocument)                        \
-  V(kSelectAll)                                    \
-  V(kSelectLine)                                   \
-  V(kSelectParagraph)                              \
-  V(kSelectSentence)                               \
-  V(kSelectToMark)                                 \
-  V(kSelectWord)                                   \
-  V(kSetMark)                                      \
-  V(kStrikethrough)                                \
-  V(kStyleWithCSS)                                 \
-  V(kSubscript)                                    \
-  V(kSuperscript)                                  \
-  V(kSwapWithMark)                                 \
-  V(kToggleBold)                                   \
-  V(kToggleItalic)                                 \
-  V(kToggleUnderline)                              \
-  V(kTranspose)                                    \
-  V(kUnderline)                                    \
-  V(kUndo)                                         \
-  V(kUnlink)                                       \
-  V(kUnscript)                                     \
-  V(kUnselect)                                     \
-  V(kUseCSS)                                       \
-  V(kYank)                                         \
-  V(kYankAndSelect)
+  V(AlignCenter)                                  \
+  V(AlignJustified)                               \
+  V(AlignLeft)                                    \
+  V(AlignRight)                                   \
+  V(BackColor)                                    \
+  V(BackwardDelete)                               \
+  V(Bold)                                         \
+  V(Copy)                                         \
+  V(CreateLink)                                   \
+  V(Cut)                                          \
+  V(DefaultParagraphSeparator)                    \
+  V(Delete)                                       \
+  V(DeleteBackward)                               \
+  V(DeleteBackwardByDecomposingPreviousCharacter) \
+  V(DeleteForward)                                \
+  V(DeleteToBeginningOfLine)                      \
+  V(DeleteToBeginningOfParagraph)                 \
+  V(DeleteToEndOfLine)                            \
+  V(DeleteToEndOfParagraph)                       \
+  V(DeleteToMark)                                 \
+  V(DeleteWordBackward)                           \
+  V(DeleteWordForward)                            \
+  V(FindString)                                   \
+  V(FontName)                                     \
+  V(FontSize)                                     \
+  V(FontSizeDelta)                                \
+  V(ForeColor)                                    \
+  V(FormatBlock)                                  \
+  V(ForwardDelete)                                \
+  V(HiliteColor)                                  \
+  V(IgnoreSpelling)                               \
+  V(Indent)                                       \
+  V(InsertBacktab)                                \
+  V(InsertHorizontalRule)                         \
+  V(InsertHTML)                                   \
+  V(InsertImage)                                  \
+  V(InsertLineBreak)                              \
+  V(InsertNewline)                                \
+  V(InsertNewlineInQuotedContent)                 \
+  V(InsertOrderedList)                            \
+  V(InsertParagraph)                              \
+  V(InsertTab)                                    \
+  V(InsertText)                                   \
+  V(InsertUnorderedList)                          \
+  V(Italic)                                       \
+  V(JustifyCenter)                                \
+  V(JustifyFull)                                  \
+  V(JustifyLeft)                                  \
+  V(JustifyNone)                                  \
+  V(JustifyRight)                                 \
+  V(MakeTextWritingDirectionLeftToRight)          \
+  V(MakeTextWritingDirectionNatural)              \
+  V(MakeTextWritingDirectionRightToLeft)          \
+  V(MoveBackward)                                 \
+  V(MoveBackwardAndModifySelection)               \
+  V(MoveDown)                                     \
+  V(MoveDownAndModifySelection)                   \
+  V(MoveForward)                                  \
+  V(MoveForwardAndModifySelection)                \
+  V(MoveLeft)                                     \
+  V(MoveLeftAndModifySelection)                   \
+  V(MovePageDown)                                 \
+  V(MovePageDownAndModifySelection)               \
+  V(MovePageUp)                                   \
+  V(MovePageUpAndModifySelection)                 \
+  V(MoveParagraphBackward)                        \
+  V(MoveParagraphBackwardAndModifySelection)      \
+  V(MoveParagraphForward)                         \
+  V(MoveParagraphForwardAndModifySelection)       \
+  V(MoveRight)                                    \
+  V(MoveRightAndModifySelection)                  \
+  V(MoveToBeginningOfDocument)                    \
+  V(MoveToBeginningOfDocumentAndModifySelection)  \
+  V(MoveToBeginningOfLine)                        \
+  V(MoveToBeginningOfLineAndModifySelection)      \
+  V(MoveToBeginningOfParagraph)                   \
+  V(MoveToBeginningOfParagraphAndModifySelection) \
+  V(MoveToBeginningOfSentence)                    \
+  V(MoveToBeginningOfSentenceAndModifySelection)  \
+  V(MoveToEndOfDocument)                          \
+  V(MoveToEndOfDocumentAndModifySelection)        \
+  V(MoveToEndOfLine)                              \
+  V(MoveToEndOfLineAndModifySelection)            \
+  V(MoveToEndOfParagraph)                         \
+  V(MoveToEndOfParagraphAndModifySelection)       \
+  V(MoveToEndOfSentence)                          \
+  V(MoveToEndOfSentenceAndModifySelection)        \
+  V(MoveToLeftEndOfLine)                          \
+  V(MoveToLeftEndOfLineAndModifySelection)        \
+  V(MoveToRightEndOfLine)                         \
+  V(MoveToRightEndOfLineAndModifySelection)       \
+  V(MoveUp)                                       \
+  V(MoveUpAndModifySelection)                     \
+  V(MoveWordBackward)                             \
+  V(MoveWordBackwardAndModifySelection)           \
+  V(MoveWordForward)                              \
+  V(MoveWordForwardAndModifySelection)            \
+  V(MoveWordLeft)                                 \
+  V(MoveWordLeftAndModifySelection)               \
+  V(MoveWordRight)                                \
+  V(MoveWordRightAndModifySelection)              \
+  V(Outdent)                                      \
+  V(OverWrite)                                    \
+  V(Paste)                                        \
+  V(PasteAndMatchStyle)                           \
+  V(PasteGlobalSelection)                         \
+  V(Print)                                        \
+  V(Redo)                                         \
+  V(RemoveFormat)                                 \
+  V(ScrollLineDown)                               \
+  V(ScrollLineUp)                                 \
+  V(ScrollPageBackward)                           \
+  V(ScrollPageForward)                            \
+  V(ScrollToBeginningOfDocument)                  \
+  V(ScrollToEndOfDocument)                        \
+  V(SelectAll)                                    \
+  V(SelectLine)                                   \
+  V(SelectParagraph)                              \
+  V(SelectSentence)                               \
+  V(SelectToMark)                                 \
+  V(SelectWord)                                   \
+  V(SetMark)                                      \
+  V(Strikethrough)                                \
+  V(StyleWithCSS)                                 \
+  V(Subscript)                                    \
+  V(Superscript)                                  \
+  V(SwapWithMark)                                 \
+  V(ToggleBold)                                   \
+  V(ToggleItalic)                                 \
+  V(ToggleUnderline)                              \
+  V(Transpose)                                    \
+  V(Underline)                                    \
+  V(Undo)                                         \
+  V(Unlink)                                       \
+  V(Unscript)                                     \
+  V(Unselect)                                     \
+  V(UseCSS)                                       \
+  V(Yank)                                         \
+  V(YankAndSelect)
 
 }  // namespace blink
 
diff --git a/third_party/WebKit/Source/core/editing/serializers/MarkupAccumulator.cpp b/third_party/WebKit/Source/core/editing/serializers/MarkupAccumulator.cpp
index 8ca9beb43bd9..408e70201827 100644
--- a/third_party/WebKit/Source/core/editing/serializers/MarkupAccumulator.cpp
+++ b/third_party/WebKit/Source/core/editing/serializers/MarkupAccumulator.cpp
@@ -202,7 +202,7 @@ String SerializeNodes(MarkupAccumulator& accumulator,
   return accumulator.ToString();
 }
 
-template String serializeNodes<EditingStrategy>(MarkupAccumulator&,
+template String SerializeNodes<EditingStrategy>(MarkupAccumulator&,
                                                 Node&,
                                                 EChildrenOnly);
 
diff --git a/third_party/WebKit/Source/core/editing/serializers/MarkupAccumulator.h b/third_party/WebKit/Source/core/editing/serializers/MarkupAccumulator.h
index 9064252faa9d..4ce1662b8684 100644
--- a/third_party/WebKit/Source/core/editing/serializers/MarkupAccumulator.h
+++ b/third_party/WebKit/Source/core/editing/serializers/MarkupAccumulator.h
@@ -83,7 +83,7 @@ class MarkupAccumulator {
 template <typename Strategy>
 String SerializeNodes(MarkupAccumulator&, Node&, EChildrenOnly);
 
-extern template String serializeNodes<EditingStrategy>(MarkupAccumulator&,
+extern template String SerializeNodes<EditingStrategy>(MarkupAccumulator&,
                                                        Node&,
                                                        EChildrenOnly);
 
diff --git a/third_party/WebKit/Source/core/events/EventTarget.h b/third_party/WebKit/Source/core/events/EventTarget.h
index 3251d895e7be..45f2e4ba4bf7 100644
--- a/third_party/WebKit/Source/core/events/EventTarget.h
+++ b/third_party/WebKit/Source/core/events/EventTarget.h
@@ -243,10 +243,10 @@ class GC_PLUGIN_IGNORE("513199") CORE_EXPORT EventTargetWithInlineData
 // FIXME: These macros should be split into separate DEFINE and DECLARE
 // macros to avoid causing so many header includes.
 #define DEFINE_ATTRIBUTE_EVENT_LISTENER(attribute)                        \
-  EventListener* On##attribute() {                                        \
+  EventListener* on##attribute() {                                        \
     return this->GetAttributeEventListener(EventTypeNames::attribute);    \
   }                                                                       \
-  void SetOn##attribute(EventListener* listener) {                        \
+  void setOn##attribute(EventListener* listener) {                        \
     this->SetAttributeEventListener(EventTypeNames::attribute, listener); \
   }
 
diff --git a/third_party/WebKit/Source/core/frame/Settings.json5 b/third_party/WebKit/Source/core/frame/Settings.json5
index fb80e35663d9..d9b7c509b3fd 100644
--- a/third_party/WebKit/Source/core/frame/Settings.json5
+++ b/third_party/WebKit/Source/core/frame/Settings.json5
@@ -106,7 +106,7 @@
 
     {
       name: "editingBehaviorType",
-      initial: "editingBehaviorTypeForPlatform()",
+      initial: "EditingBehaviorTypeForPlatform()",
       type: "EditingBehaviorType",
     },
 
@@ -356,7 +356,7 @@
     },
     {
       name: "selectTrailingWhitespaceEnabled",
-      initial: "defaultSelectTrailingWhitespaceEnabled",
+      initial: "kDefaultSelectTrailingWhitespaceEnabled",
     },
 
     {
@@ -366,7 +366,7 @@
 
     {
       name: "selectionStrategy",
-      initial: "SelectionStrategy::Character",
+      initial: "SelectionStrategy::kCharacter",
       type: "SelectionStrategy",
     },
 
@@ -504,7 +504,7 @@
     },
     {
       name: "displayModeOverride",
-      initial: "WebDisplayModeUndefined",
+      initial: "kWebDisplayModeUndefined",
       invalidate: "MediaQuery",
       type: "WebDisplayMode",
     },
@@ -523,7 +523,7 @@
     },
     {
       name: "imageAnimationPolicy",
-      initial: "ImageAnimationPolicyAllowed",
+      initial: "kImageAnimationPolicyAllowed",
       type: "ImageAnimationPolicy",
     },
 
@@ -631,14 +631,14 @@
     // V8 supports different types of caching. Used by V8 bindings.
     {
       name: "v8CacheOptions",
-      initial: "V8CacheOptionsDefault",
+      initial: "kV8CacheOptionsDefault",
       type: "V8CacheOptions",
     },
 
     // V8 code cache for CacheStorage supports three types of strategies (none, normal and aggressive).
     {
       name: "v8CacheStrategiesForCacheStorage",
-      initial: "V8CacheStrategiesForCacheStorage::Default",
+      initial: "V8CacheStrategiesForCacheStorage::kDefault",
       type: "V8CacheStrategiesForCacheStorage",
     },
 
@@ -647,13 +647,13 @@
     // has pointerType coarse *and* fine).
     {
       name: "availablePointerTypes",
-      initial: "PointerTypeNone",
+      initial: "kPointerTypeNone",
       invalidate: "MediaQuery",
       type: "int",
     },
     {
       name: "availableHoverTypes",
-      initial: "HoverTypeNone",
+      initial: "kHoverTypeNone",
       invalidate: "MediaQuery",
       type: "int",
     },
@@ -661,13 +661,13 @@
     // These values specify properties of the user's primary pointing device only.
     {
       name: "primaryPointerType",
-      initial: "PointerTypeNone",
+      initial: "kPointerTypeNone",
       invalidate: "MediaQuery",
       type: "PointerType",
     },
     {
       name: "primaryHoverType",
-      initial: "HoverTypeNone",
+      initial: "kHoverTypeNone",
       invalidate: "MediaQuery",
       type: "HoverType",
     },
@@ -744,7 +744,7 @@
     // used by content embedders to specify custom style on certain platforms.
     {
       name: "viewportStyle",
-      initial: "WebViewportStyle::Default",
+      initial: "WebViewportStyle::kDefault",
       invalidate: "ViewportRule",
       type: "WebViewportStyle",
     },
@@ -753,7 +753,7 @@
     // by this setting.
     {
       name: "textTrackKindUserPreference",
-      initial: "TextTrackKindUserPreference::Default",
+      initial: "TextTrackKindUserPreference::kDefault",
       invalidate: "TextTrackKindUserPreference",
       type: "TextTrackKindUserPreference",
     },
@@ -803,7 +803,7 @@
 
     {
       name: "progressBarCompletion",
-      initial: "ProgressBarCompletion::LoadEvent",
+      initial: "ProgressBarCompletion::kLoadEvent",
       type: "ProgressBarCompletion",
     },
 
@@ -854,7 +854,7 @@
     // to enable it have been shipped.
     {
       name: "passiveListenerDefault",
-      initial: "PassiveListenerDefault::False",
+      initial: "PassiveListenerDefault::kFalse",
       type: "PassiveListenerDefault",
     },
 
diff --git a/third_party/WebKit/Source/core/frame/SubresourceIntegrity.cpp b/third_party/WebKit/Source/core/frame/SubresourceIntegrity.cpp
index e01d1744b991..7be8232ddbc8 100644
--- a/third_party/WebKit/Source/core/frame/SubresourceIntegrity.cpp
+++ b/third_party/WebKit/Source/core/frame/SubresourceIntegrity.cpp
@@ -338,9 +338,9 @@ SubresourceIntegrity::ParseIntegrityAttribute(
     WTF::String digest;
     HashAlgorithm algorithm;
 
-    skipWhile<UChar, isASCIISpace>(position, end);
+    skipWhile<UChar, IsASCIISpace>(position, end);
     current_integrity_end = position;
-    skipUntil<UChar, isASCIISpace>(current_integrity_end, end);
+    skipUntil<UChar, IsASCIISpace>(current_integrity_end, end);
 
     // Algorithm parsing errors are non-fatal (the subresource should
     // still be loaded) because strong hash algorithms should be used
@@ -351,7 +351,7 @@ SubresourceIntegrity::ParseIntegrityAttribute(
     if (parse_result == kAlgorithmUnknown) {
       // Unknown hash algorithms are treated as if they're not present,
       // and thus are not marked as an error, they're just skipped.
-      skipUntil<UChar, isASCIISpace>(position, end);
+      skipUntil<UChar, IsASCIISpace>(position, end);
       if (execution_context) {
         LogErrorToConsole("Error parsing 'integrity' attribute ('" + attribute +
                               "'). The specified hash algorithm must be one of "
@@ -366,7 +366,7 @@ SubresourceIntegrity::ParseIntegrityAttribute(
 
     if (parse_result == kAlgorithmUnparsable) {
       error = true;
-      skipUntil<UChar, isASCIISpace>(position, end);
+      skipUntil<UChar, IsASCIISpace>(position, end);
       if (execution_context) {
         LogErrorToConsole("Error parsing 'integrity' attribute ('" + attribute +
                               "'). The hash algorithm must be one of 'sha256', "
@@ -384,7 +384,7 @@ SubresourceIntegrity::ParseIntegrityAttribute(
 
     if (!ParseDigest(position, current_integrity_end, digest)) {
       error = true;
-      skipUntil<UChar, isASCIISpace>(position, end);
+      skipUntil<UChar, IsASCIISpace>(position, end);
       if (execution_context) {
         LogErrorToConsole(
             "Error parsing 'integrity' attribute ('" + attribute +
diff --git a/third_party/WebKit/Source/core/frame/csp/CSPDirectiveList.cpp b/third_party/WebKit/Source/core/frame/csp/CSPDirectiveList.cpp
index 86b460e05b40..b1ea8ce0757a 100644
--- a/third_party/WebKit/Source/core/frame/csp/CSPDirectiveList.cpp
+++ b/third_party/WebKit/Source/core/frame/csp/CSPDirectiveList.cpp
@@ -42,7 +42,7 @@ String GetSha256String(const String& content) {
 
 template <typename CharType>
 inline bool IsASCIIAlphanumericOrHyphen(CharType c) {
-  return isASCIIAlphanumeric(c) || c == '-';
+  return IsASCIIAlphanumeric(c) || c == '-';
 }
 
 ContentSecurityPolicyHashAlgorithm ConvertHashAlgorithmToCSPHashAlgorithm(
@@ -981,7 +981,7 @@ bool CSPDirectiveList::ParseDirective(const UChar* begin,
   ASSERT(value.IsEmpty());
 
   const UChar* position = begin;
-  skipWhile<UChar, isASCIISpace>(position, end);
+  skipWhile<UChar, IsASCIISpace>(position, end);
 
   // Empty directive (e.g. ";;;"). Exit early.
   if (position == end)
@@ -1003,14 +1003,14 @@ bool CSPDirectiveList::ParseDirective(const UChar* begin,
   if (position == end)
     return true;
 
-  if (!skipExactly<UChar, isASCIISpace>(position, end)) {
+  if (!skipExactly<UChar, IsASCIISpace>(position, end)) {
     skipWhile<UChar, IsNotASCIISpace>(position, end);
     policy_->ReportUnsupportedDirective(
         String(name_begin, position - name_begin));
     return false;
   }
 
-  skipWhile<UChar, isASCIISpace>(position, end);
+  skipWhile<UChar, IsASCIISpace>(position, end);
 
   const UChar* value_begin = position;
   skipWhile<UChar, IsCSPDirectiveValueCharacter>(position, end);
@@ -1044,7 +1044,7 @@ void CSPDirectiveList::ParseRequireSRIFor(const String& name,
   const UChar* end = position + characters.size();
 
   while (position < end) {
-    skipWhile<UChar, isASCIISpace>(position, end);
+    skipWhile<UChar, IsASCIISpace>(position, end);
 
     const UChar* token_begin = position;
     skipWhile<UChar, IsNotASCIISpace>(position, end);
@@ -1103,7 +1103,7 @@ void CSPDirectiveList::ParseReportURI(const String& name, const String& value) {
   const UChar* end = position + characters.size();
 
   while (position < end) {
-    skipWhile<UChar, isASCIISpace>(position, end);
+    skipWhile<UChar, IsASCIISpace>(position, end);
 
     const UChar* url_begin = position;
     skipWhile<UChar, IsNotASCIISpace>(position, end);
diff --git a/third_party/WebKit/Source/core/frame/csp/MediaListDirective.cpp b/third_party/WebKit/Source/core/frame/csp/MediaListDirective.cpp
index dec89e08e0b3..92d163a45cb9 100644
--- a/third_party/WebKit/Source/core/frame/csp/MediaListDirective.cpp
+++ b/third_party/WebKit/Source/core/frame/csp/MediaListDirective.cpp
@@ -39,7 +39,7 @@ void MediaListDirective::Parse(const UChar* begin, const UChar* end) {
   while (position < end) {
     // _____ OR _____mime1/mime1
     // ^        ^
-    skipWhile<UChar, isASCIISpace>(position, end);
+    skipWhile<UChar, IsASCIISpace>(position, end);
     if (position == end)
       return;
 
diff --git a/third_party/WebKit/Source/core/frame/csp/SourceListDirective.cpp b/third_party/WebKit/Source/core/frame/csp/SourceListDirective.cpp
index 8eb452f1296a..b6a6d07cc55c 100644
--- a/third_party/WebKit/Source/core/frame/csp/SourceListDirective.cpp
+++ b/third_party/WebKit/Source/core/frame/csp/SourceListDirective.cpp
@@ -37,14 +37,14 @@ SourceListDirective::SourceListDirective(const String& name,
 }
 
 static bool IsSourceListNone(const UChar* begin, const UChar* end) {
-  skipWhile<UChar, isASCIISpace>(begin, end);
+  skipWhile<UChar, IsASCIISpace>(begin, end);
 
   const UChar* position = begin;
   skipWhile<UChar, IsSourceCharacter>(position, end);
   if (!EqualIgnoringCase("'none'", StringView(begin, position - begin)))
     return false;
 
-  skipWhile<UChar, isASCIISpace>(position, end);
+  skipWhile<UChar, IsASCIISpace>(position, end);
   if (position != end)
     return false;
 
@@ -128,7 +128,7 @@ void SourceListDirective::Parse(const UChar* begin, const UChar* end) {
 
   const UChar* position = begin;
   while (position < end) {
-    skipWhile<UChar, isASCIISpace>(position, end);
+    skipWhile<UChar, IsASCIISpace>(position, end);
     if (position == end)
       return;
 
@@ -422,7 +422,7 @@ bool SourceListDirective::ParseScheme(const UChar* begin,
 
   const UChar* position = begin;
 
-  if (!skipExactly<UChar, isASCIIAlpha>(position, end))
+  if (!skipExactly<UChar, IsASCIIAlpha>(position, end))
     return false;
 
   skipWhile<UChar, IsSchemeContinuationCharacter>(position, end);
@@ -531,7 +531,7 @@ bool SourceListDirective::ParsePort(
   }
 
   const UChar* position = begin;
-  skipWhile<UChar, isASCIIDigit>(position, end);
+  skipWhile<UChar, IsASCIIDigit>(position, end);
 
   if (position != end)
     return false;
diff --git a/third_party/WebKit/Source/core/html/HTMLCollection.h b/third_party/WebKit/Source/core/html/HTMLCollection.h
index 513aa1064d34..2b4489b1fa2f 100644
--- a/third_party/WebKit/Source/core/html/HTMLCollection.h
+++ b/third_party/WebKit/Source/core/html/HTMLCollection.h
@@ -42,7 +42,7 @@ class HTMLCollectionIterator {
  public:
   explicit HTMLCollectionIterator(const CollectionType* collection)
       : collection_(collection) {}
-  NodeType* operator*() { return collection_->Item(index_); }
+  NodeType* operator*() { return collection_->item(index_); }
 
   void operator++() {
     if (index_ < collection_->length())
diff --git a/third_party/WebKit/Source/core/html/HTMLDimension.cpp b/third_party/WebKit/Source/core/html/HTMLDimension.cpp
index a41ec91d0832..5f87f3fd9fe7 100644
--- a/third_party/WebKit/Source/core/html/HTMLDimension.cpp
+++ b/third_party/WebKit/Source/core/html/HTMLDimension.cpp
@@ -155,14 +155,14 @@ static bool ParseDimensionValue(const CharacterType* current,
   skipWhile<CharacterType, IsHTMLSpace>(current, end);
   // Deviation: HTML allows '+' here.
   const CharacterType* number_start = current;
-  if (!skipExactly<CharacterType, isASCIIDigit>(current, end))
+  if (!skipExactly<CharacterType, IsASCIIDigit>(current, end))
     return false;
-  skipWhile<CharacterType, isASCIIDigit>(current, end);
+  skipWhile<CharacterType, IsASCIIDigit>(current, end);
   if (skipExactly<CharacterType>(current, end, '.')) {
     // Deviation: HTML requires a digit after the full stop to be able to treat
     // the value as a percentage (if not, the '.' will considered "garbage",
     // yielding a regular length.) Gecko and Edge does not.
-    skipWhile<CharacterType, isASCIIDigit>(current, end);
+    skipWhile<CharacterType, IsASCIIDigit>(current, end);
   }
   bool ok;
   double value = CharactersToDouble(number_start, current - number_start, &ok);
diff --git a/third_party/WebKit/Source/core/html/parser/create-html-entity-table b/third_party/WebKit/Source/core/html/parser/create-html-entity-table
index f0a7918a2b9f..33bb73c77f1e 100755
--- a/third_party/WebKit/Source/core/html/parser/create-html-entity-table
+++ b/third_party/WebKit/Source/core/html/parser/create-html-entity-table
@@ -199,17 +199,17 @@ for letter in string.ascii_lowercase:
 output_file.write("%d\n" % entity_count)
 output_file.write("""};
 
-const LChar* HTMLEntityTable::entityString(const HTMLEntityTableEntry& entry)
+const LChar* HTMLEntityTable::EntityString(const HTMLEntityTableEntry& entry)
 {
-    return staticEntityStringStorage + entry.entityOffset;
+    return staticEntityStringStorage + entry.entity_offset;
 }
 
-LChar HTMLEntityTableEntry::lastCharacter() const
+LChar HTMLEntityTableEntry::LastCharacter() const
 {
-    return HTMLEntityTable::entityString(*this)[length - 1];
+    return HTMLEntityTable::EntityString(*this)[length - 1];
 }
 
-const HTMLEntityTableEntry* HTMLEntityTable::firstEntryStartingWith(UChar c)
+const HTMLEntityTableEntry* HTMLEntityTable::FirstEntryStartingWith(UChar c)
 {
     if (c >= 'A' && c <= 'Z')
         return &staticEntityTable[uppercaseOffset[c - 'A']];
@@ -218,7 +218,7 @@ const HTMLEntityTableEntry* HTMLEntityTable::firstEntryStartingWith(UChar c)
     return 0;
 }
 
-const HTMLEntityTableEntry* HTMLEntityTable::lastEntryStartingWith(UChar c)
+const HTMLEntityTableEntry* HTMLEntityTable::LastEntryStartingWith(UChar c)
 {
     if (c >= 'A' && c <= 'Z')
         return &staticEntityTable[uppercaseOffset[c - 'A' + 1]] - 1;
@@ -227,12 +227,12 @@ const HTMLEntityTableEntry* HTMLEntityTable::lastEntryStartingWith(UChar c)
     return 0;
 }
 
-const HTMLEntityTableEntry* HTMLEntityTable::firstEntry()
+const HTMLEntityTableEntry* HTMLEntityTable::FirstEntry()
 {
     return &staticEntityTable[0];
 }
 
-const HTMLEntityTableEntry* HTMLEntityTable::lastEntry()
+const HTMLEntityTableEntry* HTMLEntityTable::LastEntry()
 {
     return &staticEntityTable[%s - 1];
 }
diff --git a/third_party/WebKit/Source/core/html/track/vtt/VTTScanner.cpp b/third_party/WebKit/Source/core/html/track/vtt/VTTScanner.cpp
index 5a9bf4eb2980..cb32813f65db 100644
--- a/third_party/WebKit/Source/core/html/track/vtt/VTTScanner.cpp
+++ b/third_party/WebKit/Source/core/html/track/vtt/VTTScanner.cpp
@@ -110,7 +110,7 @@ String VTTScanner::RestOfInputAsString() {
 }
 
 unsigned VTTScanner::ScanDigits(int& number) {
-  Run run_of_digits = CollectWhile<isASCIIDigit>();
+  Run run_of_digits = CollectWhile<IsASCIIDigit>();
   if (run_of_digits.IsEmpty()) {
     number = 0;
     return 0;
@@ -134,11 +134,11 @@ unsigned VTTScanner::ScanDigits(int& number) {
 }
 
 bool VTTScanner::ScanFloat(float& number) {
-  Run integer_run = CollectWhile<isASCIIDigit>();
+  Run integer_run = CollectWhile<IsASCIIDigit>();
   SeekTo(integer_run.end());
   Run decimal_run(GetPosition(), GetPosition(), is8_bit_);
   if (Scan('.')) {
-    decimal_run = CollectWhile<isASCIIDigit>();
+    decimal_run = CollectWhile<IsASCIIDigit>();
     SeekTo(decimal_run.end());
   }
 
diff --git a/third_party/WebKit/Source/core/inspector/InspectorCSSAgent.cpp b/third_party/WebKit/Source/core/inspector/InspectorCSSAgent.cpp
index 340d50764ea0..b4bb86bc4725 100644
--- a/third_party/WebKit/Source/core/inspector/InspectorCSSAgent.cpp
+++ b/third_party/WebKit/Source/core/inspector/InspectorCSSAgent.cpp
@@ -997,7 +997,7 @@ static CSSKeyframesRule* FindKeyframesRule(CSSRuleCollection* css_rules,
                                            StyleRuleKeyframes* keyframes_rule) {
   CSSKeyframesRule* result = 0;
   for (unsigned j = 0; css_rules && j < css_rules->length() && !result; ++j) {
-    CSSRule* css_rule = css_rules->Item(j);
+    CSSRule* css_rule = css_rules->item(j);
     if (css_rule->type() == CSSRule::kKeyframesRule) {
       CSSKeyframesRule* css_style_rule = ToCSSKeyframesRule(css_rule);
       if (css_style_rule->Keyframes() == keyframes_rule)
diff --git a/third_party/WebKit/Source/core/inspector/InspectorStyleSheet.cpp b/third_party/WebKit/Source/core/inspector/InspectorStyleSheet.cpp
index 5a443d8849e0..ade7b996934e 100644
--- a/third_party/WebKit/Source/core/inspector/InspectorStyleSheet.cpp
+++ b/third_party/WebKit/Source/core/inspector/InspectorStyleSheet.cpp
@@ -514,7 +514,7 @@ void CollectFlatRules(RuleList rule_list, CSSRuleVector* result) {
     return;
 
   for (unsigned i = 0, size = rule_list->length(); i < size; ++i) {
-    CSSRule* rule = rule_list->Item(i);
+    CSSRule* rule = rule_list->item(i);
 
     // The result->append()'ed types should be exactly the same as in
     // flattenSourceData().
diff --git a/third_party/WebKit/Source/core/inspector/InspectorTraceEvents.cpp b/third_party/WebKit/Source/core/inspector/InspectorTraceEvents.cpp
index a900cd9c3fa4..f1b3366f4800 100644
--- a/third_party/WebKit/Source/core/inspector/InspectorTraceEvents.cpp
+++ b/third_party/WebKit/Source/core/inspector/InspectorTraceEvents.cpp
@@ -219,96 +219,96 @@ void SetNodeInfo(TracedValue* value,
 const char* PseudoTypeToString(CSSSelector::PseudoType pseudo_type) {
   switch (pseudo_type) {
 #define DEFINE_STRING_MAPPING(pseudoType) \
-  case CSSSelector::pseudoType:           \
+  case CSSSelector::k##pseudoType:           \
     return #pseudoType;
-    DEFINE_STRING_MAPPING(kPseudoUnknown)
-    DEFINE_STRING_MAPPING(kPseudoEmpty)
-    DEFINE_STRING_MAPPING(kPseudoFirstChild)
-    DEFINE_STRING_MAPPING(kPseudoFirstOfType)
-    DEFINE_STRING_MAPPING(kPseudoLastChild)
-    DEFINE_STRING_MAPPING(kPseudoLastOfType)
-    DEFINE_STRING_MAPPING(kPseudoOnlyChild)
-    DEFINE_STRING_MAPPING(kPseudoOnlyOfType)
-    DEFINE_STRING_MAPPING(kPseudoFirstLine)
-    DEFINE_STRING_MAPPING(kPseudoFirstLetter)
-    DEFINE_STRING_MAPPING(kPseudoNthChild)
-    DEFINE_STRING_MAPPING(kPseudoNthOfType)
-    DEFINE_STRING_MAPPING(kPseudoNthLastChild)
-    DEFINE_STRING_MAPPING(kPseudoNthLastOfType)
-    DEFINE_STRING_MAPPING(kPseudoLink)
-    DEFINE_STRING_MAPPING(kPseudoVisited)
-    DEFINE_STRING_MAPPING(kPseudoAny)
-    DEFINE_STRING_MAPPING(kPseudoAnyLink)
-    DEFINE_STRING_MAPPING(kPseudoAutofill)
-    DEFINE_STRING_MAPPING(kPseudoHover)
-    DEFINE_STRING_MAPPING(kPseudoDrag)
-    DEFINE_STRING_MAPPING(kPseudoFocus)
-    DEFINE_STRING_MAPPING(kPseudoActive)
-    DEFINE_STRING_MAPPING(kPseudoChecked)
-    DEFINE_STRING_MAPPING(kPseudoEnabled)
-    DEFINE_STRING_MAPPING(kPseudoFullPageMedia)
-    DEFINE_STRING_MAPPING(kPseudoDefault)
-    DEFINE_STRING_MAPPING(kPseudoDisabled)
-    DEFINE_STRING_MAPPING(kPseudoOptional)
-    DEFINE_STRING_MAPPING(kPseudoPlaceholderShown)
-    DEFINE_STRING_MAPPING(kPseudoRequired)
-    DEFINE_STRING_MAPPING(kPseudoReadOnly)
-    DEFINE_STRING_MAPPING(kPseudoReadWrite)
-    DEFINE_STRING_MAPPING(kPseudoValid)
-    DEFINE_STRING_MAPPING(kPseudoInvalid)
-    DEFINE_STRING_MAPPING(kPseudoIndeterminate)
-    DEFINE_STRING_MAPPING(kPseudoTarget)
-    DEFINE_STRING_MAPPING(kPseudoBefore)
-    DEFINE_STRING_MAPPING(kPseudoAfter)
-    DEFINE_STRING_MAPPING(kPseudoBackdrop)
-    DEFINE_STRING_MAPPING(kPseudoLang)
-    DEFINE_STRING_MAPPING(kPseudoNot)
-    DEFINE_STRING_MAPPING(kPseudoPlaceholder)
-    DEFINE_STRING_MAPPING(kPseudoResizer)
-    DEFINE_STRING_MAPPING(kPseudoRoot)
-    DEFINE_STRING_MAPPING(kPseudoScope)
-    DEFINE_STRING_MAPPING(kPseudoScrollbar)
-    DEFINE_STRING_MAPPING(kPseudoScrollbarButton)
-    DEFINE_STRING_MAPPING(kPseudoScrollbarCorner)
-    DEFINE_STRING_MAPPING(kPseudoScrollbarThumb)
-    DEFINE_STRING_MAPPING(kPseudoScrollbarTrack)
-    DEFINE_STRING_MAPPING(kPseudoScrollbarTrackPiece)
-    DEFINE_STRING_MAPPING(kPseudoWindowInactive)
-    DEFINE_STRING_MAPPING(kPseudoCornerPresent)
-    DEFINE_STRING_MAPPING(kPseudoDecrement)
-    DEFINE_STRING_MAPPING(kPseudoIncrement)
-    DEFINE_STRING_MAPPING(kPseudoHorizontal)
-    DEFINE_STRING_MAPPING(kPseudoVertical)
-    DEFINE_STRING_MAPPING(kPseudoStart)
-    DEFINE_STRING_MAPPING(kPseudoEnd)
-    DEFINE_STRING_MAPPING(kPseudoDoubleButton)
-    DEFINE_STRING_MAPPING(kPseudoSingleButton)
-    DEFINE_STRING_MAPPING(kPseudoNoButton)
-    DEFINE_STRING_MAPPING(kPseudoSelection)
-    DEFINE_STRING_MAPPING(kPseudoLeftPage)
-    DEFINE_STRING_MAPPING(kPseudoRightPage)
-    DEFINE_STRING_MAPPING(kPseudoFirstPage)
-    DEFINE_STRING_MAPPING(kPseudoFullScreen)
-    DEFINE_STRING_MAPPING(kPseudoFullScreenAncestor)
-    DEFINE_STRING_MAPPING(kPseudoInRange)
-    DEFINE_STRING_MAPPING(kPseudoOutOfRange)
-    DEFINE_STRING_MAPPING(kPseudoWebKitCustomElement)
-    DEFINE_STRING_MAPPING(kPseudoBlinkInternalElement)
-    DEFINE_STRING_MAPPING(kPseudoCue)
-    DEFINE_STRING_MAPPING(kPseudoFutureCue)
-    DEFINE_STRING_MAPPING(kPseudoPastCue)
-    DEFINE_STRING_MAPPING(kPseudoUnresolved)
-    DEFINE_STRING_MAPPING(kPseudoDefined)
-    DEFINE_STRING_MAPPING(kPseudoContent)
-    DEFINE_STRING_MAPPING(kPseudoHost)
-    DEFINE_STRING_MAPPING(kPseudoHostContext)
-    DEFINE_STRING_MAPPING(kPseudoShadow)
-    DEFINE_STRING_MAPPING(kPseudoSlotted)
-    DEFINE_STRING_MAPPING(kPseudoSpatialNavigationFocus)
-    DEFINE_STRING_MAPPING(kPseudoListBox)
-    DEFINE_STRING_MAPPING(kPseudoHostHasAppearance)
-    DEFINE_STRING_MAPPING(kPseudoVideoPersistent)
-    DEFINE_STRING_MAPPING(kPseudoVideoPersistentAncestor)
+    DEFINE_STRING_MAPPING(PseudoUnknown)
+    DEFINE_STRING_MAPPING(PseudoEmpty)
+    DEFINE_STRING_MAPPING(PseudoFirstChild)
+    DEFINE_STRING_MAPPING(PseudoFirstOfType)
+    DEFINE_STRING_MAPPING(PseudoLastChild)
+    DEFINE_STRING_MAPPING(PseudoLastOfType)
+    DEFINE_STRING_MAPPING(PseudoOnlyChild)
+    DEFINE_STRING_MAPPING(PseudoOnlyOfType)
+    DEFINE_STRING_MAPPING(PseudoFirstLine)
+    DEFINE_STRING_MAPPING(PseudoFirstLetter)
+    DEFINE_STRING_MAPPING(PseudoNthChild)
+    DEFINE_STRING_MAPPING(PseudoNthOfType)
+    DEFINE_STRING_MAPPING(PseudoNthLastChild)
+    DEFINE_STRING_MAPPING(PseudoNthLastOfType)
+    DEFINE_STRING_MAPPING(PseudoLink)
+    DEFINE_STRING_MAPPING(PseudoVisited)
+    DEFINE_STRING_MAPPING(PseudoAny)
+    DEFINE_STRING_MAPPING(PseudoAnyLink)
+    DEFINE_STRING_MAPPING(PseudoAutofill)
+    DEFINE_STRING_MAPPING(PseudoHover)
+    DEFINE_STRING_MAPPING(PseudoDrag)
+    DEFINE_STRING_MAPPING(PseudoFocus)
+    DEFINE_STRING_MAPPING(PseudoActive)
+    DEFINE_STRING_MAPPING(PseudoChecked)
+    DEFINE_STRING_MAPPING(PseudoEnabled)
+    DEFINE_STRING_MAPPING(PseudoFullPageMedia)
+    DEFINE_STRING_MAPPING(PseudoDefault)
+    DEFINE_STRING_MAPPING(PseudoDisabled)
+    DEFINE_STRING_MAPPING(PseudoOptional)
+    DEFINE_STRING_MAPPING(PseudoPlaceholderShown)
+    DEFINE_STRING_MAPPING(PseudoRequired)
+    DEFINE_STRING_MAPPING(PseudoReadOnly)
+    DEFINE_STRING_MAPPING(PseudoReadWrite)
+    DEFINE_STRING_MAPPING(PseudoValid)
+    DEFINE_STRING_MAPPING(PseudoInvalid)
+    DEFINE_STRING_MAPPING(PseudoIndeterminate)
+    DEFINE_STRING_MAPPING(PseudoTarget)
+    DEFINE_STRING_MAPPING(PseudoBefore)
+    DEFINE_STRING_MAPPING(PseudoAfter)
+    DEFINE_STRING_MAPPING(PseudoBackdrop)
+    DEFINE_STRING_MAPPING(PseudoLang)
+    DEFINE_STRING_MAPPING(PseudoNot)
+    DEFINE_STRING_MAPPING(PseudoPlaceholder)
+    DEFINE_STRING_MAPPING(PseudoResizer)
+    DEFINE_STRING_MAPPING(PseudoRoot)
+    DEFINE_STRING_MAPPING(PseudoScope)
+    DEFINE_STRING_MAPPING(PseudoScrollbar)
+    DEFINE_STRING_MAPPING(PseudoScrollbarButton)
+    DEFINE_STRING_MAPPING(PseudoScrollbarCorner)
+    DEFINE_STRING_MAPPING(PseudoScrollbarThumb)
+    DEFINE_STRING_MAPPING(PseudoScrollbarTrack)
+    DEFINE_STRING_MAPPING(PseudoScrollbarTrackPiece)
+    DEFINE_STRING_MAPPING(PseudoWindowInactive)
+    DEFINE_STRING_MAPPING(PseudoCornerPresent)
+    DEFINE_STRING_MAPPING(PseudoDecrement)
+    DEFINE_STRING_MAPPING(PseudoIncrement)
+    DEFINE_STRING_MAPPING(PseudoHorizontal)
+    DEFINE_STRING_MAPPING(PseudoVertical)
+    DEFINE_STRING_MAPPING(PseudoStart)
+    DEFINE_STRING_MAPPING(PseudoEnd)
+    DEFINE_STRING_MAPPING(PseudoDoubleButton)
+    DEFINE_STRING_MAPPING(PseudoSingleButton)
+    DEFINE_STRING_MAPPING(PseudoNoButton)
+    DEFINE_STRING_MAPPING(PseudoSelection)
+    DEFINE_STRING_MAPPING(PseudoLeftPage)
+    DEFINE_STRING_MAPPING(PseudoRightPage)
+    DEFINE_STRING_MAPPING(PseudoFirstPage)
+    DEFINE_STRING_MAPPING(PseudoFullScreen)
+    DEFINE_STRING_MAPPING(PseudoFullScreenAncestor)
+    DEFINE_STRING_MAPPING(PseudoInRange)
+    DEFINE_STRING_MAPPING(PseudoOutOfRange)
+    DEFINE_STRING_MAPPING(PseudoWebKitCustomElement)
+    DEFINE_STRING_MAPPING(PseudoBlinkInternalElement)
+    DEFINE_STRING_MAPPING(PseudoCue)
+    DEFINE_STRING_MAPPING(PseudoFutureCue)
+    DEFINE_STRING_MAPPING(PseudoPastCue)
+    DEFINE_STRING_MAPPING(PseudoUnresolved)
+    DEFINE_STRING_MAPPING(PseudoDefined)
+    DEFINE_STRING_MAPPING(PseudoContent)
+    DEFINE_STRING_MAPPING(PseudoHost)
+    DEFINE_STRING_MAPPING(PseudoHostContext)
+    DEFINE_STRING_MAPPING(PseudoShadow)
+    DEFINE_STRING_MAPPING(PseudoSlotted)
+    DEFINE_STRING_MAPPING(PseudoSpatialNavigationFocus)
+    DEFINE_STRING_MAPPING(PseudoListBox)
+    DEFINE_STRING_MAPPING(PseudoHostHasAppearance)
+    DEFINE_STRING_MAPPING(PseudoVideoPersistent)
+    DEFINE_STRING_MAPPING(PseudoVideoPersistentAncestor)
 #undef DEFINE_STRING_MAPPING
   }
 
diff --git a/third_party/WebKit/Source/core/inspector/inspector_protocol_config.json b/third_party/WebKit/Source/core/inspector/inspector_protocol_config.json
index 38cb078e43f6..21048f15f2be 100644
--- a/third_party/WebKit/Source/core/inspector/inspector_protocol_config.json
+++ b/third_party/WebKit/Source/core/inspector/inspector_protocol_config.json
@@ -102,8 +102,8 @@
 
     "imported": {
         "header": "<v8-inspector-protocol.h>",
-        "to_imported_string": "toV8InspectorStringView(%s)",
-        "from_imported_string": "toCoreString(%s)",
+        "to_imported_string": "ToV8InspectorStringView(%s)",
+        "from_imported_string": "ToCoreString(%s)",
         "namespace": ["v8_inspector", "protocol"],
         "options": [
             {
diff --git a/third_party/WebKit/Source/core/layout/LayoutObject.h b/third_party/WebKit/Source/core/layout/LayoutObject.h
index 5f55f5210e08..1147cb93f891 100644
--- a/third_party/WebKit/Source/core/layout/LayoutObject.h
+++ b/third_party/WebKit/Source/core/layout/LayoutObject.h
@@ -2229,54 +2229,54 @@ class CORE_EXPORT LayoutObject : public ImageResourceObserver,
     // https://codereview.chromium.org/44673003 and subsequent relaxations
     // of the memory constraints on layout objects.
     LayoutObjectBitfields(Node* node)
-        : m_selfNeedsLayout(false),
-          m_needsPositionedMovementLayout(false),
-          m_normalChildNeedsLayout(false),
-          m_posChildNeedsLayout(false),
-          m_needsSimplifiedNormalFlowLayout(false),
-          m_selfNeedsOverflowRecalcAfterStyleChange(false),
-          m_childNeedsOverflowRecalcAfterStyleChange(false),
-          m_preferredLogicalWidthsDirty(false),
-          m_mayNeedPaintInvalidation(false),
-          m_mayNeedPaintInvalidationSubtree(false),
-          m_mayNeedPaintInvalidationAnimatedBackgroundImage(false),
-          m_needsPaintOffsetAndVisualRectUpdate(false),
-          m_shouldInvalidateSelection(false),
-          m_floating(false),
-          m_isAnonymous(!node),
-          m_isText(false),
-          m_isBox(false),
-          m_isInline(true),
-          m_isAtomicInlineLevel(false),
-          m_horizontalWritingMode(true),
-          m_hasLayer(false),
-          m_hasOverflowClip(false),
-          m_hasTransformRelatedProperty(false),
-          m_hasReflection(false),
-          m_canContainFixedPositionObjects(false),
-          m_hasCounterNodeMap(false),
-          m_everHadLayout(false),
-          m_ancestorLineBoxDirty(false),
-          m_isInsideFlowThread(false),
-          m_subtreeChangeListenerRegistered(false),
-          m_notifiedOfSubtreeChange(false),
-          m_consumesSubtreeChangeNotification(false),
-          m_childrenInline(false),
-          m_containsInlineWithOutlineAndContinuation(false),
-          m_alwaysCreateLineBoxesForLayoutInline(false),
-          m_previousBackgroundObscured(false),
-          m_isBackgroundAttachmentFixedObject(false),
-          m_isScrollAnchorObject(false),
-          m_scrollAnchorDisablingStyleChanged(false),
-          m_hasBoxDecorationBackground(false),
-          m_hasPreviousLocationInBacking(false),
-          m_hasPreviousSelectionVisualRect(false),
-          m_needsPaintPropertyUpdate(true),
-          m_subtreeNeedsPaintPropertyUpdate(true),
-          m_descendantNeedsPaintPropertyUpdate(true),
-          m_backgroundChangedSinceLastPaintInvalidation(false),
-          m_outlineMayBeAffectedByDescendants(false),
-          m_previousOutlineMayBeAffectedByDescendants(false),
+        : m_SelfNeedsLayout(false),
+          m_NeedsPositionedMovementLayout(false),
+          m_NormalChildNeedsLayout(false),
+          m_PosChildNeedsLayout(false),
+          m_NeedsSimplifiedNormalFlowLayout(false),
+          m_SelfNeedsOverflowRecalcAfterStyleChange(false),
+          m_ChildNeedsOverflowRecalcAfterStyleChange(false),
+          m_PreferredLogicalWidthsDirty(false),
+          m_MayNeedPaintInvalidation(false),
+          m_MayNeedPaintInvalidationSubtree(false),
+          m_MayNeedPaintInvalidationAnimatedBackgroundImage(false),
+          m_NeedsPaintOffsetAndVisualRectUpdate(false),
+          m_ShouldInvalidateSelection(false),
+          m_Floating(false),
+          m_IsAnonymous(!node),
+          m_IsText(false),
+          m_IsBox(false),
+          m_IsInline(true),
+          m_IsAtomicInlineLevel(false),
+          m_HorizontalWritingMode(true),
+          m_HasLayer(false),
+          m_HasOverflowClip(false),
+          m_HasTransformRelatedProperty(false),
+          m_HasReflection(false),
+          m_CanContainFixedPositionObjects(false),
+          m_HasCounterNodeMap(false),
+          m_EverHadLayout(false),
+          m_AncestorLineBoxDirty(false),
+          m_IsInsideFlowThread(false),
+          m_SubtreeChangeListenerRegistered(false),
+          m_NotifiedOfSubtreeChange(false),
+          m_ConsumesSubtreeChangeNotification(false),
+          m_ChildrenInline(false),
+          m_ContainsInlineWithOutlineAndContinuation(false),
+          m_AlwaysCreateLineBoxesForLayoutInline(false),
+          m_PreviousBackgroundObscured(false),
+          m_IsBackgroundAttachmentFixedObject(false),
+          m_IsScrollAnchorObject(false),
+          m_ScrollAnchorDisablingStyleChanged(false),
+          m_HasBoxDecorationBackground(false),
+          m_HasPreviousLocationInBacking(false),
+          m_HasPreviousSelectionVisualRect(false),
+          m_NeedsPaintPropertyUpdate(true),
+          m_SubtreeNeedsPaintPropertyUpdate(true),
+          m_DescendantNeedsPaintPropertyUpdate(true),
+          m_BackgroundChangedSinceLastPaintInvalidation(false),
+          m_OutlineMayBeAffectedByDescendants(false),
+          m_PreviousOutlineMayBeAffectedByDescendants(false),
           positioned_state_(kIsStaticallyPositioned),
           selection_state_(SelectionNone),
           background_obscuration_state_(kBackgroundObscurationStatusInvalid),
diff --git a/third_party/WebKit/Source/core/layout/LayoutTestHelper.cpp b/third_party/WebKit/Source/core/layout/LayoutTestHelper.cpp
index 8d498b37e744..200d756df488 100644
--- a/third_party/WebKit/Source/core/layout/LayoutTestHelper.cpp
+++ b/third_party/WebKit/Source/core/layout/LayoutTestHelper.cpp
@@ -88,7 +88,7 @@ void RenderingTest::LoadAhem() {
   ScriptState* script_state = ToScriptStateForMainWorld(&page_holder_->GetFrame());
   DummyExceptionStateForTesting exception_state;
   FontFaceSet::From(GetDocument())
-      ->AddForBinding(script_state, ahem, exception_state);
+      ->addForBinding(script_state, ahem, exception_state);
 }
 
 }  // namespace blink
diff --git a/third_party/WebKit/Source/core/layout/line/InlineBox.h b/third_party/WebKit/Source/core/layout/line/InlineBox.h
index 78d4dce988ab..bd405ba086c8 100644
--- a/third_party/WebKit/Source/core/layout/line/InlineBox.h
+++ b/third_party/WebKit/Source/core/layout/line/InlineBox.h
@@ -407,19 +407,19 @@ class CORE_EXPORT InlineBox : public DisplayItemClient {
                        bool dirty = false,
                        bool extracted = false,
                        bool is_horizontal = true)
-        : m_firstLine(first_line),
-          m_constructed(constructed),
+        : m_FirstLine(first_line),
+          m_Constructed(constructed),
           bidi_embedding_level_(0),
-          m_dirty(dirty),
-          m_extracted(extracted),
-          m_hasVirtualLogicalHeight(false),
-          m_isHorizontal(is_horizontal),
-          m_endsWithBreak(false),
-          m_hasSelectedChildrenOrCanHaveLeadingExpansion(false),
-          m_knownToHaveNoOverflow(true),
-          m_hasEllipsisBoxOrHyphen(false),
-          m_dirOverride(false),
-          m_isText(false),
+          m_Dirty(dirty),
+          m_Extracted(extracted),
+          m_HasVirtualLogicalHeight(false),
+          m_IsHorizontal(is_horizontal),
+          m_EndsWithBreak(false),
+          m_HasSelectedChildrenOrCanHaveLeadingExpansion(false),
+          m_KnownToHaveNoOverflow(true),
+          m_HasEllipsisBoxOrHyphen(false),
+          m_DirOverride(false),
+          m_IsText(false),
           expansion_(0) {}
 
     // Some of these bits are actually for subclasses and moved here to compact
diff --git a/third_party/WebKit/Source/core/loader/resource/CSSStyleSheetResource.h b/third_party/WebKit/Source/core/loader/resource/CSSStyleSheetResource.h
index 44f9e1a034d6..4855e8ed0855 100644
--- a/third_party/WebKit/Source/core/loader/resource/CSSStyleSheetResource.h
+++ b/third_party/WebKit/Source/core/loader/resource/CSSStyleSheetResource.h
@@ -92,7 +92,7 @@ class CORE_EXPORT CSSStyleSheetResource final : public StyleSheetResource {
   bool did_notify_first_data_;
 };
 
-DEFINE_RESOURCE_TYPE_CASTS(kCSSStyleSheet);
+DEFINE_RESOURCE_TYPE_CASTS(CSSStyleSheet);
 
 }  // namespace blink
 
diff --git a/third_party/WebKit/Source/core/loader/resource/FontResource.h b/third_party/WebKit/Source/core/loader/resource/FontResource.h
index f0cdf91d5b54..016f5d11e432 100644
--- a/third_party/WebKit/Source/core/loader/resource/FontResource.h
+++ b/third_party/WebKit/Source/core/loader/resource/FontResource.h
@@ -110,7 +110,7 @@ class CORE_EXPORT FontResource final : public Resource {
   FRIEND_TEST_ALL_PREFIXES(FontResourceTest, CacheAwareFontLoading);
 };
 
-DEFINE_RESOURCE_TYPE_CASTS(kFont);
+DEFINE_RESOURCE_TYPE_CASTS(Font);
 
 class FontResourceClient : public ResourceClient {
  public:
diff --git a/third_party/WebKit/Source/core/loader/resource/ImageResource.h b/third_party/WebKit/Source/core/loader/resource/ImageResource.h
index 272e1bba1051..fd36a598c38d 100644
--- a/third_party/WebKit/Source/core/loader/resource/ImageResource.h
+++ b/third_party/WebKit/Source/core/loader/resource/ImageResource.h
@@ -172,7 +172,7 @@ class CORE_EXPORT ImageResource final
   double last_flush_time_ = 0.;
 };
 
-DEFINE_RESOURCE_TYPE_CASTS(kImage);
+DEFINE_RESOURCE_TYPE_CASTS(Image);
 
 }  // namespace blink
 
diff --git a/third_party/WebKit/Source/core/loader/resource/ScriptResource.h b/third_party/WebKit/Source/core/loader/resource/ScriptResource.h
index 44b5ebc0ff21..e376ee78550e 100644
--- a/third_party/WebKit/Source/core/loader/resource/ScriptResource.h
+++ b/third_party/WebKit/Source/core/loader/resource/ScriptResource.h
@@ -97,7 +97,7 @@ class CORE_EXPORT ScriptResource final : public TextResource {
   AtomicString script_;
 };
 
-DEFINE_RESOURCE_TYPE_CASTS(kScript);
+DEFINE_RESOURCE_TYPE_CASTS(Script);
 
 }  // namespace blink
 
diff --git a/third_party/WebKit/Source/core/loader/resource/XSLStyleSheetResource.h b/third_party/WebKit/Source/core/loader/resource/XSLStyleSheetResource.h
index 1dcf14feec6a..51375c6d2eb8 100644
--- a/third_party/WebKit/Source/core/loader/resource/XSLStyleSheetResource.h
+++ b/third_party/WebKit/Source/core/loader/resource/XSLStyleSheetResource.h
@@ -63,7 +63,7 @@ class XSLStyleSheetResource final : public StyleSheetResource {
   String sheet_;
 };
 
-DEFINE_RESOURCE_TYPE_CASTS(kXSLStyleSheet);
+DEFINE_RESOURCE_TYPE_CASTS(XSLStyleSheet);
 
 }  // namespace blink
 
diff --git a/third_party/WebKit/Source/core/page/ChromeClient.h b/third_party/WebKit/Source/core/page/ChromeClient.h
index 568eb8d0c4f8..6587f1dfa15a 100644
--- a/third_party/WebKit/Source/core/page/ChromeClient.h
+++ b/third_party/WebKit/Source/core/page/ChromeClient.h
@@ -45,6 +45,9 @@
 #include "wtf/Vector.h"
 #include <memory>
 
+// To avoid conflicts with the CreateWindow macro from the Windows SDK...
+#undef CreateWindow
+
 namespace blink {
 
 class AXObject;
diff --git a/third_party/WebKit/Source/core/page/CreateWindow.h b/third_party/WebKit/Source/core/page/CreateWindow.h
index 297d5a0d9615..9772bc1c5b86 100644
--- a/third_party/WebKit/Source/core/page/CreateWindow.h
+++ b/third_party/WebKit/Source/core/page/CreateWindow.h
@@ -32,6 +32,9 @@
 #include "core/loader/NavigationPolicy.h"
 #include "wtf/text/WTFString.h"
 
+// To avoid conflicts with the CreateWindow macro from the Windows SDK...
+#undef CreateWindow
+
 namespace blink {
 class LocalFrame;
 struct FrameLoadRequest;
diff --git a/third_party/WebKit/Source/core/page/PagePopup.h b/third_party/WebKit/Source/core/page/PagePopup.h
index f7b480aad62f..649e154e6bc1 100644
--- a/third_party/WebKit/Source/core/page/PagePopup.h
+++ b/third_party/WebKit/Source/core/page/PagePopup.h
@@ -33,6 +33,9 @@
 
 #include "wtf/Forward.h"
 
+// To avoid conflicts with the CreateWindow macro from the Windows SDK...
+#undef PostMessage
+
 namespace blink {
 
 class AXObject;
diff --git a/third_party/WebKit/Source/core/paint/FloatClipRecorder.cpp b/third_party/WebKit/Source/core/paint/FloatClipRecorder.cpp
index 0273b109d3b6..14dd76de78b8 100644
--- a/third_party/WebKit/Source/core/paint/FloatClipRecorder.cpp
+++ b/third_party/WebKit/Source/core/paint/FloatClipRecorder.cpp
@@ -27,7 +27,7 @@ FloatClipRecorder::~FloatClipRecorder() {
   if (RuntimeEnabledFeatures::slimmingPaintV2Enabled())
     return;
   DisplayItem::Type end_type =
-      DisplayItem::floatClipTypeToEndFloatClipType(clip_type_);
+      DisplayItem::FloatClipTypeToEndFloatClipType(clip_type_);
   context_.GetPaintController().EndItem<EndFloatClipDisplayItem>(client_,
                                                                   end_type);
 }
diff --git a/third_party/WebKit/Source/core/paint/ScrollRecorder.cpp b/third_party/WebKit/Source/core/paint/ScrollRecorder.cpp
index 1e67ae227bc5..7398947b76b7 100644
--- a/third_party/WebKit/Source/core/paint/ScrollRecorder.cpp
+++ b/third_party/WebKit/Source/core/paint/ScrollRecorder.cpp
@@ -34,7 +34,7 @@ ScrollRecorder::~ScrollRecorder() {
   if (RuntimeEnabledFeatures::slimmingPaintV2Enabled())
     return;
   context_.GetPaintController().EndItem<EndScrollDisplayItem>(
-      client_, DisplayItem::scrollTypeToEndScrollType(begin_item_type_));
+      client_, DisplayItem::ScrollTypeToEndScrollType(begin_item_type_));
 }
 
 }  // namespace blink
diff --git a/third_party/WebKit/Source/core/paint/Transform3DRecorder.cpp b/third_party/WebKit/Source/core/paint/Transform3DRecorder.cpp
index a272c772c4d7..dfcc4733477b 100644
--- a/third_party/WebKit/Source/core/paint/Transform3DRecorder.cpp
+++ b/third_party/WebKit/Source/core/paint/Transform3DRecorder.cpp
@@ -35,7 +35,7 @@ Transform3DRecorder::~Transform3DRecorder() {
     return;
 
   context_.GetPaintController().EndItem<EndTransform3DDisplayItem>(
-      client_, DisplayItem::transform3DTypeToEndTransform3DType(type_));
+      client_, DisplayItem::Transform3DTypeToEndTransform3DType(type_));
 }
 
 }  // namespace blink
diff --git a/third_party/WebKit/Source/core/style/BasicShapes.h b/third_party/WebKit/Source/core/style/BasicShapes.h
index 0e3d555e1b22..ab6bf9c254c0 100644
--- a/third_party/WebKit/Source/core/style/BasicShapes.h
+++ b/third_party/WebKit/Source/core/style/BasicShapes.h
@@ -75,8 +75,8 @@ class CORE_EXPORT BasicShape : public RefCounted<BasicShape> {
 
 #define DEFINE_BASICSHAPE_TYPE_CASTS(thisType)                   \
   DEFINE_TYPE_CASTS(thisType, BasicShape, value,                 \
-                    value->GetType() == BasicShape::thisType##Type, \
-                    value.GetType() == BasicShape::thisType##Type)
+                    value->GetType() == BasicShape::k##thisType##Type, \
+                    value.GetType() == BasicShape::k##thisType##Type)
 
 class BasicShapeCenterCoordinate {
   DISALLOW_NEW();
diff --git a/third_party/WebKit/Source/core/svg/SVGFEBlendElement.cpp b/third_party/WebKit/Source/core/svg/SVGFEBlendElement.cpp
index dfc440948244..64e1161adad6 100644
--- a/third_party/WebKit/Source/core/svg/SVGFEBlendElement.cpp
+++ b/third_party/WebKit/Source/core/svg/SVGFEBlendElement.cpp
@@ -28,8 +28,8 @@ namespace blink {
 
 static WebBlendMode ToWebBlendMode(SVGFEBlendElement::Mode mode) {
 #define MAP_BLEND_MODE(MODENAME)          \
-  case SVGFEBlendElement::Mode##MODENAME: \
-    return WebBlendMode##MODENAME
+  case SVGFEBlendElement::kMode##MODENAME: \
+    return kWebBlendMode##MODENAME
 
   switch (mode) {
     MAP_BLEND_MODE(Normal);
diff --git a/third_party/WebKit/Source/core/svg/SVGLengthContext.h b/third_party/WebKit/Source/core/svg/SVGLengthContext.h
index c8a9ca8cd295..c42e8f604f9f 100644
--- a/third_party/WebKit/Source/core/svg/SVGLengthContext.h
+++ b/third_party/WebKit/Source/core/svg/SVGLengthContext.h
@@ -45,9 +45,9 @@ class SVGLengthContext {
                                     SVGUnitTypes::SVGUnitType type,
                                     const FloatRect& viewport) {
     return ResolveRectangle(
-        context, type, viewport, *context->X()->CurrentValue(),
-        *context->Y()->CurrentValue(), *context->Width()->CurrentValue(),
-        *context->Height()->CurrentValue());
+        context, type, viewport, *context->x()->CurrentValue(),
+        *context->y()->CurrentValue(), *context->width()->CurrentValue(),
+        *context->height()->CurrentValue());
   }
 
   static FloatRect ResolveRectangle(const SVGElement*,
diff --git a/third_party/WebKit/Source/core/svg/SVGViewSpec.h b/third_party/WebKit/Source/core/svg/SVGViewSpec.h
index d54520897601..dc614883fb4e 100644
--- a/third_party/WebKit/Source/core/svg/SVGViewSpec.h
+++ b/third_party/WebKit/Source/core/svg/SVGViewSpec.h
@@ -66,15 +66,15 @@ class SVGViewSpec final : public GarbageCollectedFinalized<SVGViewSpec>,
 template <typename T>
 void SVGViewSpec::InheritViewAttributesFromElement(T& inherit_from_element) {
   if (inherit_from_element.HasValidViewBox())
-    SetViewBox(inherit_from_element.ViewBox()->CurrentValue()->Value());
+    SetViewBox(inherit_from_element.viewBox()->CurrentValue()->Value());
 
-  if (inherit_from_element.PreserveAspectRatio()->IsSpecified()) {
+  if (inherit_from_element.preserveAspectRatio()->IsSpecified()) {
     SetPreserveAspectRatio(
-        *inherit_from_element.PreserveAspectRatio()->CurrentValue());
+        *inherit_from_element.preserveAspectRatio()->CurrentValue());
   }
 
-  if (inherit_from_element.HasAttribute(SVGNames::zoomAndPanAttr))
-    setZoomAndPan(inherit_from_element.ZoomAndPan());
+  if (inherit_from_element.hasAttribute(SVGNames::zoomAndPanAttr))
+    setZoomAndPan(inherit_from_element.zoomAndPan());
 }
 
 }  // namespace blink
diff --git a/third_party/WebKit/Source/core/svg/properties/SVGAnimatedProperty.h b/third_party/WebKit/Source/core/svg/properties/SVGAnimatedProperty.h
index b5f360a14e5d..193e44b6f1eb 100644
--- a/third_party/WebKit/Source/core/svg/properties/SVGAnimatedProperty.h
+++ b/third_party/WebKit/Source/core/svg/properties/SVGAnimatedProperty.h
@@ -196,12 +196,12 @@ class SVGAnimatedProperty : public SVGAnimatedPropertyCommon<Property> {
     base_value_updated_ = true;
 
     DCHECK(this->AttributeName() != QualifiedName::Null());
-    this->ContextElement()->InvalidateSVGAttributes();
-    this->ContextElement()->SvgAttributeBaseValChanged(this->AttributeName());
+    this->contextElement()->InvalidateSVGAttributes();
+    this->contextElement()->SvgAttributeBaseValChanged(this->AttributeName());
   }
 
   PrimitiveType animVal() {
-    this->ContextElement()->EnsureAttributeAnimValUpdated();
+    this->contextElement()->EnsureAttributeAnimValUpdated();
     return this->CurrentValue()->Value();
   }
 
@@ -260,7 +260,7 @@ class SVGAnimatedProperty<Property, TearOffType, void>
   virtual TearOffType* baseVal() {
     if (!base_val_tear_off_) {
       base_val_tear_off_ =
-          TearOffType::Create(this->BaseValue(), this->ContextElement(),
+          TearOffType::Create(this->BaseValue(), this->contextElement(),
                               kPropertyIsNotAnimVal, this->AttributeName());
     }
     return base_val_tear_off_;
@@ -269,7 +269,7 @@ class SVGAnimatedProperty<Property, TearOffType, void>
   TearOffType* animVal() {
     if (!anim_val_tear_off_) {
       anim_val_tear_off_ =
-          TearOffType::Create(this->CurrentValue(), this->ContextElement(),
+          TearOffType::Create(this->CurrentValue(), this->contextElement(),
                               kPropertyIsAnimVal, this->AttributeName());
     }
     return anim_val_tear_off_;
diff --git a/third_party/WebKit/Source/core/testing/InternalSettings.cpp b/third_party/WebKit/Source/core/testing/InternalSettings.cpp
index 401a8ae6ed9e..6473d431735a 100644
--- a/third_party/WebKit/Source/core/testing/InternalSettings.cpp
+++ b/third_party/WebKit/Source/core/testing/InternalSettings.cpp
@@ -370,7 +370,7 @@ void InternalSettings::setDefaultVideoPosterURL(
 }
 
 DEFINE_TRACE(InternalSettings) {
-  InternalSettingsGenerated::trace(visitor);
+  InternalSettingsGenerated::Trace(visitor);
   Supplement<Page>::Trace(visitor);
 }
 
diff --git a/third_party/WebKit/Source/core/timing/PerformanceBaseTest.cpp b/third_party/WebKit/Source/core/timing/PerformanceBaseTest.cpp
index f64d3b25b1b8..a39be84bffb6 100644
--- a/third_party/WebKit/Source/core/timing/PerformanceBaseTest.cpp
+++ b/third_party/WebKit/Source/core/timing/PerformanceBaseTest.cpp
@@ -46,7 +46,7 @@ class PerformanceBaseTest : public ::testing::Test {
     v8::Local<v8::Function> callback =
         v8::Function::New(script_state->GetContext(), nullptr).ToLocalChecked();
     base_ = new TestPerformanceBase(script_state);
-    cb_ = PerformanceObserverCallback::create(script_state, callback);
+    cb_ = PerformanceObserverCallback::Create(script_state, callback);
     observer_ = PerformanceObserver::Create(script_state->GetExecutionContext(),
                                              base_, cb_);
   }
diff --git a/third_party/WebKit/Source/core/timing/PerformanceObserverTest.cpp b/third_party/WebKit/Source/core/timing/PerformanceObserverTest.cpp
index f869b60bf9fd..0e345a1ee341 100644
--- a/third_party/WebKit/Source/core/timing/PerformanceObserverTest.cpp
+++ b/third_party/WebKit/Source/core/timing/PerformanceObserverTest.cpp
@@ -33,7 +33,7 @@ class PerformanceObserverTest : public ::testing::Test {
     v8::Local<v8::Function> callback =
         v8::Function::New(script_state->GetContext(), nullptr).ToLocalChecked();
     base_ = new MockPerformanceBase(script_state);
-    cb_ = PerformanceObserverCallback::create(script_state, callback);
+    cb_ = PerformanceObserverCallback::Create(script_state, callback);
     observer_ = PerformanceObserver::Create(script_state->GetExecutionContext(),
                                              base_, cb_);
   }
diff --git a/third_party/WebKit/Source/core/xml/XPathGrammar.y b/third_party/WebKit/Source/core/xml/XPathGrammar.y
index 28d326b48ac4..2b0737fc171e 100644
--- a/third_party/WebKit/Source/core/xml/XPathGrammar.y
+++ b/third_party/WebKit/Source/core/xml/XPathGrammar.y
@@ -38,11 +38,11 @@
 
 void* yyFastMalloc(size_t size)
 {
-    return WTF::Partitions::fastMalloc(size, nullptr);
+    return WTF::Partitions::FastMalloc(size, nullptr);
 }
 
 #define YYMALLOC yyFastMalloc
-#define YYFREE WTF::Partitions::fastFree
+#define YYFREE WTF::Partitions::FastFree
 
 #define YYENABLE_NLS 0
 #define YYLTYPE_IS_TRIVIAL 1
@@ -73,7 +73,7 @@ using namespace XPath;
 
 %{
 
-static int xpathyylex(YYSTYPE* yylval) { return Parser::current()->lex(yylval); }
+static int xpathyylex(YYSTYPE* yylval) { return Parser::Current()->Lex(yylval); }
 static void xpathyyerror(void*, const char*) { }
 
 %}
@@ -121,19 +121,19 @@ static void xpathyyerror(void*, const char*) { }
 Expr:
     OrExpr
     {
-        parser->m_topExpr = $1;
+        parser->top_expr_ = $1;
     }
     ;
 
 LocationPath:
     RelativeLocationPath
     {
-        $$->setAbsolute(false);
+        $$->SetAbsolute(false);
     }
     |
     AbsoluteLocationPath
     {
-        $$->setAbsolute(true);
+        $$->SetAbsolute(true);
     }
     ;
 
@@ -151,7 +151,7 @@ AbsoluteLocationPath:
     DescendantOrSelf RelativeLocationPath
     {
         $$ = $2;
-        $$->insertFirstStep($1);
+        $$->InsertFirstStep($1);
     }
     ;
 
@@ -159,18 +159,18 @@ RelativeLocationPath:
     Step
     {
         $$ = new LocationPath;
-        $$->appendStep($1);
+        $$->AppendStep($1);
     }
     |
     RelativeLocationPath '/' Step
     {
-        $$->appendStep($3);
+        $$->AppendStep($3);
     }
     |
     RelativeLocationPath DescendantOrSelf Step
     {
-        $$->appendStep($2);
-        $$->appendStep($3);
+        $$->AppendStep($2);
+        $$->AppendStep($3);
     }
     ;
 
@@ -178,25 +178,25 @@ Step:
     NodeTest OptionalPredicateList
     {
         if ($2)
-            $$ = new Step(Step::ChildAxis, *$1, *$2);
+            $$ = new Step(Step::kChildAxis, *$1, *$2);
         else
-            $$ = new Step(Step::ChildAxis, *$1);
+            $$ = new Step(Step::kChildAxis, *$1);
     }
     |
     NAMETEST OptionalPredicateList
     {
         AtomicString localName;
         AtomicString namespaceURI;
-        if (!parser->expandQName(*$1, localName, namespaceURI)) {
-            parser->m_gotNamespaceError = true;
+        if (!parser->ExpandQName(*$1, localName, namespaceURI)) {
+            parser->got_namespace_error_ = true;
             YYABORT;
         }
 
         if ($2)
-            $$ = new Step(Step::ChildAxis, Step::NodeTest(Step::NodeTest::NameTest, localName, namespaceURI), *$2);
+            $$ = new Step(Step::kChildAxis, Step::NodeTest(Step::NodeTest::kNameTest, localName, namespaceURI), *$2);
         else
-            $$ = new Step(Step::ChildAxis, Step::NodeTest(Step::NodeTest::NameTest, localName, namespaceURI));
-        parser->deleteString($1);
+            $$ = new Step(Step::kChildAxis, Step::NodeTest(Step::NodeTest::kNameTest, localName, namespaceURI));
+        parser->DeleteString($1);
     }
     |
     AxisSpecifier NodeTest OptionalPredicateList
@@ -211,16 +211,16 @@ Step:
     {
         AtomicString localName;
         AtomicString namespaceURI;
-        if (!parser->expandQName(*$2, localName, namespaceURI)) {
-            parser->m_gotNamespaceError = true;
+        if (!parser->ExpandQName(*$2, localName, namespaceURI)) {
+            parser->got_namespace_error_ = true;
             YYABORT;
         }
 
         if ($3)
-            $$ = new Step($1, Step::NodeTest(Step::NodeTest::NameTest, localName, namespaceURI), *$3);
+            $$ = new Step($1, Step::NodeTest(Step::NodeTest::kNameTest, localName, namespaceURI), *$3);
         else
-            $$ = new Step($1, Step::NodeTest(Step::NodeTest::NameTest, localName, namespaceURI));
-        parser->deleteString($2);
+            $$ = new Step($1, Step::NodeTest(Step::NodeTest::kNameTest, localName, namespaceURI));
+        parser->DeleteString($2);
     }
     |
     AbbreviatedStep
@@ -231,7 +231,7 @@ AxisSpecifier:
     |
     '@'
     {
-        $$ = Step::AttributeAxis;
+        $$ = Step::kAttributeAxis;
     }
     ;
 
@@ -239,26 +239,26 @@ NodeTest:
     NODETYPE '(' ')'
     {
         if (*$1 == "node")
-            $$ = new Step::NodeTest(Step::NodeTest::AnyNodeTest);
+            $$ = new Step::NodeTest(Step::NodeTest::kAnyNodeTest);
         else if (*$1 == "text")
-            $$ = new Step::NodeTest(Step::NodeTest::TextNodeTest);
+            $$ = new Step::NodeTest(Step::NodeTest::kTextNodeTest);
         else if (*$1 == "comment")
-            $$ = new Step::NodeTest(Step::NodeTest::CommentNodeTest);
+            $$ = new Step::NodeTest(Step::NodeTest::kCommentNodeTest);
 
-        parser->deleteString($1);
+        parser->DeleteString($1);
     }
     |
     PI '(' ')'
     {
-        $$ = new Step::NodeTest(Step::NodeTest::ProcessingInstructionNodeTest);
-        parser->deleteString($1);
+        $$ = new Step::NodeTest(Step::NodeTest::kProcessingInstructionNodeTest);
+        parser->DeleteString($1);
     }
     |
     PI '(' LITERAL ')'
     {
-        $$ = new Step::NodeTest(Step::NodeTest::ProcessingInstructionNodeTest, $3->stripWhiteSpace());
-        parser->deleteString($1);
-        parser->deleteString($3);
+        $$ = new Step::NodeTest(Step::NodeTest::kProcessingInstructionNodeTest, $3->StripWhiteSpace());
+        parser->DeleteString($1);
+        parser->DeleteString($3);
     }
     ;
 
@@ -294,19 +294,19 @@ Predicate:
 DescendantOrSelf:
     SLASHSLASH
     {
-        $$ = new Step(Step::DescendantOrSelfAxis, Step::NodeTest(Step::NodeTest::AnyNodeTest));
+        $$ = new Step(Step::kDescendantOrSelfAxis, Step::NodeTest(Step::NodeTest::kAnyNodeTest));
     }
     ;
 
 AbbreviatedStep:
     '.'
     {
-        $$ = new Step(Step::SelfAxis, Step::NodeTest(Step::NodeTest::AnyNodeTest));
+        $$ = new Step(Step::kSelfAxis, Step::NodeTest(Step::NodeTest::kAnyNodeTest));
     }
     |
     DOTDOT
     {
-        $$ = new Step(Step::ParentAxis, Step::NodeTest(Step::NodeTest::AnyNodeTest));
+        $$ = new Step(Step::kParentAxis, Step::NodeTest(Step::NodeTest::kAnyNodeTest));
     }
     ;
 
@@ -314,7 +314,7 @@ PrimaryExpr:
     VARIABLEREFERENCE
     {
         $$ = new VariableReference(*$1);
-        parser->deleteString($1);
+        parser->DeleteString($1);
     }
     |
     '(' Expr ')'
@@ -325,13 +325,13 @@ PrimaryExpr:
     LITERAL
     {
         $$ = new StringExpression(*$1);
-        parser->deleteString($1);
+        parser->DeleteString($1);
     }
     |
     NUMBER
     {
-        $$ = new Number($1->toDouble());
-        parser->deleteString($1);
+        $$ = new Number($1->ToDouble());
+        parser->DeleteString($1);
     }
     |
     FunctionCall
@@ -340,18 +340,18 @@ PrimaryExpr:
 FunctionCall:
     FUNCTIONNAME '(' ')'
     {
-        $$ = createFunction(*$1);
+        $$ = CreateFunction(*$1);
         if (!$$)
             YYABORT;
-        parser->deleteString($1);
+        parser->DeleteString($1);
     }
     |
     FUNCTIONNAME '(' ArgumentList ')'
     {
-        $$ = createFunction(*$1, *$3);
+        $$ = CreateFunction(*$1, *$3);
         if (!$$)
             YYABORT;
-        parser->deleteString($1);
+        parser->DeleteString($1);
     }
     ;
 
@@ -378,8 +378,8 @@ UnionExpr:
     UnionExpr '|' PathExpr
     {
         $$ = new Union;
-        $$->addSubExpression($1);
-        $$->addSubExpression($3);
+        $$->AddSubExpression($1);
+        $$->AddSubExpression($3);
     }
     ;
 
@@ -393,14 +393,14 @@ PathExpr:
     |
     FilterExpr '/' RelativeLocationPath
     {
-        $3->setAbsolute(true);
+        $3->SetAbsolute(true);
         $$ = new blink::XPath::Path($1, $3);
     }
     |
     FilterExpr DescendantOrSelf RelativeLocationPath
     {
-        $3->insertFirstStep($2);
-        $3->setAbsolute(true);
+        $3->InsertFirstStep($2);
+        $3->SetAbsolute(true);
         $$ = new blink::XPath::Path($1, $3);
     }
     ;
@@ -419,7 +419,7 @@ OrExpr:
     |
     OrExpr OR AndExpr
     {
-        $$ = new LogicalOp(LogicalOp::OP_Or, $1, $3);
+        $$ = new LogicalOp(LogicalOp::kOP_Or, $1, $3);
     }
     ;
 
@@ -428,7 +428,7 @@ AndExpr:
     |
     AndExpr AND EqualityExpr
     {
-        $$ = new LogicalOp(LogicalOp::OP_And, $1, $3);
+        $$ = new LogicalOp(LogicalOp::kOP_And, $1, $3);
     }
     ;
 
@@ -455,12 +455,12 @@ AdditiveExpr:
     |
     AdditiveExpr PLUS MultiplicativeExpr
     {
-        $$ = new NumericOp(NumericOp::OP_Add, $1, $3);
+        $$ = new NumericOp(NumericOp::kOP_Add, $1, $3);
     }
     |
     AdditiveExpr MINUS MultiplicativeExpr
     {
-        $$ = new NumericOp(NumericOp::OP_Sub, $1, $3);
+        $$ = new NumericOp(NumericOp::kOP_Sub, $1, $3);
     }
     ;
 
@@ -479,7 +479,7 @@ UnaryExpr:
     MINUS UnaryExpr
     {
         $$ = new Negative;
-        $$->addSubExpression($2);
+        $$->AddSubExpression($2);
     }
     ;
 
diff --git a/third_party/WebKit/Source/modules/canvas2d/CanvasRenderingContext2DTest.cpp b/third_party/WebKit/Source/modules/canvas2d/CanvasRenderingContext2DTest.cpp
index 28ae7c41c6db..c3bc1d263505 100644
--- a/third_party/WebKit/Source/modules/canvas2d/CanvasRenderingContext2DTest.cpp
+++ b/third_party/WebKit/Source/modules/canvas2d/CanvasRenderingContext2DTest.cpp
@@ -290,7 +290,7 @@ class MockImageBufferSurfaceForOverwriteTesting
   MockImageBufferSurfaceForOverwriteTesting* surface_ptr = mock_surface.get(); \
   CanvasElement().CreateImageBufferUsingSurfaceForTesting(                   \
       std::move(mock_surface));                                               \
-  EXPECT_CALL(*surface_ptr, willOverwriteCanvas()).Times(EXPECTED_OVERDRAWS); \
+  EXPECT_CALL(*surface_ptr, WillOverwriteCanvas()).Times(EXPECTED_OVERDRAWS); \
   Context2d()->save();
 
 #define TEST_OVERDRAW_FINALIZE \
diff --git a/third_party/WebKit/Source/modules/filesystem/FileSystemCallbacks.cpp b/third_party/WebKit/Source/modules/filesystem/FileSystemCallbacks.cpp
index cc56a5a3a5ee..4ed52c3a2315 100644
--- a/third_party/WebKit/Source/modules/filesystem/FileSystemCallbacks.cpp
+++ b/third_party/WebKit/Source/modules/filesystem/FileSystemCallbacks.cpp
@@ -110,7 +110,7 @@ void FileSystemCallbacksBase::HandleEventOrScheduleCallback(CB* callback,
           WTF::Bind(&CB::handleEvent, WrapPersistent(callback),
                     WrapPersistent(arg)));
     } else {
-      callback->HandleEvent(arg);
+      callback->handleEvent(arg);
     }
   }
   execution_context_.Clear();
@@ -125,7 +125,7 @@ void FileSystemCallbacksBase::HandleEventOrScheduleCallback(CB* callback) {
           execution_context_.Get(),
           WTF::Bind(&CB::handleEvent, WrapPersistent(callback)));
     } else {
-      callback->HandleEvent();
+      callback->handleEvent();
     }
   }
   execution_context_.Clear();
diff --git a/third_party/WebKit/Source/modules/filesystem/SyncCallbackHelper.h b/third_party/WebKit/Source/modules/filesystem/SyncCallbackHelper.h
index 98d524d5a067..83517bd49209 100644
--- a/third_party/WebKit/Source/modules/filesystem/SyncCallbackHelper.h
+++ b/third_party/WebKit/Source/modules/filesystem/SyncCallbackHelper.h
@@ -83,9 +83,9 @@ class SyncCallbackHelper final
       return new SuccessCallbackImpl(helper);
     }
 
-    virtual void HandleEvent() { helper_->SetError(FileError::kOK); }
+    virtual void handleEvent() { helper_->SetError(FileError::kOK); }
 
-    virtual void HandleEvent(CallbackArg arg) { helper_->SetResult(arg); }
+    virtual void handleEvent(CallbackArg arg) { helper_->SetResult(arg); }
 
     DEFINE_INLINE_TRACE() {
       visitor->Trace(helper_);
diff --git a/third_party/WebKit/Source/modules/gamepad/NavigatorGamepad.cpp b/third_party/WebKit/Source/modules/gamepad/NavigatorGamepad.cpp
index bbd3197ab48d..f58777b37dfa 100644
--- a/third_party/WebKit/Source/modules/gamepad/NavigatorGamepad.cpp
+++ b/third_party/WebKit/Source/modules/gamepad/NavigatorGamepad.cpp
@@ -60,7 +60,7 @@ static void SampleGamepads(ListType* into) {
   for (unsigned i = 0; i < WebGamepads::kItemsLengthCap; ++i) {
     WebGamepad& web_gamepad = gamepads.items[i];
     if (web_gamepad.connected) {
-      GamepadType* gamepad = into->Item(i);
+      GamepadType* gamepad = into->item(i);
       if (!gamepad)
         gamepad = GamepadType::Create();
       SampleGamepad(i, *gamepad, web_gamepad);
diff --git a/third_party/WebKit/Source/modules/mediasource/SourceBuffer.cpp b/third_party/WebKit/Source/modules/mediasource/SourceBuffer.cpp
index c260269e4133..6b0d0f3cdd62 100644
--- a/third_party/WebKit/Source/modules/mediasource/SourceBuffer.cpp
+++ b/third_party/WebKit/Source/modules/mediasource/SourceBuffer.cpp
@@ -691,7 +691,7 @@ T* FindExistingTrackById(const TrackListBase<T>& track_list, const String& id) {
   // one that we had in previous init segments.
   if (track_list.length() == 1)
     return track_list.AnonymousIndexedGetter(0);
-  return track_list.GetTrackById(id);
+  return track_list.getTrackById(id);
 }
 
 const TrackDefault* SourceBuffer::GetTrackDefault(
diff --git a/third_party/WebKit/Source/modules/notifications/NotificationImageLoader.cpp b/third_party/WebKit/Source/modules/notifications/NotificationImageLoader.cpp
index 2febf45b01b7..d30cdba23446 100644
--- a/third_party/WebKit/Source/modules/notifications/NotificationImageLoader.cpp
+++ b/third_party/WebKit/Source/modules/notifications/NotificationImageLoader.cpp
@@ -21,7 +21,7 @@
 #include "wtf/Threading.h"
 
 #define NOTIFICATION_PER_TYPE_HISTOGRAM_COUNTS(metric, type_name, value, max) \
-  case NotificationImageLoader::Type::type_name: {                            \
+  case NotificationImageLoader::Type::k##type_name: {                         \
     DEFINE_THREAD_SAFE_STATIC_LOCAL(                                          \
         CustomCountHistogram, metric##type_name##Histogram,                   \
         new CustomCountHistogram("Notifications." #metric "." #type_name,     \
@@ -32,10 +32,10 @@
 
 #define NOTIFICATION_HISTOGRAM_COUNTS(metric, type, value, max)            \
   switch (type) {                                                          \
-    NOTIFICATION_PER_TYPE_HISTOGRAM_COUNTS(metric, kImage, value, max)      \
-    NOTIFICATION_PER_TYPE_HISTOGRAM_COUNTS(metric, kIcon, value, max)       \
-    NOTIFICATION_PER_TYPE_HISTOGRAM_COUNTS(metric, kBadge, value, max)      \
-    NOTIFICATION_PER_TYPE_HISTOGRAM_COUNTS(metric, kActionIcon, value, max) \
+    NOTIFICATION_PER_TYPE_HISTOGRAM_COUNTS(metric, Image, value, max)      \
+    NOTIFICATION_PER_TYPE_HISTOGRAM_COUNTS(metric, Icon, value, max)       \
+    NOTIFICATION_PER_TYPE_HISTOGRAM_COUNTS(metric, Badge, value, max)      \
+    NOTIFICATION_PER_TYPE_HISTOGRAM_COUNTS(metric, ActionIcon, value, max) \
   }
 
 namespace {
diff --git a/third_party/WebKit/Source/modules/payments/PaymentRequest.cpp b/third_party/WebKit/Source/modules/payments/PaymentRequest.cpp
index 1f8c5d845984..a23506422b51 100644
--- a/third_party/WebKit/Source/modules/payments/PaymentRequest.cpp
+++ b/third_party/WebKit/Source/modules/payments/PaymentRequest.cpp
@@ -132,35 +132,35 @@ static const int kCompleteTimeoutSeconds = 60;
 template <typename T>
 void ValidateShippingOptionOrPaymentItem(const T& item,
                                          ExceptionState& exception_state) {
-  if (!item.HasLabel() || item.Label().IsEmpty()) {
+  if (!item.hasLabel() || item.label().IsEmpty()) {
     exception_state.ThrowTypeError("Item label required");
     return;
   }
 
-  if (!item.HasAmount()) {
+  if (!item.hasAmount()) {
     exception_state.ThrowTypeError("Currency amount required");
     return;
   }
 
-  if (!item.Amount().hasCurrency()) {
+  if (!item.amount().hasCurrency()) {
     exception_state.ThrowTypeError("Currency code required");
     return;
   }
 
-  if (!item.Amount().hasValue()) {
+  if (!item.amount().hasValue()) {
     exception_state.ThrowTypeError("Currency value required");
     return;
   }
 
   String error_message;
   if (!PaymentsValidators::IsValidCurrencyCodeFormat(
-          item.Amount().currency(), item.Amount().currencySystem(),
+          item.amount().currency(), item.amount().currencySystem(),
           &error_message)) {
     exception_state.ThrowTypeError(error_message);
     return;
   }
 
-  if (!PaymentsValidators::IsValidAmountFormat(item.Amount().value(),
+  if (!PaymentsValidators::IsValidAmountFormat(item.amount().value(),
                                                &error_message)) {
     exception_state.ThrowTypeError(error_message);
     return;
diff --git a/third_party/WebKit/Source/modules/payments/PaymentTestHelper.cpp b/third_party/WebKit/Source/modules/payments/PaymentTestHelper.cpp
index cf9ffa7667cb..532c643c0ef2 100644
--- a/third_party/WebKit/Source/modules/payments/PaymentTestHelper.cpp
+++ b/third_party/WebKit/Source/modules/payments/PaymentTestHelper.cpp
@@ -45,13 +45,13 @@ void SetValues(PaymentItemOrPaymentShippingOption& original,
   }
 
   if (data != kPaymentTestDataAmount || modification_type != kPaymentTestRemoveKey)
-    original.SetAmount(item_amount);
+    original.setAmount(item_amount);
 
   if (data == kPaymentTestDataLabel) {
     if (modification_type == kPaymentTestOverwriteValue)
-      original.SetLabel(value_to_use);
+      original.setLabel(value_to_use);
   } else {
-    original.SetLabel("Label");
+    original.setLabel("Label");
   }
 }
 
diff --git a/third_party/WebKit/Source/modules/permissions/Permissions.cpp b/third_party/WebKit/Source/modules/permissions/Permissions.cpp
index e1533dc6a1c7..1a2054d2e5de 100644
--- a/third_party/WebKit/Source/modules/permissions/Permissions.cpp
+++ b/third_party/WebKit/Source/modules/permissions/Permissions.cpp
@@ -47,7 +47,7 @@ PermissionDescriptorPtr ParsePermission(ScriptState* script_state,
                                         const Dictionary raw_permission,
                                         ExceptionState& exception_state) {
   PermissionDescriptor permission =
-      NativeValueTraits<PermissionDescriptor>::nativeValue(
+      NativeValueTraits<PermissionDescriptor>::NativeValue(
           script_state->GetIsolate(), raw_permission.V8Value(), exception_state);
 
   if (exception_state.HadException()) {
@@ -62,7 +62,7 @@ PermissionDescriptorPtr ParsePermission(ScriptState* script_state,
     return CreatePermissionDescriptor(PermissionName::NOTIFICATIONS);
   if (name == "push") {
     PushPermissionDescriptor push_permission =
-        NativeValueTraits<PushPermissionDescriptor>::nativeValue(
+        NativeValueTraits<PushPermissionDescriptor>::NativeValue(
             script_state->GetIsolate(), raw_permission.V8Value(), exception_state);
     if (exception_state.HadException()) {
       exception_state.ThrowTypeError(exception_state.Message());
@@ -81,7 +81,7 @@ PermissionDescriptorPtr ParsePermission(ScriptState* script_state,
   }
   if (name == "midi") {
     MidiPermissionDescriptor midi_permission =
-        NativeValueTraits<MidiPermissionDescriptor>::nativeValue(
+        NativeValueTraits<MidiPermissionDescriptor>::NativeValue(
             script_state->GetIsolate(), raw_permission.V8Value(), exception_state);
     return CreateMidiPermissionDescriptor(midi_permission.sysex());
   }
diff --git a/third_party/WebKit/Source/modules/remoteplayback/RemotePlaybackTest.cpp b/third_party/WebKit/Source/modules/remoteplayback/RemotePlaybackTest.cpp
index 51f9aef1af77..7838441ba10d 100644
--- a/third_party/WebKit/Source/modules/remoteplayback/RemotePlaybackTest.cpp
+++ b/third_party/WebKit/Source/modules/remoteplayback/RemotePlaybackTest.cpp
@@ -235,7 +235,7 @@ TEST_F(RemotePlaybackTest, DisableRemotePlaybackCancelsAvailabilityCallbacks) {
 
   MockFunction* callback_function = MockFunction::Create(scope.GetScriptState());
   RemotePlaybackAvailabilityCallback* availability_callback =
-      RemotePlaybackAvailabilityCallback::create(scope.GetScriptState(),
+      RemotePlaybackAvailabilityCallback::Create(scope.GetScriptState(),
                                                  callback_function->Bind());
 
   // The initial call upon registering will not happen as it's posted on the
diff --git a/third_party/WebKit/Source/modules/webgl/WebGLRenderingContextBase.h b/third_party/WebKit/Source/modules/webgl/WebGLRenderingContextBase.h
index b56e8256924d..e1fa69650bbe 100644
--- a/third_party/WebKit/Source/modules/webgl/WebGLRenderingContextBase.h
+++ b/third_party/WebKit/Source/modules/webgl/WebGLRenderingContextBase.h
@@ -1017,7 +1017,7 @@ class MODULES_EXPORT WebGLRenderingContextBase : public CanvasRenderingContext,
 
   template <typename T>
   IntRect GetTextureSourceSize(T* texture_source) {
-    return IntRect(0, 0, texture_source->Width(), texture_source->Height());
+    return IntRect(0, 0, texture_source->width(), texture_source->height());
   }
 
   template <typename T>
@@ -1031,8 +1031,8 @@ class MODULES_EXPORT WebGLRenderingContextBase : public CanvasRenderingContext,
     DCHECK(function_name);
     DCHECK(selecting_sub_rectangle);
     DCHECK(image);
-    int image_width = static_cast<int>(image->Width());
-    int image_height = static_cast<int>(image->Height());
+    int image_width = static_cast<int>(image->width());
+    int image_height = static_cast<int>(image->height());
     *selecting_sub_rectangle =
         !(sub_rect.X() == 0 && sub_rect.Y() == 0 &&
           sub_rect.Width() == image_width && sub_rect.Height() == image_height);
diff --git a/third_party/WebKit/Source/platform/ColorData.gperf b/third_party/WebKit/Source/platform/ColorData.gperf
index 6bbfb4b24e9a..d7fd2dbdc21c 100644
--- a/third_party/WebKit/Source/platform/ColorData.gperf
+++ b/third_party/WebKit/Source/platform/ColorData.gperf
@@ -180,7 +180,7 @@ yellowgreen, 0xff9acd32
 #pragma clang diagnostic pop
 #endif
 
-const struct NamedColor* findColor(const char* str, unsigned len) {
+const struct NamedColor* FindColor(const char* str, unsigned len) {
   return ColorDataHash::findColorImpl(str, len);
 }
 
diff --git a/third_party/WebKit/Source/platform/Cursor.h b/third_party/WebKit/Source/platform/Cursor.h
index 73e25713cfc0..4b9fe6dd117b 100644
--- a/third_party/WebKit/Source/platform/Cursor.h
+++ b/third_party/WebKit/Source/platform/Cursor.h
@@ -32,6 +32,9 @@
 #include "wtf/Assertions.h"
 #include "wtf/RefPtr.h"
 
+// To avoid conflicts with the CreateWindow macro from the Windows SDK...
+#undef CopyCursor
+
 namespace blink {
 
 class PLATFORM_EXPORT Cursor {
diff --git a/third_party/WebKit/Source/platform/fonts/Font.h b/third_party/WebKit/Source/platform/fonts/Font.h
index 4be370b79eab..dcb2cc2a0605 100644
--- a/third_party/WebKit/Source/platform/fonts/Font.h
+++ b/third_party/WebKit/Source/platform/fonts/Font.h
@@ -41,6 +41,9 @@
 #include "platform/wtf/MathExtras.h"
 #include "platform/wtf/text/CharacterNames.h"
 
+// To avoid conflicts with the CreateWindow macro from the Windows SDK...
+#undef DrawText
+
 namespace blink {
 
 struct CharacterRange;
diff --git a/third_party/WebKit/Source/platform/graphics/paint/GeometryMapper.cpp b/third_party/WebKit/Source/platform/graphics/paint/GeometryMapper.cpp
index 5f83d92046b3..5e4cc32fa9a6 100644
--- a/third_party/WebKit/Source/platform/graphics/paint/GeometryMapper.cpp
+++ b/third_party/WebKit/Source/platform/graphics/paint/GeometryMapper.cpp
@@ -461,16 +461,16 @@ const NodeType* GeometryMapper::LowestCommonAncestor(const NodeType* a,
 // Explicitly instantiate the template for all supported types. This allows
 // placing the template implementation in this .cpp file. See
 // http://stackoverflow.com/a/488989 for more.
-template const EffectPaintPropertyNode* GeometryMapper::lowestCommonAncestor(
+template const EffectPaintPropertyNode* GeometryMapper::LowestCommonAncestor(
     const EffectPaintPropertyNode*,
     const EffectPaintPropertyNode*);
-template const TransformPaintPropertyNode* GeometryMapper::lowestCommonAncestor(
+template const TransformPaintPropertyNode* GeometryMapper::LowestCommonAncestor(
     const TransformPaintPropertyNode*,
     const TransformPaintPropertyNode*);
-template const ClipPaintPropertyNode* GeometryMapper::lowestCommonAncestor(
+template const ClipPaintPropertyNode* GeometryMapper::LowestCommonAncestor(
     const ClipPaintPropertyNode*,
     const ClipPaintPropertyNode*);
-template const ScrollPaintPropertyNode* GeometryMapper::lowestCommonAncestor(
+template const ScrollPaintPropertyNode* GeometryMapper::LowestCommonAncestor(
     const ScrollPaintPropertyNode*,
     const ScrollPaintPropertyNode*);
 
diff --git a/third_party/WebKit/Source/platform/graphics/paint/GeometryMapperTest.cpp b/third_party/WebKit/Source/platform/graphics/paint/GeometryMapperTest.cpp
index 42e697888294..74a849fa5f41 100644
--- a/third_party/WebKit/Source/platform/graphics/paint/GeometryMapperTest.cpp
+++ b/third_party/WebKit/Source/platform/graphics/paint/GeometryMapperTest.cpp
@@ -108,23 +108,23 @@ const static float kTestEpsilon = 1e-6;
 #define CHECK_MAPPINGS(inputRect, expectedVisualRect, expectedTransformedRect, \
                        expectedTransformToAncestor,                            \
                        expectedClipInAncestorSpace, localPropertyTreeState,    \
-                       ancestorPropertyTreeState, hasRadius)                   \
+                       ancestorPropertyTreeState)                              \
   do {                                                                         \
     FloatClipRect float_rect(inputRect);                                        \
     GeometryMapper::LocalToAncestorVisualRect(                                 \
         localPropertyTreeState, ancestorPropertyTreeState, float_rect);         \
     EXPECT_RECT_EQ(expectedVisualRect, float_rect.Rect());                      \
-    EXPECT_EQ(hasRadius, float_rect.hasRadius());                               \
+    EXPECT_EQ(has_radius, float_rect.HasRadius());                               \
     FloatClipRect float_clip_rect;                                               \
     float_clip_rect = GeometryMapper::LocalToAncestorClipRect(                   \
         localPropertyTreeState, ancestorPropertyTreeState);                    \
-    EXPECT_EQ(hasRadius, float_clip_rect.hasRadius());                           \
+    EXPECT_EQ(has_radius, float_clip_rect.HasRadius());                           \
     EXPECT_CLIP_RECT_EQ(expectedClipInAncestorSpace, float_clip_rect);           \
     float_rect.SetRect(inputRect);                                              \
     GeometryMapper::SourceToDestinationVisualRect(                             \
         localPropertyTreeState, ancestorPropertyTreeState, float_rect);         \
     EXPECT_RECT_EQ(expectedVisualRect, float_rect.Rect());                      \
-    EXPECT_EQ(hasRadius, float_rect.hasRadius());                               \
+    EXPECT_EQ(has_radius, float_rect.HasRadius());                               \
     FloatRect test_mapped_rect = inputRect;                                      \
     GeometryMapper::LocalToAncestorRect(localPropertyTreeState.Transform(),    \
                                         ancestorPropertyTreeState.Transform(), \
@@ -149,10 +149,10 @@ const static float kTestEpsilon = 1e-6;
       DCHECK(output_clip_for_testing);                                            \
       EXPECT_EQ(expectedClipInAncestorSpace, *output_clip_for_testing)            \
           << "expected: " << expectedClipInAncestorSpace.Rect().ToString()     \
-          << " (hasRadius: " << expectedClipInAncestorSpace.hasRadius()        \
+          << " (hasRadius: " << expectedClipInAncestorSpace.HasRadius()        \
           << ") "                                                              \
           << "actual: " << output_clip_for_testing->Rect().ToString()             \
-          << " (hasRadius: " << output_clip_for_testing->hasRadius() << ")";      \
+          << " (hasRadius: " << output_clip_for_testing->HasRadius() << ")";      \
     }                                                                          \
   } while (false)
 
@@ -162,8 +162,7 @@ TEST_F(GeometryMapperTest, Root) {
   bool has_radius = false;
   CHECK_MAPPINGS(input, input, input,
                  TransformPaintPropertyNode::Root()->Matrix(), FloatClipRect(),
-                 PropertyTreeState::Root(), PropertyTreeState::Root(),
-                 Has_radius);
+                 PropertyTreeState::Root(), PropertyTreeState::Root());
 }
 
 TEST_F(GeometryMapperTest, IdentityTransform) {
@@ -178,7 +177,7 @@ TEST_F(GeometryMapperTest, IdentityTransform) {
 
   bool has_radius = false;
   CHECK_MAPPINGS(input, input, input, transform->Matrix(), FloatClipRect(),
-                 local_state, PropertyTreeState::Root(), Has_radius);
+                 local_state, PropertyTreeState::Root());
 }
 
 TEST_F(GeometryMapperTest, TranslationTransform) {
@@ -195,7 +194,7 @@ TEST_F(GeometryMapperTest, TranslationTransform) {
 
   bool has_radius = false;
   CHECK_MAPPINGS(input, output, output, transform->Matrix(), FloatClipRect(),
-                 local_state, PropertyTreeState::Root(), Has_radius);
+                 local_state, PropertyTreeState::Root());
 
   GeometryMapper::AncestorToLocalRect(TransformPaintPropertyNode::Root(),
                                       local_state.Transform(), output);
@@ -218,7 +217,7 @@ TEST_F(GeometryMapperTest, RotationAndScaleTransform) {
 
   bool has_radius = false;
   CHECK_MAPPINGS(input, output, output, transform_matrix, FloatClipRect(),
-                 local_state, PropertyTreeState::Root(), Has_radius);
+                 local_state, PropertyTreeState::Root());
 }
 
 TEST_F(GeometryMapperTest, RotationAndScaleTransformWithTransformOrigin) {
@@ -238,7 +237,7 @@ TEST_F(GeometryMapperTest, RotationAndScaleTransformWithTransformOrigin) {
 
   bool has_radius = false;
   CHECK_MAPPINGS(input, output, output, transform_matrix, FloatClipRect(),
-                 local_state, PropertyTreeState::Root(), Has_radius);
+                 local_state, PropertyTreeState::Root());
 }
 
 TEST_F(GeometryMapperTest, NestedTransforms) {
@@ -263,7 +262,7 @@ TEST_F(GeometryMapperTest, NestedTransforms) {
 
   bool has_radius = false;
   CHECK_MAPPINGS(input, output, output, final, FloatClipRect(), local_state,
-                 PropertyTreeState::Root(), Has_radius);
+                 PropertyTreeState::Root());
 
   // Check the cached matrix for the intermediate transform.
   EXPECT_EQ(rotate_transform, *GetTransform(transform1.Get(),
@@ -293,7 +292,7 @@ TEST_F(GeometryMapperTest, NestedTransformsFlattening) {
   FloatRect output = final.MapRect(input);
   bool has_radius = false;
   CHECK_MAPPINGS(input, output, output, final, FloatClipRect(), local_state,
-                 PropertyTreeState::Root(), Has_radius);
+                 PropertyTreeState::Root());
 }
 
 TEST_F(GeometryMapperTest, NestedTransformsScaleAndTranslation) {
@@ -320,7 +319,7 @@ TEST_F(GeometryMapperTest, NestedTransformsScaleAndTranslation) {
 
   bool has_radius = false;
   CHECK_MAPPINGS(input, output, output, final, FloatClipRect(), local_state,
-                 PropertyTreeState::Root(), Has_radius);
+                 PropertyTreeState::Root());
 
   // Check the cached matrix for the intermediate transform.
   EXPECT_EQ(scale_transform, *GetTransform(transform1.Get(),
@@ -351,7 +350,7 @@ TEST_F(GeometryMapperTest, NestedTransformsIntermediateDestination) {
 
   bool has_radius = false;
   CHECK_MAPPINGS(input, output, output, scale_transform, FloatClipRect(),
-                 local_state, intermediate_state, Has_radius);
+                 local_state, intermediate_state);
 }
 
 TEST_F(GeometryMapperTest, SimpleClip) {
@@ -373,7 +372,7 @@ TEST_F(GeometryMapperTest, SimpleClip) {
                      ->Matrix(),  // Transform matrix to ancestor space
                  FloatClipRect(clip->ClipRect().Rect()),  // Clip rect in
                                                           // ancestor space
-                 local_state, PropertyTreeState::Root(), Has_radius);
+                 local_state, PropertyTreeState::Root());
 }
 
 TEST_F(GeometryMapperTest, RoundedClip) {
@@ -399,7 +398,7 @@ TEST_F(GeometryMapperTest, RoundedClip) {
                  TransformPaintPropertyNode::Root()
                      ->Matrix(),  // Transform matrix to ancestor space
                  expected_clip,    // Clip rect in ancestor space
-                 local_state, PropertyTreeState::Root(), Has_radius);
+                 local_state, PropertyTreeState::Root());
 }
 
 TEST_F(GeometryMapperTest, TwoClips) {
@@ -434,7 +433,7 @@ TEST_F(GeometryMapperTest, TwoClips) {
                      ->Matrix(),  // Transform matrix to ancestor space
                  clip_rect,        // Clip rect in ancestor space
                  local_state,
-                 ancestor_state, Has_radius);
+                 ancestor_state);
 
   ancestor_state.SetClip(clip1.Get());
   FloatRect output2(10, 10, 50, 50);
@@ -449,7 +448,7 @@ TEST_F(GeometryMapperTest, TwoClips) {
                  TransformPaintPropertyNode::Root()
                      ->Matrix(),  // Transform matrix to ancestor space
                  clip_rect2,       // Clip rect in ancestor space
-                 local_state, ancestor_state, Has_radius);
+                 local_state, ancestor_state);
 }
 
 TEST_F(GeometryMapperTest, TwoClipsTransformAbove) {
@@ -487,7 +486,7 @@ TEST_F(GeometryMapperTest, TwoClipsTransformAbove) {
                      ->Matrix(),  // Transform matrix to ancestor space
                  expected_clip,    // Clip rect in ancestor space
                  local_state,
-                 ancestor_state, Has_radius);
+                 ancestor_state);
 
   expected_clip.SetRect(clip1->ClipRect().Rect());
   local_state.SetClip(clip1.Get());
@@ -499,7 +498,7 @@ TEST_F(GeometryMapperTest, TwoClipsTransformAbove) {
                      ->Matrix(),  // Transform matrix to ancestor space
                  expected_clip,    // Clip rect in ancestor space
                  local_state,
-                 ancestor_state, Has_radius);
+                 ancestor_state);
 }
 
 TEST_F(GeometryMapperTest, ClipBeforeTransform) {
@@ -530,7 +529,7 @@ TEST_F(GeometryMapperTest, ClipBeforeTransform) {
       rotate_transform,                 // Transform matrix to ancestor space
       FloatClipRect(rotate_transform.MapRect(
           clip->ClipRect().Rect())),  // Clip rect in ancestor space
-      local_state, PropertyTreeState::Root(), Has_radius);
+      local_state, PropertyTreeState::Root());
 }
 
 TEST_F(GeometryMapperTest, ClipAfterTransform) {
@@ -560,7 +559,7 @@ TEST_F(GeometryMapperTest, ClipAfterTransform) {
       rotate_transform.MapRect(input),  // Transformed rect (not clipped)
       rotate_transform,                 // Transform matrix to ancestor space
       FloatClipRect(clip->ClipRect().Rect()),  // Clip rect in ancestor space
-      local_state, PropertyTreeState::Root(), Has_radius);
+      local_state, PropertyTreeState::Root());
 }
 
 TEST_F(GeometryMapperTest, TwoClipsWithTransformBetween) {
@@ -595,7 +594,7 @@ TEST_F(GeometryMapperTest, TwoClipsWithTransformBetween) {
         rotate_transform.MapRect(input),  // Transformed rect (not clipped)
         rotate_transform,                 // Transform matrix to ancestor space
         FloatClipRect(clip1->ClipRect().Rect()),  // Clip rect in ancestor space
-        local_state, PropertyTreeState::Root(), Has_radius);
+        local_state, PropertyTreeState::Root());
   }
 
   {
@@ -621,7 +620,7 @@ TEST_F(GeometryMapperTest, TwoClipsWithTransformBetween) {
         rotate_transform.MapRect(input),  // Transformed rect (not clipped)
         rotate_transform,                 // Transform matrix to ancestor space
         FloatClipRect(mapped_clip),       // Clip rect in ancestor space
-        local_state, PropertyTreeState::Root(), Has_radius);
+        local_state, PropertyTreeState::Root());
   }
 }
 
@@ -844,7 +843,7 @@ TEST_F(GeometryMapperTest, FilterWithClipsAndTransforms) {
       transform_above_effect->Matrix() * transform_below_effect->Matrix();
   CHECK_MAPPINGS(input, output, FloatRect(0, 0, 300, 300), combined_transform,
                  FloatClipRect(FloatRect(30, 30, 270, 270)), local_state,
-                 PropertyTreeState::Root(), Has_radius);
+                 PropertyTreeState::Root());
 }
 
 TEST_F(GeometryMapperTest, ReflectionWithPaintOffset) {
@@ -866,7 +865,7 @@ TEST_F(GeometryMapperTest, ReflectionWithPaintOffset) {
 
   bool has_radius = false;
   CHECK_MAPPINGS(input, output, input, TransformationMatrix(), FloatClipRect(),
-                 local_state, PropertyTreeState::Root(), Has_radius);
+                 local_state, PropertyTreeState::Root());
 }
 
 }  // namespace blink
diff --git a/third_party/WebKit/Source/platform/graphics/paint/Transform3DDisplayItem.h b/third_party/WebKit/Source/platform/graphics/paint/Transform3DDisplayItem.h
index cab430ff6902..cce437517d11 100644
--- a/third_party/WebKit/Source/platform/graphics/paint/Transform3DDisplayItem.h
+++ b/third_party/WebKit/Source/platform/graphics/paint/Transform3DDisplayItem.h
@@ -65,7 +65,7 @@ class PLATFORM_EXPORT EndTransform3DDisplayItem final
  private:
 #if DCHECK_IS_ON()
   bool IsEndAndPairedWith(DisplayItem::Type other_type) const final {
-    return DisplayItem::transform3DTypeToEndTransform3DType(other_type) ==
+    return DisplayItem::Transform3DTypeToEndTransform3DType(other_type) ==
            GetType();
   }
 #endif
diff --git a/third_party/WebKit/Source/platform/graphics/skia/SkiaUtils.cpp b/third_party/WebKit/Source/platform/graphics/skia/SkiaUtils.cpp
index 05254db57f83..fa57166259d0 100644
--- a/third_party/WebKit/Source/platform/graphics/skia/SkiaUtils.cpp
+++ b/third_party/WebKit/Source/platform/graphics/skia/SkiaUtils.cpp
@@ -363,11 +363,11 @@ void DrawPlatformFocusRing(const PrimitiveType& primitive,
 #endif
 }
 
-template void PLATFORM_EXPORT drawPlatformFocusRing<SkRect>(const SkRect&,
+template void PLATFORM_EXPORT DrawPlatformFocusRing<SkRect>(const SkRect&,
                                                             PaintCanvas*,
                                                             SkColor,
                                                             float width);
-template void PLATFORM_EXPORT drawPlatformFocusRing<SkPath>(const SkPath&,
+template void PLATFORM_EXPORT DrawPlatformFocusRing<SkPath>(const SkPath&,
                                                             PaintCanvas*,
                                                             SkColor,
                                                             float width);
diff --git a/third_party/WebKit/Source/platform/heap/BlinkGC.h b/third_party/WebKit/Source/platform/heap/BlinkGC.h
index 75b64328d42d..e31efb9f6a76 100644
--- a/third_party/WebKit/Source/platform/heap/BlinkGC.h
+++ b/third_party/WebKit/Source/platform/heap/BlinkGC.h
@@ -48,8 +48,10 @@ using MovingObjectCallback = void (*)(void* callback_data,
 #define FOR_EACH_TYPED_ARENA(H) \
   H(Node)                       \
   H(CSSValue)
+  /* DO NOT SUBMIT - Conflict resolution helper:
+   * Important to have CSSValue and Node rather than kCSSValue or kNode above */
 
-#define TypedArenaEnumName(Type) Type##ArenaIndex,
+#define TypedArenaEnumName(Type) k##Type##ArenaIndex,
 
 class PLATFORM_EXPORT BlinkGC final {
   STATIC_ONLY(BlinkGC);
diff --git a/third_party/WebKit/Source/platform/heap/HeapTest.cpp b/third_party/WebKit/Source/platform/heap/HeapTest.cpp
index c5d6e9e3df05..071a06ccb1d3 100644
--- a/third_party/WebKit/Source/platform/heap/HeapTest.cpp
+++ b/third_party/WebKit/Source/platform/heap/HeapTest.cpp
@@ -722,7 +722,7 @@ class IntNode : public GarbageCollected<IntNode> {
     ThreadState* state = ThreadState::Current();
     const char* type_name = WTF_HEAP_PROFILER_TYPE_NAME(IntNode);
     return ThreadHeap::AllocateOnArenaIndex(
-        state, size, BlinkGC::NodeArenaIndex, GCInfoTrait<IntNode>::Index(),
+        state, size, BlinkGC::kNodeArenaIndex, GCInfoTrait<IntNode>::Index(),
         type_name);
   }
 
diff --git a/third_party/WebKit/Source/platform/heap/ThreadState.cpp b/third_party/WebKit/Source/platform/heap/ThreadState.cpp
index d9a3a4c8d0c2..b526834d3d86 100644
--- a/third_party/WebKit/Source/platform/heap/ThreadState.cpp
+++ b/third_party/WebKit/Source/platform/heap/ThreadState.cpp
@@ -1031,7 +1031,7 @@ void ThreadState::PostSweep() {
     time_for_sweep_histogram.Count(accumulated_sweeping_time_);
 
 #define COUNT_COLLECTION_RATE_HISTOGRAM_BY_GC_REASON(GCReason)              \
-  case BlinkGC::GCReason: {                                                 \
+  case BlinkGC::k##GCReason: {                                                 \
     DEFINE_STATIC_LOCAL(CustomCountHistogram, histogram,                    \
                         ("BlinkGC.CollectionRate_" #GCReason, 1, 100, 20)); \
     histogram.Count(static_cast<int>(100 * collection_rate));                \
@@ -1039,12 +1039,12 @@ void ThreadState::PostSweep() {
   }
 
     switch (heap_->LastGCReason()) {
-      COUNT_COLLECTION_RATE_HISTOGRAM_BY_GC_REASON(kIdleGC)
-      COUNT_COLLECTION_RATE_HISTOGRAM_BY_GC_REASON(kPreciseGC)
-      COUNT_COLLECTION_RATE_HISTOGRAM_BY_GC_REASON(kConservativeGC)
-      COUNT_COLLECTION_RATE_HISTOGRAM_BY_GC_REASON(kForcedGC)
-      COUNT_COLLECTION_RATE_HISTOGRAM_BY_GC_REASON(kMemoryPressureGC)
-      COUNT_COLLECTION_RATE_HISTOGRAM_BY_GC_REASON(kPageNavigationGC)
+      COUNT_COLLECTION_RATE_HISTOGRAM_BY_GC_REASON(IdleGC)
+      COUNT_COLLECTION_RATE_HISTOGRAM_BY_GC_REASON(PreciseGC)
+      COUNT_COLLECTION_RATE_HISTOGRAM_BY_GC_REASON(ConservativeGC)
+      COUNT_COLLECTION_RATE_HISTOGRAM_BY_GC_REASON(ForcedGC)
+      COUNT_COLLECTION_RATE_HISTOGRAM_BY_GC_REASON(MemoryPressureGC)
+      COUNT_COLLECTION_RATE_HISTOGRAM_BY_GC_REASON(PageNavigationGC)
       default:
         break;
     }
@@ -1357,11 +1357,11 @@ void ThreadState::TakeSnapshot(SnapshotType type) {
     number_of_heaps_reported++;                                            \
     switch (type) {                                                     \
       case SnapshotType::kHeapSnapshot:                                  \
-        arenas_[BlinkGC::ArenaType##ArenaIndex]->TakeSnapshot(         \
+        arenas_[BlinkGC::k##ArenaType##ArenaIndex]->TakeSnapshot(         \
             heaps_dump_name + "/" #ArenaType, info);                      \
         break;                                                          \
       case SnapshotType::kFreelistSnapshot:                              \
-        arenas_[BlinkGC::ArenaType##ArenaIndex]->TakeFreelistSnapshot( \
+        arenas_[BlinkGC::k##ArenaType##ArenaIndex]->TakeFreelistSnapshot( \
             heaps_dump_name + "/" #ArenaType);                            \
         break;                                                          \
       default:                                                          \
@@ -1369,6 +1369,8 @@ void ThreadState::TakeSnapshot(SnapshotType type) {
     }                                                                   \
   }
 
+  /* DO NOT SUBMIT - Conflict resolution helper:
+   * Important to use NormalPage instead of kNormalPage1 below */
   SNAPSHOT_HEAP(NormalPage1);
   SNAPSHOT_HEAP(NormalPage2);
   SNAPSHOT_HEAP(NormalPage3);
@@ -1381,6 +1383,8 @@ void ThreadState::TakeSnapshot(SnapshotType type) {
   SNAPSHOT_HEAP(InlineVector);
   SNAPSHOT_HEAP(HashTable);
   SNAPSHOT_HEAP(LargeObject);
+  /* DO NOT SUBMIT - Conflict resolution helper:
+   * Important to use LargeObject instead of kLargeObject above */
   FOR_EACH_TYPED_ARENA(SNAPSHOT_HEAP);
 
   ASSERT(number_of_heaps_reported == BlinkGC::kNumberOfArenas);
diff --git a/third_party/WebKit/Source/platform/heap/asm/SaveRegisters_arm.S b/third_party/WebKit/Source/platform/heap/asm/SaveRegisters_arm.S
index 4e2f9912c953..af961fe1a5d5 100644
--- a/third_party/WebKit/Source/platform/heap/asm/SaveRegisters_arm.S
+++ b/third_party/WebKit/Source/platform/heap/asm/SaveRegisters_arm.S
@@ -31,12 +31,12 @@
 
 /*
  * typedef void (*PushAllRegistersCallback)(SafePointBarrier*, ThreadState*, intptr_t*);
- * extern "C" void pushAllRegisters(SafePointBarrier*, ThreadState*, PushAllRegistersCallback)
+ * extern "C" void PushAllRegisters(SafePointBarrier*, ThreadState*, PushAllRegistersCallback)
  */
 
-.type pushAllRegisters, %function
-.global pushAllRegisters
-.hidden pushAllRegisters
+.type PushAllRegisters, %function
+.global PushAllRegisters
+.hidden PushAllRegisters
 #ifdef __thumb__
 /* In THUMB Mode jump to ARM stub via bx to ensure CPU mode switch.
  * FIXME: This trampoline is provided to workaround bugs in
@@ -46,7 +46,7 @@
 .align 2
 .code 16
 .thumb_func
-pushAllRegisters:
+PushAllRegisters:
         adr r3, pushAllRegistersARM
         bx r3
 
@@ -59,7 +59,7 @@ pushAllRegistersARM:
 /* ARM Mode */
 .align 4
 .code 32
-pushAllRegisters:
+PushAllRegisters:
 #endif
         /* Push all callee-saved registers and save return address. */
         push {r4-r11, lr}
diff --git a/third_party/WebKit/Source/platform/heap/asm/SaveRegisters_arm64.S b/third_party/WebKit/Source/platform/heap/asm/SaveRegisters_arm64.S
index 7bb988d0d153..a6f31555e6f4 100644
--- a/third_party/WebKit/Source/platform/heap/asm/SaveRegisters_arm64.S
+++ b/third_party/WebKit/Source/platform/heap/asm/SaveRegisters_arm64.S
@@ -31,13 +31,13 @@
 
 /*
  * typedef void (*PushAllRegistersCallback)(SafePointBarrier*, ThreadState*, intptr_t*);
- * extern "C" void pushAllRegisters(SafePointBarrier*, ThreadState*, PushAllRegistersCallback)
+ * extern "C" void PushAllRegisters(SafePointBarrier*, ThreadState*, PushAllRegistersCallback)
  */
 
-.type pushAllRegisters, %function
-.global pushAllRegisters
-.hidden pushAllRegisters
-pushAllRegisters:
+.type PushAllRegisters, %function
+.global PushAllRegisters
+.hidden PushAllRegisters
+PushAllRegisters:
         /* Save return address. */
         sub sp, sp, #96
         stp x19, x20, [sp, #80]
diff --git a/third_party/WebKit/Source/platform/heap/asm/SaveRegisters_mips.S b/third_party/WebKit/Source/platform/heap/asm/SaveRegisters_mips.S
index 820209fbc022..f2b22bda65fd 100644
--- a/third_party/WebKit/Source/platform/heap/asm/SaveRegisters_mips.S
+++ b/third_party/WebKit/Source/platform/heap/asm/SaveRegisters_mips.S
@@ -31,13 +31,13 @@
 
 /*
  * typedef void (*PushAllRegistersCallback)(SafePointBarrier*, ThreadState*, intptr_t*);
- * extern "C" void pushAllRegisters(SafePointBarrier*, ThreadState*, PushAllRegistersCallback)
+ * extern "C" void PushAllRegisters(SafePointBarrier*, ThreadState*, PushAllRegistersCallback)
  */
 
-.type pushAllRegisters, %function
-.global pushAllRegisters
-.hidden pushAllRegisters
-pushAllRegisters:
+.type PushAllRegisters, %function
+.global PushAllRegisters
+.hidden PushAllRegisters
+PushAllRegisters:
         // Reserve space for callee-saved registers, return address,
         // as well as for the callee arguments.
         addiu $sp,$sp,-56
diff --git a/third_party/WebKit/Source/platform/heap/asm/SaveRegisters_mips64.S b/third_party/WebKit/Source/platform/heap/asm/SaveRegisters_mips64.S
index 2805b5c4336a..71d04553403e 100644
--- a/third_party/WebKit/Source/platform/heap/asm/SaveRegisters_mips64.S
+++ b/third_party/WebKit/Source/platform/heap/asm/SaveRegisters_mips64.S
@@ -4,13 +4,13 @@
 
 /*
  * typedef void (*PushAllRegistersCallback)(SafePointBarrier*, ThreadState*, intptr_t*);
- * extern "C" void pushAllRegisters(SafePointBarrier*, ThreadState*, PushAllRegistersCallback)
+ * extern "C" void PushAllRegisters(SafePointBarrier*, ThreadState*, PushAllRegistersCallback)
  */
 
-.type pushAllRegisters, %function
-.global pushAllRegisters
-.hidden pushAllRegisters
-pushAllRegisters:
+.type PushAllRegisters, %function
+.global PushAllRegisters
+.hidden PushAllRegisters
+PushAllRegisters:
         // Push all callee-saves registers to get them
         // on the stack for conservative stack scanning.
         // Reserve space for callee-saved registers and return address.
diff --git a/third_party/WebKit/Source/platform/heap/asm/SaveRegisters_x86.asm b/third_party/WebKit/Source/platform/heap/asm/SaveRegisters_x86.asm
index 35fa2c978e7c..8374167f880d 100644
--- a/third_party/WebKit/Source/platform/heap/asm/SaveRegisters_x86.asm
+++ b/third_party/WebKit/Source/platform/heap/asm/SaveRegisters_x86.asm
@@ -65,13 +65,13 @@
 %endif
 
 ;; typedef void (*PushAllRegistersCallback)(SafePointBarrier*, ThreadState*, intptr_t*);
-;; extern "C" void pushAllRegisters(SafePointBarrier*, ThreadState*, PushAllRegistersCallback)
+;; extern "C" void PushAllRegisters(SafePointBarrier*, ThreadState*, PushAllRegistersCallback)
 
-        global mangle(pushAllRegisters) PRIVATE
+        global mangle(PushAllRegisters) PRIVATE
 
 %if X64POSIX
 
-mangle(pushAllRegisters):
+mangle(PushAllRegisters):
         ;; Push all callee-saves registers to get them
         ;; on the stack for conservative stack scanning.
         ;; We maintain 16-byte alignment at calls (required on Mac).
@@ -98,7 +98,7 @@ mangle(pushAllRegisters):
 
 %elif X64WIN
 
-mangle(pushAllRegisters):
+mangle(PushAllRegisters):
         ;; Push all callee-saves registers to get them
         ;; on the stack for conservative stack scanning.
         ;; There is an 8-byte return address on the stack and we push
@@ -126,7 +126,7 @@ mangle(pushAllRegisters):
 
 %elif IA32
 
-mangle(pushAllRegisters):
+mangle(PushAllRegisters):
         ;; Push all callee-saves registers to get them
         ;; on the stack for conservative stack scanning.
         ;; We maintain 16-byte alignment at calls (required on
diff --git a/third_party/WebKit/Source/platform/image-encoders/JPEGImageEncoderTest.cpp b/third_party/WebKit/Source/platform/image-encoders/JPEGImageEncoderTest.cpp
index e7e8e359e9b3..58565098ca2c 100644
--- a/third_party/WebKit/Source/platform/image-encoders/JPEGImageEncoderTest.cpp
+++ b/third_party/WebKit/Source/platform/image-encoders/JPEGImageEncoderTest.cpp
@@ -35,10 +35,11 @@ TEST_F(RGBAtoRGBTest, testOpaqueCaseEven8pixels) {
 
   unsigned char expected[] = {255, 0, 0, 255, 0, 0, 255, 0, 0, 255, 0, 0, 0,
                               255, 0, 0, 255, 0, 0, 255, 0, 0, 255, 0};
+  // TODO(dcheng): Make this all constexpr.
 #if OS(WIN)
   // Windows release bot can't be reasoned with (compiler error C2131).
-  static const constexpr size_t kPixels = sizeof(canvas) / kChannelsRGBA;
-  static const constexpr size_t kRgbSize = kPixels * kChannelsRGB;
+  static const constexpr size_t pixels = sizeof(canvas) / kChannelsRGBA;
+  static const constexpr size_t rgb_size = pixels * kChannelsRGB;
 #else
   const size_t pixels = CalculateRGBAPixels(sizeof(canvas));
   const size_t rgb_size = CalculateRGBOutputSize(sizeof(canvas));
@@ -47,7 +48,7 @@ TEST_F(RGBAtoRGBTest, testOpaqueCaseEven8pixels) {
   unsigned char output[rgb_size];
   memset(output, 0, rgb_size);
 
-  blink::RGBAtoRGB(canvas, static_cast<unsigned>(kPixels), output);
+  blink::RGBAtoRGB(canvas, static_cast<unsigned>(pixels), output);
 
   EXPECT_EQ(memcmp(expected, output, rgb_size), 0);
 }
diff --git a/third_party/WebKit/Source/platform/loader/fetch/Resource.h b/third_party/WebKit/Source/platform/loader/fetch/Resource.h
index 24bd426833e6..2f7cc0fe071a 100644
--- a/third_party/WebKit/Source/platform/loader/fetch/Resource.h
+++ b/third_party/WebKit/Source/platform/loader/fetch/Resource.h
@@ -499,10 +499,10 @@ class ResourceFactory {
   Resource::Type type_;
 };
 
-#define DEFINE_RESOURCE_TYPE_CASTS(typeName)                   \
-  DEFINE_TYPE_CASTS(typeName##Resource, Resource, resource,    \
-                    resource->GetType() == Resource::typeName, \
-                    resource.GetType() == Resource::typeName);
+#define DEFINE_RESOURCE_TYPE_CASTS(typeName)                      \
+  DEFINE_TYPE_CASTS(typeName##Resource, Resource, resource,       \
+                    resource->GetType() == Resource::k##typeName, \
+                    resource.GetType() == Resource::k##typeName);
 
 }  // namespace blink
 
diff --git a/third_party/WebKit/Source/platform/loader/fetch/ResourceFetcher.cpp b/third_party/WebKit/Source/platform/loader/fetch/ResourceFetcher.cpp
index aa70c1cc6112..cc5a5814a797 100644
--- a/third_party/WebKit/Source/platform/loader/fetch/ResourceFetcher.cpp
+++ b/third_party/WebKit/Source/platform/loader/fetch/ResourceFetcher.cpp
@@ -69,7 +69,7 @@ enum SriResourceIntegrityMismatchEvent {
 };
 
 #define DEFINE_SINGLE_RESOURCE_HISTOGRAM(prefix, name)                        \
-  case Resource::name: {                                                      \
+  case Resource::k##name: {                                                      \
     DEFINE_THREAD_SAFE_STATIC_LOCAL(                                          \
         EnumerationHistogram, resource_histogram,                              \
         new EnumerationHistogram(                                             \
@@ -79,21 +79,21 @@ enum SriResourceIntegrityMismatchEvent {
   }
 
 #define DEFINE_RESOURCE_HISTOGRAM(prefix)                    \
-  switch (factory.GetType()) {                                  \
-    DEFINE_SINGLE_RESOURCE_HISTOGRAM(prefix, kCSSStyleSheet)  \
-    DEFINE_SINGLE_RESOURCE_HISTOGRAM(prefix, kFont)           \
-    DEFINE_SINGLE_RESOURCE_HISTOGRAM(prefix, kImage)          \
-    DEFINE_SINGLE_RESOURCE_HISTOGRAM(prefix, kImportResource) \
-    DEFINE_SINGLE_RESOURCE_HISTOGRAM(prefix, kLinkPrefetch)   \
-    DEFINE_SINGLE_RESOURCE_HISTOGRAM(prefix, kMainResource)   \
-    DEFINE_SINGLE_RESOURCE_HISTOGRAM(prefix, kManifest)       \
-    DEFINE_SINGLE_RESOURCE_HISTOGRAM(prefix, kMedia)          \
-    DEFINE_SINGLE_RESOURCE_HISTOGRAM(prefix, kMock)           \
-    DEFINE_SINGLE_RESOURCE_HISTOGRAM(prefix, kRaw)            \
-    DEFINE_SINGLE_RESOURCE_HISTOGRAM(prefix, kScript)         \
-    DEFINE_SINGLE_RESOURCE_HISTOGRAM(prefix, kSVGDocument)    \
-    DEFINE_SINGLE_RESOURCE_HISTOGRAM(prefix, kTextTrack)      \
-    DEFINE_SINGLE_RESOURCE_HISTOGRAM(prefix, kXSLStyleSheet)  \
+  switch (factory.GetType()) {                               \
+    DEFINE_SINGLE_RESOURCE_HISTOGRAM(prefix, CSSStyleSheet)  \
+    DEFINE_SINGLE_RESOURCE_HISTOGRAM(prefix, Font)           \
+    DEFINE_SINGLE_RESOURCE_HISTOGRAM(prefix, Image)          \
+    DEFINE_SINGLE_RESOURCE_HISTOGRAM(prefix, ImportResource) \
+    DEFINE_SINGLE_RESOURCE_HISTOGRAM(prefix, LinkPrefetch)   \
+    DEFINE_SINGLE_RESOURCE_HISTOGRAM(prefix, MainResource)   \
+    DEFINE_SINGLE_RESOURCE_HISTOGRAM(prefix, Manifest)       \
+    DEFINE_SINGLE_RESOURCE_HISTOGRAM(prefix, Media)          \
+    DEFINE_SINGLE_RESOURCE_HISTOGRAM(prefix, Mock)           \
+    DEFINE_SINGLE_RESOURCE_HISTOGRAM(prefix, Raw)            \
+    DEFINE_SINGLE_RESOURCE_HISTOGRAM(prefix, Script)         \
+    DEFINE_SINGLE_RESOURCE_HISTOGRAM(prefix, SVGDocument)    \
+    DEFINE_SINGLE_RESOURCE_HISTOGRAM(prefix, TextTrack)      \
+    DEFINE_SINGLE_RESOURCE_HISTOGRAM(prefix, XSLStyleSheet)  \
   }
 
 void AddRedirectsToTimingInfo(Resource* resource, ResourceTimingInfo* info) {
diff --git a/third_party/WebKit/Source/platform/network/HTTPParsers.cpp b/third_party/WebKit/Source/platform/network/HTTPParsers.cpp
index 716c26cc11d0..0669e5002f8f 100644
--- a/third_party/WebKit/Source/platform/network/HTTPParsers.cpp
+++ b/third_party/WebKit/Source/platform/network/HTTPParsers.cpp
@@ -167,7 +167,7 @@ const UChar* ParseSuboriginName(const UChar* begin,
 
   const UChar* position = begin;
 
-  if (!skipExactly<UChar, isASCIILower>(position, end)) {
+  if (!skipExactly<UChar, IsASCIILower>(position, end)) {
     messages.push_back("Invalid character \'" + String(position, 1) +
                        "\' in suborigin. First character must be a lower case "
                        "alphabetic character.");
@@ -769,7 +769,7 @@ bool ParseSuboriginHeader(const String& header,
   const UChar* position = characters.Data();
   const UChar* end = position + characters.size();
 
-  skipWhile<UChar, isASCIISpace>(position, end);
+  skipWhile<UChar, IsASCIISpace>(position, end);
 
   String name;
   position = ParseSuboriginName(position, end, name, messages);
@@ -782,7 +782,7 @@ bool ParseSuboriginHeader(const String& header,
   suborigin->SetName(name);
 
   while (position < end) {
-    skipWhile<UChar, isASCIISpace>(position, end);
+    skipWhile<UChar, IsASCIISpace>(position, end);
     if (position == end)
       return true;
 
diff --git a/third_party/WebKit/Source/platform/text/CharacterPropertyDataGenerator.cpp b/third_party/WebKit/Source/platform/text/CharacterPropertyDataGenerator.cpp
index 9b4bd1f2af06..55c4d36e8c21 100644
--- a/third_party/WebKit/Source/platform/text/CharacterPropertyDataGenerator.cpp
+++ b/third_party/WebKit/Source/platform/text/CharacterPropertyDataGenerator.cpp
@@ -54,8 +54,8 @@ static void GenerateUTrieSerialized(FILE* fp, int32_t size, uint8_t* array) {
   fprintf(fp,
           "#include <cstdint>\n\n"
           "namespace blink {\n\n"
-          "extern const int32_t serializedCharacterDataSize = %d;\n"
-          "extern const uint8_t serializedCharacterData[] = {",
+          "extern const int32_t kSerializedCharacterDataSize = %d;\n"
+          "extern const uint8_t kSerializedCharacterData[] = {",
           size);
   for (int32_t i = 0; i < size;) {
     fprintf(fp, "\n   ");
diff --git a/third_party/WebKit/Source/platform/weborigin/OriginAccessEntry.cpp b/third_party/WebKit/Source/platform/weborigin/OriginAccessEntry.cpp
index b140636fef7b..15584d38b78b 100644
--- a/third_party/WebKit/Source/platform/weborigin/OriginAccessEntry.cpp
+++ b/third_party/WebKit/Source/platform/weborigin/OriginAccessEntry.cpp
@@ -85,7 +85,7 @@ OriginAccessEntry::OriginAccessEntry(const String& protocol,
   ASSERT(subdomain_setting >= kAllowSubdomains ||
          subdomain_setting <= kDisallowSubdomains);
 
-  host_is_ip_address_ = HostIsIPAddress(host);
+  host_is_ip_address_ = blink::HostIsIPAddress(host);
 
   // Look for top-level domains, either with or without an additional dot.
   if (!host_is_ip_address_) {
diff --git a/third_party/WebKit/Source/platform/wtf/ASCIICType.h b/third_party/WebKit/Source/platform/wtf/ASCIICType.h
index 9d38fc9f6400..8361a8f22705 100644
--- a/third_party/WebKit/Source/platform/wtf/ASCIICType.h
+++ b/third_party/WebKit/Source/platform/wtf/ASCIICType.h
@@ -87,7 +87,7 @@ inline bool IsASCIIPrintable(CharType c) {
 }
 
 /*
- Statistics from a run of Apple's page load test for callers of isASCIISpace:
+ Statistics from a run of Apple's page load test for callers of IsASCIISpace:
 
  character          count
  ---------          -----
diff --git a/third_party/WebKit/Source/platform/wtf/RetainPtr.h b/third_party/WebKit/Source/platform/wtf/RetainPtr.h
index 2eb497f52d9f..1322eb2a1832 100644
--- a/third_party/WebKit/Source/platform/wtf/RetainPtr.h
+++ b/third_party/WebKit/Source/platform/wtf/RetainPtr.h
@@ -293,14 +293,6 @@ inline RetainPtr<T> AdoptNS(T o) {
   return RetainPtr<T>(kAdoptNS, o);
 }
 
-// Helper function for creating a RetainPtr using template argument deduction.
-template <typename T>
-WARN_UNUSED_RESULT inline RetainPtr<T> RetainPtr(T);
-template <typename T>
-inline RetainPtr<T> RetainPtr(T o) {
-  return RetainPtr<T>(o);
-}
-
 template <typename T>
 struct HashTraits<RetainPtr<T>> : SimpleClassHashTraits<RetainPtr<T>> {};
 
@@ -336,6 +328,5 @@ using WTF::kAdoptNS;
 using WTF::AdoptCF;
 using WTF::AdoptNS;
 using WTF::RetainPtr;
-using WTF::RetainPtr;
 
 #endif  // WTF_RetainPtr_h
diff --git a/third_party/WebKit/Source/platform/wtf/text/StringImpl.cpp b/third_party/WebKit/Source/platform/wtf/text/StringImpl.cpp
index 4ede6071cd55..da8757354fbb 100644
--- a/third_party/WebKit/Source/platform/wtf/text/StringImpl.cpp
+++ b/third_party/WebKit/Source/platform/wtf/text/StringImpl.cpp
@@ -104,7 +104,7 @@ static void fillWithSnippet(const StringImpl* string, Vector<char>& snippet) {
   size_t i;
   for (i = 0; i < string->length() && i < kMaxSnippetLength; ++i) {
     UChar c = (*string)[i];
-    if (isASCIIPrintable(c))
+    if (IsASCIIPrintable(c))
       snippet.append(c);
     else
       snippet.append('?');
diff --git a/third_party/WebKit/Source/platform/wtf/text/StringImpl.h b/third_party/WebKit/Source/platform/wtf/text/StringImpl.h
index 5ee41f295263..be9864e4c047 100644
--- a/third_party/WebKit/Source/platform/wtf/text/StringImpl.h
+++ b/third_party/WebKit/Source/platform/wtf/text/StringImpl.h
@@ -825,7 +825,7 @@ static inline int CodePointCompare(const StringImpl* string1,
 }
 
 static inline bool IsSpaceOrNewline(UChar c) {
-  // Use isASCIISpace() for basic Latin-1.
+  // Use IsASCIISpace() for basic Latin-1.
   // This will include newlines, which aren't included in Unicode DirWS.
   return c <= 0x7F
              ? WTF::IsASCIISpace(c)
diff --git a/third_party/WebKit/Source/web/WebPagePopupImpl.h b/third_party/WebKit/Source/web/WebPagePopupImpl.h
index ea3cd4a01296..38f21b310965 100644
--- a/third_party/WebKit/Source/web/WebPagePopupImpl.h
+++ b/third_party/WebKit/Source/web/WebPagePopupImpl.h
@@ -36,6 +36,9 @@
 #include "public/web/WebPagePopup.h"
 #include "web/PageWidgetDelegate.h"
 
+// To avoid conflicts with the CreateWindow macro from the Windows SDK...
+#undef PostMessage
+
 namespace blink {
 
 class CompositorAnimationHost;
diff --git a/third_party/WebKit/Source/web/WebSettingsImpl.cpp b/third_party/WebKit/Source/web/WebSettingsImpl.cpp
index 79d6c3f1ca9d..451f22e94867 100644
--- a/third_party/WebKit/Source/web/WebSettingsImpl.cpp
+++ b/third_party/WebKit/Source/web/WebSettingsImpl.cpp
@@ -62,7 +62,7 @@ WebSettingsImpl::WebSettingsImpl(Settings* settings,
 
 void WebSettingsImpl::SetFromStrings(const WebString& name,
                                      const WebString& value) {
-  settings_->SetFromStrings(name, value);
+  settings_->setFromStrings(name, value);
 }
 
 void WebSettingsImpl::SetStandardFontFamily(const WebString& font,
diff --git a/third_party/WebKit/Tools/Scripts/webkitpy/style/checkers/cpp.py b/third_party/WebKit/Tools/Scripts/webkitpy/style/checkers/cpp.py
index 0872b56b1b83..bc274c0eba49 100644
--- a/third_party/WebKit/Tools/Scripts/webkitpy/style/checkers/cpp.py
+++ b/third_party/WebKit/Tools/Scripts/webkitpy/style/checkers/cpp.py
@@ -2828,37 +2828,8 @@ def check_identifier_name_in_declaration(filename, line_number, line, file_state
 
         is_function_arguments = is_function_arguments or character_after_identifier == '('
 
-        # Remove "m_" and "s_" to allow them.
-        modified_identifier = sub(r'(^|(?<=::))[ms]_', '', identifier)
-        if not file_state.is_objective_c() and modified_identifier.find('_') >= 0:
-            # Various exceptions to the rule: JavaScript op codes functions, const_iterator.
-            if (not (filename.find('JavaScriptCore') >= 0 and modified_identifier.find('op_') >= 0)
-                    and not (filename.find('gtk') >= 0 and modified_identifier.startswith('webkit_') >= 0)
-                    and not (filename.find('StructTraits.h') >= 0)
-                    and not modified_identifier.startswith('tst_')
-                    and not modified_identifier.startswith('webkit_dom_object_')
-                    and not modified_identifier.startswith('webkit_soup')
-                    and not modified_identifier.startswith('NPN_')
-                    and not modified_identifier.startswith('NPP_')
-                    and not modified_identifier.startswith('NP_')
-                    and not modified_identifier.startswith('qt_')
-                    and not modified_identifier.startswith('_q_')
-                    and not modified_identifier.startswith('cairo_')
-                    and not modified_identifier.startswith('Ecore_')
-                    and not modified_identifier.startswith('Eina_')
-                    and not modified_identifier.startswith('Evas_')
-                    and not modified_identifier.startswith('Ewk_')
-                    and not modified_identifier.startswith('cti_')
-                    and not modified_identifier.find('::qt_') >= 0
-                    and not modified_identifier.find('::_q_') >= 0
-                    and not modified_identifier == 'const_iterator'
-                    and not modified_identifier == 'vm_throw'
-                    and not modified_identifier == 'DFG_OPERATION'):
-                error(line_number, 'readability/naming/underscores', 4, identifier +
-                      " is incorrectly named. Don't use underscores in your identifier names.")
-
         # Check for variables named 'l', these are too easy to confuse with '1' in some fonts
-        if modified_identifier == 'l':
+        if identifier == 'l':
             error(line_number, 'readability/naming', 4, identifier +
                   " is incorrectly named. Don't use the single letter 'l' as an identifier name.")
 
diff --git a/third_party/WebKit/public/platform/WebData.h b/third_party/WebKit/public/platform/WebData.h
index 6bed5f7a0cfd..70f9d425336d 100644
--- a/third_party/WebKit/public/platform/WebData.h
+++ b/third_party/WebKit/public/platform/WebData.h
@@ -83,12 +83,12 @@ class BLINK_PLATFORM_EXPORT WebData {
 #else
   template <class C>
   WebData(const C& c) {
-    Assign(c.Data(), c.size());
+    Assign(c.data(), c.size());
   }
 
   template <class C>
   WebData& operator=(const C& c) {
-    Assign(c.Data(), c.size());
+    Assign(c.data(), c.size());
     return *this;
   }
 #endif
diff --git a/third_party/WebKit/public/platform/WebFont.h b/third_party/WebKit/public/platform/WebFont.h
index b39db27692cf..864dcc9ce558 100644
--- a/third_party/WebKit/public/platform/WebFont.h
+++ b/third_party/WebKit/public/platform/WebFont.h
@@ -10,6 +10,9 @@
 #include "WebCommon.h"
 #include <memory>
 
+// To avoid conflicts with the CreateWindow macro from the Windows SDK...
+#undef DrawText
+
 namespace blink {
 
 struct WebFloatPoint;
diff --git a/third_party/WebKit/public/platform/WebInputEvent.h b/third_party/WebKit/public/platform/WebInputEvent.h
index 44fc8f300a49..e162d8c88f28 100644
--- a/third_party/WebKit/public/platform/WebInputEvent.h
+++ b/third_party/WebKit/public/platform/WebInputEvent.h
@@ -310,43 +310,43 @@ class WebInputEvent {
 
   static const char* GetName(WebInputEvent::Type type) {
 #define CASE_TYPE(t)     \
-  case WebInputEvent::t: \
+  case WebInputEvent::k##t: \
     return #t
     switch (type) {
-      CASE_TYPE(kUndefined);
-      CASE_TYPE(kMouseDown);
-      CASE_TYPE(kMouseUp);
-      CASE_TYPE(kMouseMove);
-      CASE_TYPE(kMouseEnter);
-      CASE_TYPE(kMouseLeave);
-      CASE_TYPE(kContextMenu);
-      CASE_TYPE(kMouseWheel);
-      CASE_TYPE(kRawKeyDown);
-      CASE_TYPE(kKeyDown);
-      CASE_TYPE(kKeyUp);
-      CASE_TYPE(kChar);
-      CASE_TYPE(kGestureScrollBegin);
-      CASE_TYPE(kGestureScrollEnd);
-      CASE_TYPE(kGestureScrollUpdate);
-      CASE_TYPE(kGestureFlingStart);
-      CASE_TYPE(kGestureFlingCancel);
-      CASE_TYPE(kGestureShowPress);
-      CASE_TYPE(kGestureTap);
-      CASE_TYPE(kGestureTapUnconfirmed);
-      CASE_TYPE(kGestureTapDown);
-      CASE_TYPE(kGestureTapCancel);
-      CASE_TYPE(kGestureDoubleTap);
-      CASE_TYPE(kGestureTwoFingerTap);
-      CASE_TYPE(kGestureLongPress);
-      CASE_TYPE(kGestureLongTap);
-      CASE_TYPE(kGesturePinchBegin);
-      CASE_TYPE(kGesturePinchEnd);
-      CASE_TYPE(kGesturePinchUpdate);
-      CASE_TYPE(kTouchStart);
-      CASE_TYPE(kTouchMove);
-      CASE_TYPE(kTouchEnd);
-      CASE_TYPE(kTouchCancel);
-      CASE_TYPE(kTouchScrollStarted);
+      CASE_TYPE(Undefined);
+      CASE_TYPE(MouseDown);
+      CASE_TYPE(MouseUp);
+      CASE_TYPE(MouseMove);
+      CASE_TYPE(MouseEnter);
+      CASE_TYPE(MouseLeave);
+      CASE_TYPE(ContextMenu);
+      CASE_TYPE(MouseWheel);
+      CASE_TYPE(RawKeyDown);
+      CASE_TYPE(KeyDown);
+      CASE_TYPE(KeyUp);
+      CASE_TYPE(Char);
+      CASE_TYPE(GestureScrollBegin);
+      CASE_TYPE(GestureScrollEnd);
+      CASE_TYPE(GestureScrollUpdate);
+      CASE_TYPE(GestureFlingStart);
+      CASE_TYPE(GestureFlingCancel);
+      CASE_TYPE(GestureShowPress);
+      CASE_TYPE(GestureTap);
+      CASE_TYPE(GestureTapUnconfirmed);
+      CASE_TYPE(GestureTapDown);
+      CASE_TYPE(GestureTapCancel);
+      CASE_TYPE(GestureDoubleTap);
+      CASE_TYPE(GestureTwoFingerTap);
+      CASE_TYPE(GestureLongPress);
+      CASE_TYPE(GestureLongTap);
+      CASE_TYPE(GesturePinchBegin);
+      CASE_TYPE(GesturePinchEnd);
+      CASE_TYPE(GesturePinchUpdate);
+      CASE_TYPE(TouchStart);
+      CASE_TYPE(TouchMove);
+      CASE_TYPE(TouchEnd);
+      CASE_TYPE(TouchCancel);
+      CASE_TYPE(TouchScrollStarted);
       default:
         NOTREACHED();
         return "";
