# Copyright 2015 The Chromium Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

# This template defines a CDM adapter target. Just use this as you would a
# normal target and everything should work correctly. If GYP, you would instead
# depend on media/media_cdm_adapter.gyp:cdmadapter which would in turn modify
# your target with direct_dependent_settings.
template("cdm_adapter") {
  # TODO(GYP) On Mac/Linux this should be a loadable_module.
  shared_library(target_name) {
    # Don't filter sources list again.
    set_sources_assignment_filter([])
    cflags = []
    sources = []
    ldflags = []
    libs = []
    forward_variables_from(invoker, "*")

    sources += [
      "//media/cdm/ppapi/api/content_decryption_module.h",
      "//media/cdm/ppapi/cdm_adapter.cc",
      "//media/cdm/ppapi/cdm_adapter.h",
      "//media/cdm/ppapi/cdm_file_io_impl.cc",
      "//media/cdm/ppapi/cdm_file_io_impl.h",
      "//media/cdm/ppapi/cdm_helpers.cc",
      "//media/cdm/ppapi/cdm_helpers.h",
      "//media/cdm/ppapi/cdm_logging.cc",
      "//media/cdm/ppapi/cdm_logging.h",
      "//media/cdm/ppapi/cdm_wrapper.h",
      "//media/cdm/ppapi/linked_ptr.h",
      "//media/cdm/ppapi/supported_cdm_versions.h",
    ]
    if (is_mac) {
      ldflags += [
        # Not to strip important symbols by -Wl,-dead_strip.
        "-Wl,-exported_symbol,_PPP_GetInterface",
        "-Wl,-exported_symbol,_PPP_InitializeModule",
        "-Wl,-exported_symbol,_PPP_ShutdownModule",
      ]
      #TODO(GYP) Mac: 'DYLIB_INSTALL_NAME_BASE': '@loader_path',
    } else if (is_posix) {
      cflags += [ "-fvisibility=hidden" ]

      # Required for clock_gettime()
      libs += [ "rt" ]
    }

    # TODO(jschuh) crbug.com/167187
    configs += [ "//build/config/compiler:no_size_t_to_int_warning" ]
  }
}
