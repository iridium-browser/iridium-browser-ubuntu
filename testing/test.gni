# Copyright 2015 The Chromium Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

# ==============================================================================
# TEST SETUP
# ==============================================================================

# Define a test as an executable (or apk on Android) with the "testonly" flag
# set.
template("test") {
  if (is_android) {
    import("//build/config/android/config.gni")
    import("//build/config/android/rules.gni")

    main_target_name = target_name
    library_name = "_${target_name}__library"
    apk_name = "${target_name}_apk"

    shared_library(library_name) {
      # Configs will always be defined since we set_defaults for a component
      # in the main config. We want to use those rather than whatever came with
      # the nested shared/static library inside the component.
      configs = []  # Prevent list overwriting warning.
      configs = invoker.configs

      testonly = true

      # Don't use "*" to forward all variables since some (like output_name
      # and isolate_file) apply only to the APK below.
      forward_variables_from(invoker,
                             [
                               "all_dependent_configs",
                               "allow_circular_includes_from",
                               "cflags",
                               "cflags_c",
                               "cflags_cc",
                               "check_includes",
                               "data",
                               "data_deps",
                               "datadeps",
                               "defines",
                               "forward_dependent_configs_from",
                               "include_dirs",
                               "ldflags",
                               "lib_dirs",
                               "libs",
                               "output_extension",
                               "output_name",
                               "public",
                               "public_configs",
                               "public_deps",
                               "sources",
                               "visibility",
                             ])

      deps = []
      if (!defined(invoker.use_launcher) || invoker.use_launcher) {
        deps += [ "//testing/android/native_test:native_test_native_code" ]
      }
      if (defined(invoker.deps)) {
        deps += invoker.deps
      }
    }

    unittest_apk(apk_name) {
      unittests_dep = ":$library_name"
      apk_name = main_target_name
      if (defined(invoker.output_name)) {
        apk_name = invoker.output_name
        unittests_binary = "lib${apk_name}.so"
      }
      deps = [
        ":$library_name",
      ]
      if (defined(invoker.apk_deps)) {
        deps += invoker.apk_deps
      }
      if (defined(invoker.apk_asset_location)) {
        asset_location = invoker.apk_asset_location
      }
    }

    test_name = main_target_name
    if (defined(invoker.output_name)) {
      test_name = invoker.output_name
    }
    test_runner_script_name = "${test_name}__test_runner_script"
    test_runner_script(test_runner_script_name) {
      test_name = test_name
      test_type = "gtest"
      test_suite = test_name
      if (defined(invoker.isolate_file)) {
        isolate_file = invoker.isolate_file
      }
    }

    group(target_name) {
      testonly = true
      datadeps = [
        ":$test_runner_script_name",
      ]
      deps = [
        ":$library_name",
        ":$apk_name",
      ]
    }
  } else if (is_ios) {
    if (is_ios) {
      import("//build/config/ios/rules.gni")
    }

    target__sources_name = "${target_name}__sources"
    if (defined(invoker.sources)) {
      source_set(target__sources_name) {
        sources = invoker.sources
        testonly = true

        configs = []  # Prevent list overwriting warning.
        configs += invoker.configs

        forward_variables_from(invoker,
                               [
                                 "cflags",
                                 "cflags_c",
                                 "cflags_cc",
                                 "cflags_objc",
                                 "cflags_objcc",
                                 "data",
                                 "data_deps",
                                 "datadeps",
                                 "defines",
                                 "deps",
                                 "include_dirs",
                                 "includes",
                               ])
      }
    }

    ios_app(target_name) {
      # TODO(GYP): Make this configurable and only provide a default
      # that can be overridden.
      info_plist = "//testing/gtest_ios/unittest-Info.plist"
      app_name = target_name
      entitlements_path = "//testing/gtest_ios"
      code_signing_identity = ""
      testonly = true

      # See above call.
      set_sources_assignment_filter([])

      forward_variables_from(invoker,
                             [
                               "all_dependent_configs",
                               "allow_circular_includes_from",
                               "cflags",
                               "cflags_c",
                               "cflags_cc",
                               "cflags_objc",
                               "cflags_objcc",
                               "check_includes",
                               "forward_dependent_configs_from",
                               "ldflags",
                               "libs",
                               "output_extension",
                               "output_name",
                               "public",
                               "public_configs",
                               "public_deps",
                               "visibility",
                             ])

      if (defined(invoker.deps)) {
        deps = invoker.deps
      } else {
        deps = []
      }
      deps += [
        # All shared libraries must have the sanitizer deps to properly link in
        # asan mode (this target will be empty in other cases).
        "//build/config/sanitizers:deps",
      ]

      if (defined(invoker.sources)) {
        deps += [ ":${target__sources_name}" ]
      }
    }
  } else {
    executable(target_name) {
      forward_variables_from(invoker, "*")

      testonly = true

      if (!defined(invoker.deps)) {
        deps = []
      }
      deps += [
        # All shared libraries must have the sanitizer deps to properly link in
        # asan mode (this target will be empty in other cases).
        "//build/config/sanitizers:deps",

        # Give tests the default manifest on Windows (a no-op elsewhere).
        "//build/win:default_exe_manifest",
      ]
    }
  }
}
