# Copyright 2014 The Native Client Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

import("//native_client/build/config/sysroot.gni")
import("//native_client/build/toolchain/clang.gni")
import("//native_client/build/toolchain/gcc_toolchain.gni")
import("//native_client/build/toolchain/goma.gni")

gcc_toolchain("arm") {
  cc = "arm-linux-gnueabi-gcc"
  cxx = "arm-linux-gnueabi-g++"
  ar = "arm-linux-gnueabi-ar"
  ld = cxx

  toolchain_cpu = "arm"
  toolchain_os = "linux"
}

gcc_toolchain("trusted_arm") {
  cc = "arm-linux-gnueabi-gcc"
  cxx = "arm-linux-gnueabi-g++"
  ar = "arm-linux-gnueabi-ar"
  ld = cxx

  toolchain_cpu = "arm"
  toolchain_os = "linux"
}

gcc_toolchain("x86") {
  if (is_clang) {
    if (use_clang_type_profiler) {
      prefix = rebase_path("//third_party/llvm-allocated-type/Linux_ia32/bin",
                           root_build_dir)
    } else {
      prefix = rebase_path("//third_party/llvm-build/Release+Asserts/bin",
                           root_build_dir)
    }
    cc = "$prefix/clang"
    cxx = "$prefix/clang++"
  } else {
    cc = "gcc"
    cxx = "g++"
  }

  ar = "ar"
  ld = cxx

  toolchain_cpu = "x86"
  toolchain_os = "linux"
}

gcc_toolchain("x64") {
  if (is_clang) {
    if (use_clang_type_profiler) {
      prefix = rebase_path("//third_party/llvm-allocated-type/Linux_x64/bin",
                           root_build_dir)
    } else {
      prefix = rebase_path("//third_party/llvm-build/Release+Asserts/bin",
                           root_build_dir)
    }
    cc = "$prefix/clang"
    cxx = "$prefix/clang++"
  } else {
    cc = "gcc"
    cxx = "g++"
  }

  ar = "ar"
  ld = cxx

  toolchain_cpu = "x64"
  toolchain_os = "linux"
}

gcc_toolchain("trusted_x86") {
  if (is_clang) {
    if (use_clang_type_profiler) {
      prefix = rebase_path("//third_party/llvm-allocated-type/Linux_ia32/bin",
                           root_build_dir)
    } else {
      prefix = rebase_path("//third_party/llvm-build/Release+Asserts/bin",
                           root_build_dir)
    }
    cc = "$prefix/clang"
    cxx = "$prefix/clang++"
  } else {
    cc = "gcc"
    cxx = "g++"
  }

  ar = "ar"
  ld = cxx

  toolchain_cpu = "x86"
  toolchain_os = "linux"
}

gcc_toolchain("trusted_x64") {
  if (is_clang) {
    if (use_clang_type_profiler) {
      prefix = rebase_path("//third_party/llvm-allocated-type/Linux_x64/bin",
                           root_build_dir)
    } else {
      prefix = rebase_path("//third_party/llvm-build/Release+Asserts/bin",
                           root_build_dir)
    }
    cc = "$prefix/clang"
    cxx = "$prefix/clang++"
  } else {
    cc = "gcc"
    cxx = "g++"
  }

  ar = "ar"
  ld = cxx

  toolchain_cpu = "x64"
  toolchain_os = "linux"
}

gcc_toolchain("mipsel") {
  cc = "mipsel-linux-gnu-gcc"
  cxx = "mipsel-linux-gnu-g++"
  ar = "mipsel-linux-gnu-ar"
  ld = cxx

  toolchain_cpu = "mipsel"
  toolchain_os = "linux"
}
