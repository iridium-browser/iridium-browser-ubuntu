# Copyright (c) 2014 The Native Client Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

import("//native_client/build/toolchain/gcc_toolchain.gni")

# This template defines a NaCl toolchain.
#
# The template defines both a "raw" and "cooked" toolchain.  These toolchains
# are identical, but use different names to allow us to inject dependencies
# without creating circular references.
#
# It requires the following variables specifying the executables to run:
#  - cc
#  - cxx
#  - ar
#  - ld
# and the following which is used in the toolchain_args
#  - toolchain_cpu  (What "current_cpu" should be set to when invoking a
#                    build using this toolchain.)

template("nacl_toolchain") {
  assert(defined(invoker.cc), "nacl_toolchain() must specify a \"cc\" value")
  assert(defined(invoker.cxx), "nacl_toolchain() must specify a \"cxx\" value")
  assert(defined(invoker.ar), "nacl_toolchain() must specify a \"ar\" value")
  assert(defined(invoker.ld), "nacl_toolchain() must specify a \"ld\" value")
  assert(defined(invoker.toolchain_cpu),
         "nacl_toolchain() must specify a \"toolchain_cpu\"")

  toolchain_os = "nacl"
  if (defined(invoker.is_clang)) {
    is_clang = invoker.is_clang
  }
  if (defined(invoker.executable_extension)) {
    executable_extension = invoker.executable_extension
  } else {
    executable_extension = ".nexe"
  }
  toolchain_cpu = invoker.toolchain_cpu

  cc = invoker.cc
  cxx = invoker.cxx
  ar = invoker.ar
  ld = invoker.ld

  gcc_toolchain(target_name) {
    rebuild_define = "NACL_TC_REV=" + invoker.toolchain_revision
    if (defined(invoker.deps)) {
      deps = invoker.deps
    }
  }
}
