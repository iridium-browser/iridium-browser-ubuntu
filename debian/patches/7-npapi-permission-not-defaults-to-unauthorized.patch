Index: iridium-ubuntu-build/chrome/browser/browser_resources.grd
===================================================================
--- iridium-ubuntu-build.orig/chrome/browser/browser_resources.grd
+++ iridium-ubuntu-build/chrome/browser/browser_resources.grd
@@ -337,6 +337,7 @@
       </if>
       <if expr="desktop_linux or (is_android and enable_plugins)">
         <include name="IDR_PLUGIN_DB_JSON" file="resources\plugin_metadata\plugins_linux.json" type="BINDATA" />
+        <include name="IDR_PLATFORM_PLUGIN_DB_JSON" file="resources\plugin_metadata\plugins_ubuntu_linux.json" type="BINDATA" />
       </if>
       <if expr="is_android">
         <then>
Index: iridium-ubuntu-build/chrome/browser/plugins/plugin_finder.cc
===================================================================
--- iridium-ubuntu-build.orig/chrome/browser/plugins/plugin_finder.cc
+++ iridium-ubuntu-build/chrome/browser/plugins/plugin_finder.cc
@@ -153,44 +153,10 @@ void RecordBuiltInPluginListError(Plugin
                             static_cast<int>(PluginListError::NUM_VALUES));
 }
 
-}  // namespace
-
-// static
-void PluginFinder::RegisterPrefs(PrefRegistrySimple* registry) {
-  registry->RegisterBooleanPref(prefs::kDisablePluginFinder, false);
-}
-
-// static
-PluginFinder* PluginFinder::GetInstance() {
-  // PluginFinder::GetInstance() is the only method that's allowed to call
-  // base::Singleton<PluginFinder>::get().
-  return base::Singleton<PluginFinder>::get();
-}
-
-PluginFinder::PluginFinder() : version_(-1) {
-  DCHECK_CURRENTLY_ON(content::BrowserThread::UI);
-}
-
-void PluginFinder::Init() {
-  DCHECK_CURRENTLY_ON(content::BrowserThread::UI);
-  // Load the built-in plugin list first. If we have a newer version stored
-  // locally or download one, we will replace this one with it.
-  std::unique_ptr<base::DictionaryValue> plugin_list(LoadBuiltInPluginList());
-
-  // Gracefully handle the case where we couldn't parse the built-in plugin list
-  // for some reason (https://crbug.com/388560). TODO(bauerb): Change back to a
-  // DCHECK once we have gathered more data about the underlying problem.
-  if (!plugin_list)
-    return;
-
-  ReinitializePlugins(plugin_list.get());
-}
-
-// static
-base::DictionaryValue* PluginFinder::LoadBuiltInPluginList() {
+base::DictionaryValue* LoadPlatformPluginListWithId(int resourceId) {
   base::StringPiece json_resource(
       ResourceBundle::GetSharedInstance().GetRawDataResource(
-          IDR_PLUGIN_DB_JSON));
+          resourceId));
   std::string error_str;
   int error_code = base::JSONReader::JSON_NO_ERROR;
   std::unique_ptr<base::Value> value = base::JSONReader::ReadAndReturnError(
@@ -245,6 +211,59 @@ base::DictionaryValue* PluginFinder::Loa
   return static_cast<base::DictionaryValue*>(value.release());
 }
 
+}  // namespace
+
+// static
+void PluginFinder::RegisterPrefs(PrefRegistrySimple* registry) {
+  registry->RegisterBooleanPref(prefs::kDisablePluginFinder, false);
+}
+
+void PluginFinder::MergePlatformSpecificPlugins (base::DictionaryValue * plugin_list) {
+  if (!plugin_list)
+    return;
+  std::unique_ptr<base::DictionaryValue> platform_plugin_list =
+    std::unique_ptr<base::DictionaryValue>(LoadPlatformPluginList());
+  if (platform_plugin_list) {
+    plugin_list->MergeDictionary(platform_plugin_list.get());
+  }
+}
+
+// static
+PluginFinder* PluginFinder::GetInstance() {
+  // PluginFinder::GetInstance() is the only method that's allowed to call
+  // base::Singleton<PluginFinder>::get().
+  return base::Singleton<PluginFinder>::get();
+}
+
+PluginFinder::PluginFinder() : version_(-1) {
+  DCHECK_CURRENTLY_ON(content::BrowserThread::UI);
+}
+
+void PluginFinder::Init() {
+  DCHECK_CURRENTLY_ON(content::BrowserThread::UI);
+  // Load the built-in plugin list first. If we have a newer version stored
+  // locally or download one, we will replace this one with it.
+  std::unique_ptr<base::DictionaryValue> plugin_list(LoadBuiltInPluginList());
+
+  // Gracefully handle the case where we couldn't parse the built-in plugin list
+  // for some reason (https://crbug.com/388560). TODO(bauerb): Change back to a
+  // DCHECK once we have gathered more data about the underlying problem.
+  if (!plugin_list)
+    return;
+
+  ReinitializePlugins(plugin_list.get());
+}
+
+// static
+base::DictionaryValue* PluginFinder::LoadPlatformPluginList() {
+  return LoadPlatformPluginListWithId(IDR_PLATFORM_PLUGIN_DB_JSON);
+}
+
+// static
+base::DictionaryValue* PluginFinder::LoadBuiltInPluginList() {
+  return LoadPlatformPluginListWithId(IDR_PLUGIN_DB_JSON);
+}
+
 PluginFinder::~PluginFinder() {
 #if defined(ENABLE_PLUGIN_INSTALLATION)
   base::STLDeleteValues(&installers_);
@@ -308,15 +327,20 @@ void PluginFinder::ReinitializePlugins(
   if (version <= version_)
     return;
 
+  // Load the platform specific plugins (if any)
+  std::unique_ptr<DictionaryValue> final_plugin_list(plugin_list->DeepCopy());
+  MergePlatformSpecificPlugins(final_plugin_list.get());
+
   version_ = version;
 
   base::STLDeleteValues(&identifier_plugin_);
 
-  for (base::DictionaryValue::Iterator plugin_it(*plugin_list);
+  for (base::DictionaryValue::Iterator plugin_it(*final_plugin_list);
       !plugin_it.IsAtEnd(); plugin_it.Advance()) {
     const base::DictionaryValue* plugin = NULL;
     const std::string& identifier = plugin_it.key();
-    if (plugin_list->GetDictionaryWithoutPathExpansion(identifier, &plugin)) {
+    if (final_plugin_list->GetDictionaryWithoutPathExpansion(
+            identifier, &plugin)) {
       DCHECK(!identifier_plugin_[identifier]);
       identifier_plugin_[identifier] = CreatePluginMetadata(identifier, plugin);
 
Index: iridium-ubuntu-build/chrome/browser/plugins/plugin_finder.h
===================================================================
--- iridium-ubuntu-build.orig/chrome/browser/plugins/plugin_finder.h
+++ iridium-ubuntu-build/chrome/browser/plugins/plugin_finder.h
@@ -78,6 +78,15 @@ class PluginFinder {
   // Returns NULL if the plugin list couldn't be parsed.
   static base::DictionaryValue* LoadBuiltInPluginList();
 
+  // Loads platform specific whitelisted plugins from the browser
+  // resources and parses it.
+  // Returns NULL if the plug-in list couldn't be parsed.
+  static base::DictionaryValue* LoadPlatformPluginList();
+
+  // Merges the platform specific plugins to the list of plugins
+  // passed as parameters.
+  static void MergePlatformSpecificPlugins(base::DictionaryValue * plugin_list);
+
 #if defined(ENABLE_PLUGIN_INSTALLATION)
   std::map<std::string, PluginInstaller*> installers_;
 #endif
Index: iridium-ubuntu-build/chrome/browser/resources/plugin_metadata/plugins_ubuntu_linux.json
===================================================================
--- /dev/null
+++ iridium-ubuntu-build/chrome/browser/resources/plugin_metadata/plugins_ubuntu_linux.json
@@ -0,0 +1,18 @@
+{
+  "libunity_npapi_plugin.so": {
+    "mime_types": [
+      "application/x-unity-webapps-npapi"
+    ],
+    "versions": [
+      {
+        "version": "0",
+        "status": "up_to_date",
+        "reference": "https://launchpad.net/unity-chromium-extension/12.10"
+      }
+    ],
+    "lang": "en-US",
+    "name": "Unity WebApps plugin",
+    "url": "https://launchpad.net/ubuntu/quantal/+source/unity-chromium-extension",
+    "group_name_matcher": "Unity WebApps plugin"
+  }
+}
