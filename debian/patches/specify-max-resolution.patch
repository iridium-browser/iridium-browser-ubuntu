This patch hardcodes the maximum resolution support by the hardware video decoder for all profiles to be 1920x1088 if libva doesn't specify a resolution.

In the change introduced by https://codereview.chromium.org/872623002, Chromium now asks libva what the maximum resolution supported for a decoding profile is. However, the implementation of libva in Trusty doesn't ask the hardware what the maximum resolution supported is, and so when Chromium asks, a default value of 0x0 is set and returned. This would effectively disable hardware-accelerated video decoding.

There is a patch in libva (http://cgit.freedesktop.org/vaapi/intel-driver/commit/?id=9a20d6c34cb65e5b85dd16d6c8b3a215c5972b18) that asks what the maximum resolution supported by the hardware is. This change should be present in Xenial and newer, so rely on libva on returning a resolution. If it doesn't, then hardcode it to 1920x1088.


Index: iridium-ubuntu-build/media/gpu/vaapi_wrapper.cc
===================================================================
--- iridium-ubuntu-build.orig/media/gpu/vaapi_wrapper.cc
+++ iridium-ubuntu-build/media/gpu/vaapi_wrapper.cc
@@ -7,6 +7,10 @@
 #include <dlfcn.h>
 #include <string.h>
 
+#include <string>
+#include <fstream>
+#include <sstream>
+
 #include "base/bind.h"
 #include "base/callback_helpers.h"
 #include "base/logging.h"
@@ -441,6 +445,20 @@ bool VaapiWrapper::AreAttribsSupported_L
   return true;
 }
 
+int VaapiWrapper::va_fb_res_width = VA_FB_RES_DEFAULT_WIDTH;
+int VaapiWrapper::va_fb_res_height = VA_FB_RES_DEFAULT_HEIGHT;
+
+void VaapiWrapper::SetFallbackResolution(int w, int h)
+{
+  va_fb_res_width = w;
+  va_fb_res_height = h;
+}
+
+void VaapiWrapper::GetFallbackResolution(gfx::Size* resolution)
+{
+  resolution->SetSize(va_fb_res_width, va_fb_res_height);
+}
+
 bool VaapiWrapper::GetMaxResolution_Locked(
     VAProfile va_profile,
     VAEntrypoint entrypoint,
@@ -459,7 +477,11 @@ bool VaapiWrapper::GetMaxResolution_Lock
   unsigned int num_attribs;
   va_res = vaQuerySurfaceAttributes(va_display_, va_config_id, nullptr,
                                     &num_attribs);
-  VA_SUCCESS_OR_RETURN(va_res, "vaQuerySurfaceAttributes failed", false);
+  if (va_res != VA_STATUS_SUCCESS) {
+    LOG_VA_ERROR_AND_REPORT(va_res, "vaQuerySurfaceAttributes failed, returning fallback resolution");
+    GetFallbackResolution(resolution);
+    return true;
+  }
   if (!num_attribs)
     return false;
 
@@ -468,7 +490,11 @@ bool VaapiWrapper::GetMaxResolution_Lock
 
   va_res = vaQuerySurfaceAttributes(va_display_, va_config_id, &attrib_list[0],
                                     &num_attribs);
-  VA_SUCCESS_OR_RETURN(va_res, "vaQuerySurfaceAttributes failed", false);
+  if (va_res != VA_STATUS_SUCCESS) {
+    LOG_VA_ERROR_AND_REPORT(va_res, "vaQuerySurfaceAttributes failed, returning fallback resolution");
+    GetFallbackResolution(resolution);
+    return true;
+  }
 
   resolution->SetSize(0, 0);
   for (const auto& attrib : attrib_list) {
@@ -478,9 +504,7 @@ bool VaapiWrapper::GetMaxResolution_Lock
       resolution->set_height(attrib.value.value.i);
   }
   if (resolution->IsEmpty()) {
-    LOG(ERROR) << "Codec resolution " << resolution->ToString()
-               << " cannot be zero.";
-    return false;
+    GetFallbackResolution(resolution);
   }
   return true;
 }
@@ -1106,6 +1130,39 @@ void VaapiWrapper::DeinitializeVpp() {
 
 // static
 void VaapiWrapper::PreSandboxInitialization() {
+  int w=VA_FB_RES_DEFAULT_WIDTH, h=VA_FB_RES_DEFAULT_HEIGHT;
+  std::string line;
+  // Open fallback resolution file before sandbox initialization
+  std::ifstream va_fb_res_file(VA_FALLBACK_RESOLUTION_FILENAME);
+  // If the file exists, open and read the resolution
+  // If not successful, use default values
+  if(va_fb_res_file.is_open()){
+    LOG(INFO) << "Opened fallback resolution file: " << VA_FALLBACK_RESOLUTION_FILENAME;
+    if(std::getline(va_fb_res_file,line)){
+      std::istringstream iss(line);
+      if(!((iss >> w) && (iss >> h))){
+        w=VA_FB_RES_DEFAULT_WIDTH;
+        h=VA_FB_RES_DEFAULT_HEIGHT;
+        LOG(ERROR) << "Could not read values. Please check that\
+         the first line has two space separated integers indicating\
+         the width and height in that order.";
+      }
+      else if( w<1 || h<1)
+      {
+        w=VA_FB_RES_DEFAULT_WIDTH;
+        h=VA_FB_RES_DEFAULT_HEIGHT;
+        LOG(WARNING) << "Non-positive dimension(s) specified. \
+        Using default values instead.";
+      }
+    }
+    else
+      LOG(ERROR) << "Failed to read resolution";
+  }
+  else
+    LOG(ERROR) << "Failed to open fallback resolution file: " << VA_FALLBACK_RESOLUTION_FILENAME;
+  va_fb_res_file.close();
+  LOG(INFO) << "Resolution used: " << w << " x " << h;
+  SetFallbackResolution(w,h);
 #if defined(USE_OZONE)
   const char kDriRenderNode0Path[] = "/dev/dri/renderD128";
   base::File drm_file = base::File(
Index: iridium-ubuntu-build/media/gpu/vaapi_wrapper.h
===================================================================
--- iridium-ubuntu-build.orig/media/gpu/vaapi_wrapper.h
+++ iridium-ubuntu-build/media/gpu/vaapi_wrapper.h
@@ -41,6 +41,10 @@ class NativePixmap;
 }
 #endif
 
+#define VA_FB_RES_DEFAULT_WIDTH 1920
+#define VA_FB_RES_DEFAULT_HEIGHT 1088 // Yes, this should be 1088.
+#define VA_FALLBACK_RESOLUTION_FILENAME "/etc/chromium-browser/va_fallback_resolution"
+
 namespace media {
 
 // This class handles VA-API calls and ensures proper locking of VA-API calls
@@ -295,6 +299,12 @@ class MEDIA_GPU_EXPORT VaapiWrapper
       VAProfile va_profile,
       VAEntrypoint entrypoint,
       const std::vector<VAConfigAttrib>& required_attribs);
+  
+  static int va_fb_res_width, va_fb_res_height;
+  // Set the maximum fallback resolution
+  static void SetFallbackResolution(int w, int h);
+  // Get the maximum fallback resolution
+  static void GetFallbackResolution(gfx::Size* resolution);
 
   // Get maximum resolution for |va_profile| and |entrypoint| with
   // |required_attribs|. If return value is true, |resolution| is the maximum
